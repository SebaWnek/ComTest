
ComTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009568  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009848  08009848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009850  08009850  00019850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009854  08009854  00019854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08009858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .test         00000080  24000014  0800986c  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000035e4  24000098  080098ec  00020098  2**3
                  ALLOC
  9 ._user_heap_stack 00000604  2400367c  080098ec  0002367c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018182  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002ad0  00000000  00000000  00038244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001150  00000000  00000000  0003ad18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001048  00000000  00000000  0003be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037820  00000000  00000000  0003ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017d21  00000000  00000000  000746d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001646f9  00000000  00000000  0008c3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001f0aea  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000048c8  00000000  00000000  001f0b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000098 	.word	0x24000098
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080097e8 	.word	0x080097e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400009c 	.word	0x2400009c
 80002d4:	080097e8 	.word	0x080097e8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <enqueue>:
static baseFunc dictionary[DICT_SIZE];

static request queue[QUEUE_SIZE];

void enqueue(uint8_t *data, uint32_t size)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	queue[nextFree].funcNum = data[0];
 80005e6:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <enqueue+0xd8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7819      	ldrb	r1, [r3, #0]
 80005f0:	4a31      	ldr	r2, [pc, #196]	; (80006b8 <enqueue+0xdc>)
 80005f2:	0103      	lsls	r3, r0, #4
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	if(size - 1 <= sizeof(uint64_t))
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d815      	bhi.n	800062e <enqueue+0x52>
	{
		queue[nextFree].isAddress = false;
 8000602:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <enqueue+0xd8>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4a2c      	ldr	r2, [pc, #176]	; (80006b8 <enqueue+0xdc>)
 8000608:	011b      	lsls	r3, r3, #4
 800060a:	4413      	add	r3, r2
 800060c:	3301      	adds	r3, #1
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
		memcpy(&queue[nextFree].data, data+1, size-1);
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <enqueue+0xd8>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	3308      	adds	r3, #8
 800061a:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <enqueue+0xdc>)
 800061c:	1898      	adds	r0, r3, r2
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	1c59      	adds	r1, r3, #1
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	461a      	mov	r2, r3
 8000628:	f009 f8c8 	bl	80097bc <memcpy>
 800062c:	e02a      	b.n	8000684 <enqueue+0xa8>
	}
	else
	{
		queue[nextFree].isAddress = true;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <enqueue+0xd8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <enqueue+0xdc>)
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	4413      	add	r3, r2
 8000638:	3301      	adds	r3, #1
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
		queue[nextFree].data = (uint32_t)allocate(size-1);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8dc 	bl	8000800 <allocate>
 8000648:	4603      	mov	r3, r0
 800064a:	4619      	mov	r1, r3
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <enqueue+0xd8>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	460c      	mov	r4, r1
 8000654:	4615      	mov	r5, r2
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <enqueue+0xdc>)
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	4413      	add	r3, r2
 800065c:	3308      	adds	r3, #8
 800065e:	e9c3 4500 	strd	r4, r5, [r3]
		memcpy((void*)queue[nextFree].data, data+1, size-1);
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <enqueue+0xd8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <enqueue+0xdc>)
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	4413      	add	r3, r2
 800066c:	3308      	adds	r3, #8
 800066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000672:	4613      	mov	r3, r2
 8000674:	4618      	mov	r0, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	1c59      	adds	r1, r3, #1
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	461a      	mov	r2, r3
 8000680:	f009 f89c 	bl	80097bc <memcpy>
	}
//	if(count == 0) //if already executing just add to queue, if not - need to set next to execution
//	{
//		toExecute = nextFree; //set newly added as next to be executed
//	}
	countToExecute++;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <enqueue+0xe0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <enqueue+0xe0>)
 800068e:	701a      	strb	r2, [r3, #0]
	if(++nextFree == QUEUE_SIZE) nextFree = 0; //need to be careful with QUEUE_SIZE = 256 when using uint8_t as this will be overflow
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <enqueue+0xd8>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <enqueue+0xd8>)
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <enqueue+0xd8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b80      	cmp	r3, #128	; 0x80
 80006a2:	d102      	bne.n	80006aa <enqueue+0xce>
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <enqueue+0xd8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bdb0      	pop	{r4, r5, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	240000b5 	.word	0x240000b5
 80006b8:	240004b8 	.word	0x240004b8
 80006bc:	240000b4 	.word	0x240000b4

080006c0 <registerFunc>:

void registerFunc(baseFunc function, uint8_t position)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	dictionary[position] = function;
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	4905      	ldr	r1, [pc, #20]	; (80006e4 <registerFunc+0x24>)
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	240000b8 	.word	0x240000b8

080006e8 <isNextReady>:

bool isNextReady(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
	return countToExecute > 0;
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <isNextReady+0x1c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bf14      	ite	ne
 80006f4:	2301      	movne	r3, #1
 80006f6:	2300      	moveq	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	240000b4 	.word	0x240000b4

08000708 <invokeNext>:

void invokeNext(void)
{
 8000708:	b598      	push	{r3, r4, r7, lr}
 800070a:	af00      	add	r7, sp, #0
	dictionary[queue[toExecute].funcNum](queue[toExecute].data);
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <invokeNext+0x58>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <invokeNext+0x5c>)
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <invokeNext+0x60>)
 800071c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <invokeNext+0x58>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <invokeNext+0x5c>)
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	4413      	add	r3, r2
 800072a:	3308      	adds	r3, #8
 800072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000730:	4610      	mov	r0, r2
 8000732:	4619      	mov	r1, r3
 8000734:	47a0      	blx	r4
	countToExecute--;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <invokeNext+0x64>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <invokeNext+0x64>)
 8000740:	701a      	strb	r2, [r3, #0]
	if(++toExecute == QUEUE_SIZE) toExecute = 0; //need to be careful with QUEUE_SIZE = 256 when using uint8_t as this will be overflow
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <invokeNext+0x58>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <invokeNext+0x58>)
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <invokeNext+0x58>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b80      	cmp	r3, #128	; 0x80
 8000754:	d102      	bne.n	800075c <invokeNext+0x54>
 8000756:	4b02      	ldr	r3, [pc, #8]	; (8000760 <invokeNext+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	bd98      	pop	{r3, r4, r7, pc}
 8000760:	240000b6 	.word	0x240000b6
 8000764:	240004b8 	.word	0x240004b8
 8000768:	240000b8 	.word	0x240000b8
 800076c:	240000b4 	.word	0x240000b4

08000770 <invokeNow>:
void invokeNow(uint8_t *data, uint32_t size)
{
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	if(size - 1 <= sizeof(uint64_t))
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3b01      	subs	r3, #1
 800077e:	2b08      	cmp	r3, #8
 8000780:	d81a      	bhi.n	80007b8 <invokeNow+0x48>
	{
		uint64_t dataForFunc = 0;
 8000782:	f04f 0200 	mov.w	r2, #0
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		memcpy(&dataForFunc, &data[1], size-1);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	1c59      	adds	r1, r3, #1
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	4618      	mov	r0, r3
 800079c:	f009 f80e 	bl	80097bc <memcpy>
		//dataForFunc = *(uint64_t*)&data[1];
		dictionary[data[0]](dataForFunc);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <invokeNow+0x8c>)
 80007a8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80007ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80007b0:	4610      	mov	r0, r2
 80007b2:	4619      	mov	r1, r3
 80007b4:	47a0      	blx	r4
	{
		uint64_t dataPtr = (uint32_t)allocate(size - 1);
		memcpy((void*)dataPtr, data + 1, size - 1);
		dictionary[data[0]](dataPtr);
	}
}
 80007b6:	e01d      	b.n	80007f4 <invokeNow+0x84>
		uint64_t dataPtr = (uint32_t)allocate(size - 1);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f81f 	bl	8000800 <allocate>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	2300      	movs	r3, #0
 80007c8:	4614      	mov	r4, r2
 80007ca:	461d      	mov	r5, r3
 80007cc:	e9c7 4504 	strd	r4, r5, [r7, #16]
		memcpy((void*)dataPtr, data + 1, size - 1);
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4618      	mov	r0, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	1c59      	adds	r1, r3, #1
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	461a      	mov	r2, r3
 80007de:	f008 ffed 	bl	80097bc <memcpy>
		dictionary[data[0]](dataPtr);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <invokeNow+0x8c>)
 80007ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007f2:	4798      	blx	r3
}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bdb0      	pop	{r4, r5, r7, pc}
 80007fc:	240000b8 	.word	0x240000b8

08000800 <allocate>:

bool isEnoughSpaceLeft(uint32_t size);


uint8_t* allocate(uint32_t size)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	uint8_t *result = NULL;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
	if(size > BUFFER_SIZE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8000812:	d901      	bls.n	8000818 <allocate+0x18>
		return result;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	e017      	b.n	8000848 <allocate+0x48>

	if(isEnoughSpaceLeft(size))
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f81d 	bl	8000858 <isEnoughSpaceLeft>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00b      	beq.n	800083c <allocate+0x3c>
	{
		result = memBuffer + lastFree;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <allocate+0x50>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <allocate+0x54>)
 800082a:	4413      	add	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
		lastFree += size;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <allocate+0x50>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a06      	ldr	r2, [pc, #24]	; (8000850 <allocate+0x50>)
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e004      	b.n	8000846 <allocate+0x46>
	}
	else
	{
		result = memBuffer;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <allocate+0x54>)
 800083e:	60fb      	str	r3, [r7, #12]
		lastFree = size;
 8000840:	4a03      	ldr	r2, [pc, #12]	; (8000850 <allocate+0x50>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
	}
	return result;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	240034b8 	.word	0x240034b8
 8000854:	24000cb8 	.word	0x24000cb8

08000858 <isEnoughSpaceLeft>:

bool isEnoughSpaceLeft(uint32_t size)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	return size < BUFFER_SIZE - lastFree;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <isEnoughSpaceLeft+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	bf34      	ite	cc
 800086e:	2301      	movcc	r3, #1
 8000870:	2300      	movcs	r3, #0
 8000872:	b2db      	uxtb	r3, r3
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	240034b8 	.word	0x240034b8

08000884 <led_green_control>:

void blink(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t time, uint8_t count);


void led_green_control(uint64_t input)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t *data = (uint8_t*)&input;
 800088e:	463b      	mov	r3, r7
 8000890:	60fb      	str	r3, [r7, #12]

	switch (data[0])
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b32      	cmp	r3, #50	; 0x32
 8000898:	d011      	beq.n	80008be <led_green_control+0x3a>
 800089a:	2b32      	cmp	r3, #50	; 0x32
 800089c:	dc1a      	bgt.n	80008d4 <led_green_control+0x50>
 800089e:	2b30      	cmp	r3, #48	; 0x30
 80008a0:	d007      	beq.n	80008b2 <led_green_control+0x2e>
 80008a2:	2b31      	cmp	r3, #49	; 0x31
 80008a4:	d116      	bne.n	80008d4 <led_green_control+0x50>
	{
	case '1':
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2101      	movs	r1, #1
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <led_green_control+0x5c>)
 80008ac:	f004 f928 	bl	8004b00 <HAL_GPIO_WritePin>
		break;
 80008b0:	e012      	b.n	80008d8 <led_green_control+0x54>
	case '0':
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2101      	movs	r1, #1
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <led_green_control+0x5c>)
 80008b8:	f004 f922 	bl	8004b00 <HAL_GPIO_WritePin>
		break;
 80008bc:	e00c      	b.n	80008d8 <led_green_control+0x54>
	case '2':
		blink(LED_GREEN_GPIO_Port, LED_GREEN_Pin, data[1], data[2]);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3301      	adds	r3, #1
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3302      	adds	r3, #2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2101      	movs	r1, #1
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <led_green_control+0x5c>)
 80008ce:	f000 f86d 	bl	80009ac <blink>
		break;
 80008d2:	e001      	b.n	80008d8 <led_green_control+0x54>
	default:
		__NOP();
 80008d4:	bf00      	nop
	}

}
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58020400 	.word	0x58020400

080008e4 <led_red_control>:
void led_red_control(uint64_t input)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t *data = (uint8_t*)&input;
 80008ee:	463b      	mov	r3, r7
 80008f0:	60fb      	str	r3, [r7, #12]

		switch (data[0])
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b32      	cmp	r3, #50	; 0x32
 80008f8:	d013      	beq.n	8000922 <led_red_control+0x3e>
 80008fa:	2b32      	cmp	r3, #50	; 0x32
 80008fc:	dc1d      	bgt.n	800093a <led_red_control+0x56>
 80008fe:	2b30      	cmp	r3, #48	; 0x30
 8000900:	d008      	beq.n	8000914 <led_red_control+0x30>
 8000902:	2b31      	cmp	r3, #49	; 0x31
 8000904:	d119      	bne.n	800093a <led_red_control+0x56>
		{
		case '1':
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090c:	480e      	ldr	r0, [pc, #56]	; (8000948 <led_red_control+0x64>)
 800090e:	f004 f8f7 	bl	8004b00 <HAL_GPIO_WritePin>
			break;
 8000912:	e014      	b.n	800093e <led_red_control+0x5a>
		case '0':
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	480b      	ldr	r0, [pc, #44]	; (8000948 <led_red_control+0x64>)
 800091c:	f004 f8f0 	bl	8004b00 <HAL_GPIO_WritePin>
			break;
 8000920:	e00d      	b.n	800093e <led_red_control+0x5a>
		case '2':
			blink(LED_RED_GPIO_Port, LED_RED_Pin, data[1], data[2]);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3301      	adds	r3, #1
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3302      	adds	r3, #2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <led_red_control+0x64>)
 8000934:	f000 f83a 	bl	80009ac <blink>
			break;
 8000938:	e001      	b.n	800093e <led_red_control+0x5a>
		default:
			__NOP();
 800093a:	bf00      	nop
		}
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	58020400 	.word	0x58020400

0800094c <led_yellow_control>:
void led_yellow_control(uint64_t input)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t *data = (uint8_t*)&input;
 8000956:	463b      	mov	r3, r7
 8000958:	60fb      	str	r3, [r7, #12]

		switch (data[0])
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b32      	cmp	r3, #50	; 0x32
 8000960:	d011      	beq.n	8000986 <led_yellow_control+0x3a>
 8000962:	2b32      	cmp	r3, #50	; 0x32
 8000964:	dc1a      	bgt.n	800099c <led_yellow_control+0x50>
 8000966:	2b30      	cmp	r3, #48	; 0x30
 8000968:	d007      	beq.n	800097a <led_yellow_control+0x2e>
 800096a:	2b31      	cmp	r3, #49	; 0x31
 800096c:	d116      	bne.n	800099c <led_yellow_control+0x50>
		{
		case '1':
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2102      	movs	r1, #2
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <led_yellow_control+0x5c>)
 8000974:	f004 f8c4 	bl	8004b00 <HAL_GPIO_WritePin>
			break;
 8000978:	e012      	b.n	80009a0 <led_yellow_control+0x54>
		case '0':
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	480a      	ldr	r0, [pc, #40]	; (80009a8 <led_yellow_control+0x5c>)
 8000980:	f004 f8be 	bl	8004b00 <HAL_GPIO_WritePin>
			break;
 8000984:	e00c      	b.n	80009a0 <led_yellow_control+0x54>
		case '2':
			blink(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, data[1], data[2]);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3301      	adds	r3, #1
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3302      	adds	r3, #2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2102      	movs	r1, #2
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <led_yellow_control+0x5c>)
 8000996:	f000 f809 	bl	80009ac <blink>
			break;
 800099a:	e001      	b.n	80009a0 <led_yellow_control+0x54>
		default:
			__NOP();
 800099c:	bf00      	nop
		}
}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	58021000 	.word	0x58021000

080009ac <blink>:

void blink(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t time, uint8_t count)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	4608      	mov	r0, r1
 80009b6:	4611      	mov	r1, r2
 80009b8:	461a      	mov	r2, r3
 80009ba:	4603      	mov	r3, r0
 80009bc:	807b      	strh	r3, [r7, #2]
 80009be:	460b      	mov	r3, r1
 80009c0:	707b      	strb	r3, [r7, #1]
 80009c2:	4613      	mov	r3, r2
 80009c4:	703b      	strb	r3, [r7, #0]
	for(uint16_t i = 0; i < 2 * count; i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	81fb      	strh	r3, [r7, #14]
 80009ca:	e014      	b.n	80009f6 <blink+0x4a>
	{
		HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	4619      	mov	r1, r3
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f004 f8ae 	bl	8004b32 <HAL_GPIO_TogglePin>
		HAL_Delay(time);
 80009d6:	787b      	ldrb	r3, [r7, #1]
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fec9 	bl	8001770 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	4619      	mov	r1, r3
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f004 f8a5 	bl	8004b32 <HAL_GPIO_TogglePin>
		HAL_Delay(time);
 80009e8:	787b      	ldrb	r3, [r7, #1]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fec0 	bl	8001770 <HAL_Delay>
	for(uint16_t i = 0; i < 2 * count; i++)
 80009f0:	89fb      	ldrh	r3, [r7, #14]
 80009f2:	3301      	adds	r3, #1
 80009f4:	81fb      	strh	r3, [r7, #14]
 80009f6:	89fa      	ldrh	r2, [r7, #14]
 80009f8:	783b      	ldrb	r3, [r7, #0]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbe5      	blt.n	80009cc <blink+0x20>
	}
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a12:	f000 fb9d 	bl	8001150 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a16:	4b79      	ldr	r3, [pc, #484]	; (8000bfc <main+0x1f0>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d11b      	bne.n	8000a5a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a22:	f3bf 8f4f 	dsb	sy
}
 8000a26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a28:	f3bf 8f6f 	isb	sy
}
 8000a2c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a2e:	4b73      	ldr	r3, [pc, #460]	; (8000bfc <main+0x1f0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a36:	f3bf 8f4f 	dsb	sy
}
 8000a3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a3c:	f3bf 8f6f 	isb	sy
}
 8000a40:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a42:	4b6e      	ldr	r3, [pc, #440]	; (8000bfc <main+0x1f0>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a6d      	ldr	r2, [pc, #436]	; (8000bfc <main+0x1f0>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4e:	f3bf 8f4f 	dsb	sy
}
 8000a52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a54:	f3bf 8f6f 	isb	sy
}
 8000a58:	e000      	b.n	8000a5c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a5a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a5c:	4b67      	ldr	r3, [pc, #412]	; (8000bfc <main+0x1f0>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d138      	bne.n	8000ada <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a68:	4b64      	ldr	r3, [pc, #400]	; (8000bfc <main+0x1f0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a70:	f3bf 8f4f 	dsb	sy
}
 8000a74:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a76:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <main+0x1f0>)
 8000a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a7c:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	0b5b      	lsrs	r3, r3, #13
 8000a82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a86:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	08db      	lsrs	r3, r3, #3
 8000a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a90:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	015a      	lsls	r2, r3, #5
 8000a96:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a9a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aa0:	4956      	ldr	r1, [pc, #344]	; (8000bfc <main+0x1f0>)
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	60fa      	str	r2, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1ef      	bne.n	8000a92 <main+0x86>
    } while(sets-- != 0U);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	1e5a      	subs	r2, r3, #1
 8000ab6:	613a      	str	r2, [r7, #16]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e5      	bne.n	8000a88 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000abc:	f3bf 8f4f 	dsb	sy
}
 8000ac0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ac2:	4b4e      	ldr	r3, [pc, #312]	; (8000bfc <main+0x1f0>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a4d      	ldr	r2, [pc, #308]	; (8000bfc <main+0x1f0>)
 8000ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000acc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ace:	f3bf 8f4f 	dsb	sy
}
 8000ad2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ad4:	f3bf 8f6f 	isb	sy
}
 8000ad8:	e000      	b.n	8000adc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ada:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 fdb6 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f8b6 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f000 f9d4 	bl	8000e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae8:	f000 f9b2 	bl	8000e50 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000aec:	f000 f964 	bl	8000db8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000af0:	f000 f92a 	bl	8000d48 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer, 100);
 8000af4:	2264      	movs	r2, #100	; 0x64
 8000af6:	4942      	ldr	r1, [pc, #264]	; (8000c00 <main+0x1f4>)
 8000af8:	4842      	ldr	r0, [pc, #264]	; (8000c04 <main+0x1f8>)
 8000afa:	f008 fd90 	bl	800961e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000afe:	4b42      	ldr	r3, [pc, #264]	; (8000c08 <main+0x1fc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a42      	ldr	r2, [pc, #264]	; (8000c0c <main+0x200>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d04a      	beq.n	8000b9e <main+0x192>
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <main+0x1fc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <main+0x204>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d045      	beq.n	8000b9e <main+0x192>
 8000b12:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <main+0x1fc>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <main+0x208>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d040      	beq.n	8000b9e <main+0x192>
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <main+0x1fc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a3d      	ldr	r2, [pc, #244]	; (8000c18 <main+0x20c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d03b      	beq.n	8000b9e <main+0x192>
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <main+0x1fc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a3c      	ldr	r2, [pc, #240]	; (8000c1c <main+0x210>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d036      	beq.n	8000b9e <main+0x192>
 8000b30:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <main+0x1fc>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a3a      	ldr	r2, [pc, #232]	; (8000c20 <main+0x214>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d031      	beq.n	8000b9e <main+0x192>
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <main+0x1fc>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a39      	ldr	r2, [pc, #228]	; (8000c24 <main+0x218>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d02c      	beq.n	8000b9e <main+0x192>
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <main+0x1fc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a37      	ldr	r2, [pc, #220]	; (8000c28 <main+0x21c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d027      	beq.n	8000b9e <main+0x192>
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <main+0x1fc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a36      	ldr	r2, [pc, #216]	; (8000c2c <main+0x220>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d022      	beq.n	8000b9e <main+0x192>
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <main+0x1fc>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a34      	ldr	r2, [pc, #208]	; (8000c30 <main+0x224>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d01d      	beq.n	8000b9e <main+0x192>
 8000b62:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <main+0x1fc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <main+0x228>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d018      	beq.n	8000b9e <main+0x192>
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <main+0x1fc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <main+0x22c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d013      	beq.n	8000b9e <main+0x192>
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <main+0x1fc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a30      	ldr	r2, [pc, #192]	; (8000c3c <main+0x230>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d00e      	beq.n	8000b9e <main+0x192>
 8000b80:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <main+0x1fc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <main+0x234>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d009      	beq.n	8000b9e <main+0x192>
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <main+0x1fc>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <main+0x238>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d004      	beq.n	8000b9e <main+0x192>
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <main+0x1fc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a2b      	ldr	r2, [pc, #172]	; (8000c48 <main+0x23c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d108      	bne.n	8000bb0 <main+0x1a4>
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <main+0x1fc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <main+0x1fc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0208 	bic.w	r2, r2, #8
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e007      	b.n	8000bc0 <main+0x1b4>
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <main+0x1fc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <main+0x1fc>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0204 	bic.w	r2, r2, #4
 8000bbe:	601a      	str	r2, [r3, #0]

  registerFunctions();
 8000bc0:	f000 f9d0 	bl	8000f64 <registerFunctions>

  uint8_t send[8] = "hello\r\n";
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <main+0x240>)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bcc:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart3, send, 7, 1000);
 8000bd0:	1d39      	adds	r1, r7, #4
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	2207      	movs	r2, #7
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <main+0x1f8>)
 8000bda:	f006 fe55 	bl	8007888 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_SuspendTick();
 8000bde:	f000 fdeb 	bl	80017b8 <HAL_SuspendTick>
	  __WFI();
 8000be2:	bf30      	wfi
	  HAL_ResumeTick();
 8000be4:	f000 fdf8 	bl	80017d8 <HAL_ResumeTick>
	  //HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);

	  while(isNextReady())
 8000be8:	e001      	b.n	8000bee <main+0x1e2>
	  {
		  invokeNext();
 8000bea:	f7ff fd8d 	bl	8000708 <invokeNext>
	  while(isNextReady())
 8000bee:	f7ff fd7b 	bl	80006e8 <isNextReady>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f8      	bne.n	8000bea <main+0x1de>
	  HAL_SuspendTick();
 8000bf8:	e7f1      	b.n	8000bde <main+0x1d2>
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	24000014 	.word	0x24000014
 8000c04:	24003508 	.word	0x24003508
 8000c08:	24003598 	.word	0x24003598
 8000c0c:	40020010 	.word	0x40020010
 8000c10:	40020028 	.word	0x40020028
 8000c14:	40020040 	.word	0x40020040
 8000c18:	40020058 	.word	0x40020058
 8000c1c:	40020070 	.word	0x40020070
 8000c20:	40020088 	.word	0x40020088
 8000c24:	400200a0 	.word	0x400200a0
 8000c28:	400200b8 	.word	0x400200b8
 8000c2c:	40020410 	.word	0x40020410
 8000c30:	40020428 	.word	0x40020428
 8000c34:	40020440 	.word	0x40020440
 8000c38:	40020458 	.word	0x40020458
 8000c3c:	40020470 	.word	0x40020470
 8000c40:	40020488 	.word	0x40020488
 8000c44:	400204a0 	.word	0x400204a0
 8000c48:	400204b8 	.word	0x400204b8
 8000c4c:	08009800 	.word	0x08009800

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b09c      	sub	sp, #112	; 0x70
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	224c      	movs	r2, #76	; 0x4c
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 fdba 	bl	80097d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2220      	movs	r2, #32
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fdb4 	bl	80097d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c70:	2002      	movs	r0, #2
 8000c72:	f003 ff79 	bl	8004b68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <SystemClock_Config+0xf0>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <SystemClock_Config+0xf0>)
 8000c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <SystemClock_Config+0xf0>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <SystemClock_Config+0xf4>)
 8000c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c94:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <SystemClock_Config+0xf4>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <SystemClock_Config+0xf4>)
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ca8:	bf00      	nop
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <SystemClock_Config+0xf0>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb6:	d1f8      	bne.n	8000caa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2340      	movs	r3, #64	; 0x40
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000cd0:	233c      	movs	r3, #60	; 0x3c
 8000cd2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 ff73 	bl	8004bdc <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000cfc:	f000 fa56 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	233f      	movs	r3, #63	; 0x3f
 8000d02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2303      	movs	r3, #3
 8000d06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d10:	2340      	movs	r3, #64	; 0x40
 8000d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d14:	2340      	movs	r3, #64	; 0x40
 8000d16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d1e:	2340      	movs	r3, #64	; 0x40
 8000d20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2104      	movs	r1, #4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f004 fb86 	bl	8005438 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d32:	f000 fa3b 	bl	80011ac <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3770      	adds	r7, #112	; 0x70
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	58024800 	.word	0x58024800
 8000d44:	58000400 	.word	0x58000400

08000d48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <MX_TIM6_Init+0x6c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d6e:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000d72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d7c:	f006 fa50 	bl	8007220 <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d86:	f000 fa11 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d98:	f006 fc7a 	bl	8007690 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000da2:	f000 fa03 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	240034bc 	.word	0x240034bc
 8000db4:	40001000 	.word	0x40001000

08000db8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dbe:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_USART3_UART_Init+0x94>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000e02:	f006 fcf1 	bl	80077e8 <HAL_UART_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e0c:	f000 f9ce 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000e14:	f008 fb87 	bl	8009526 <HAL_UARTEx_SetTxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e1e:	f000 f9c5 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000e26:	f008 fbbc 	bl	80095a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e30:	f000 f9bc 	bl	80011ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_USART3_UART_Init+0x90>)
 8000e36:	f008 fb3d 	bl	80094b4 <HAL_UARTEx_DisableFifoMode>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f9b4 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24003508 	.word	0x24003508
 8000e4c:	40004800 	.word	0x40004800

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_DMA_Init+0x3c>)
 8000e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <MX_DMA_Init+0x3c>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_DMA_Init+0x3c>)
 8000e68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	200b      	movs	r0, #11
 8000e7a:	f000 fda4 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e7e:	200b      	movs	r0, #11
 8000e80:	f000 fdbb 	bl	80019fa <HAL_NVIC_EnableIRQ>

}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58024400 	.word	0x58024400

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	4a2a      	ldr	r2, [pc, #168]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed4:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f06:	4815      	ldr	r0, [pc, #84]	; (8000f5c <MX_GPIO_Init+0xcc>)
 8000f08:	f003 fdfa 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <MX_GPIO_Init+0xd0>)
 8000f12:	f003 fdf5 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000f16:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <MX_GPIO_Init+0xcc>)
 8000f30:	f003 fc36 	bl	80047a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_GPIO_Init+0xd0>)
 8000f4c:	f003 fc28 	bl	80047a0 <HAL_GPIO_Init>

}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	58020400 	.word	0x58020400
 8000f60:	58021000 	.word	0x58021000

08000f64 <registerFunctions>:

/* USER CODE BEGIN 4 */

void registerFunctions(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	  registerFunc(led_green_control, LED1);
 8000f68:	2141      	movs	r1, #65	; 0x41
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <registerFunctions+0x28>)
 8000f6c:	f7ff fba8 	bl	80006c0 <registerFunc>
	  registerFunc(led_red_control, LED2);
 8000f70:	2142      	movs	r1, #66	; 0x42
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <registerFunctions+0x2c>)
 8000f74:	f7ff fba4 	bl	80006c0 <registerFunc>
	  registerFunc(led_yellow_control, LED3);
 8000f78:	2143      	movs	r1, #67	; 0x43
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <registerFunctions+0x30>)
 8000f7c:	f7ff fba0 	bl	80006c0 <registerFunc>
	  registerFunc(wait, WAIT);
 8000f80:	2161      	movs	r1, #97	; 0x61
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <registerFunctions+0x34>)
 8000f84:	f7ff fb9c 	bl	80006c0 <registerFunc>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	08000885 	.word	0x08000885
 8000f90:	080008e5 	.word	0x080008e5
 8000f94:	0800094d 	.word	0x0800094d
 8000f98:	08000f9d 	.word	0x08000f9d

08000f9c <wait>:

void wait(uint64_t miliseconds)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	e9c7 0100 	strd	r0, r1, [r7]
	HAL_Delay((uint32_t)miliseconds);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fbe1 	bl	8001770 <HAL_Delay>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
	static uint8_t returnBuffer[2] = { ACK, 0};
	returnBuffer[1] = buffer[0];
 8000fc4:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <HAL_UARTEx_RxEventCallback+0x128>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000fcc:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart3, returnBuffer, 2, 1000);
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	4943      	ldr	r1, [pc, #268]	; (80010e4 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000fd6:	4844      	ldr	r0, [pc, #272]	; (80010e8 <HAL_UARTEx_RxEventCallback+0x130>)
 8000fd8:	f006 fc56 	bl	8007888 <HAL_UART_Transmit>
	//HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
	if(huart->Instance == USART3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a42      	ldr	r2, [pc, #264]	; (80010ec <HAL_UARTEx_RxEventCallback+0x134>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d177      	bne.n	80010d6 <HAL_UARTEx_RxEventCallback+0x11e>
	{
		if(buffer[0] != ASAP)
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <HAL_UARTEx_RxEventCallback+0x128>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b55      	cmp	r3, #85	; 0x55
 8000fee:	d005      	beq.n	8000ffc <HAL_UARTEx_RxEventCallback+0x44>
		{
			enqueue(buffer, Size);
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	483a      	ldr	r0, [pc, #232]	; (80010e0 <HAL_UARTEx_RxEventCallback+0x128>)
 8000ff6:	f7ff faf1 	bl	80005dc <enqueue>
 8000ffa:	e005      	b.n	8001008 <HAL_UARTEx_RxEventCallback+0x50>
		}
		else
		{
			invokeNow(&buffer[1], Size - 1);
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	4619      	mov	r1, r3
 8001002:	483b      	ldr	r0, [pc, #236]	; (80010f0 <HAL_UARTEx_RxEventCallback+0x138>)
 8001004:	f7ff fbb4 	bl	8000770 <invokeNow>
		}
		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);


		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer, 100);
 8001008:	2264      	movs	r2, #100	; 0x64
 800100a:	4935      	ldr	r1, [pc, #212]	; (80010e0 <HAL_UARTEx_RxEventCallback+0x128>)
 800100c:	4836      	ldr	r0, [pc, #216]	; (80010e8 <HAL_UARTEx_RxEventCallback+0x130>)
 800100e:	f008 fb06 	bl	800961e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a38      	ldr	r2, [pc, #224]	; (80010f8 <HAL_UARTEx_RxEventCallback+0x140>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d04a      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 800101c:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a36      	ldr	r2, [pc, #216]	; (80010fc <HAL_UARTEx_RxEventCallback+0x144>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d045      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a35      	ldr	r2, [pc, #212]	; (8001100 <HAL_UARTEx_RxEventCallback+0x148>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d040      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a33      	ldr	r2, [pc, #204]	; (8001104 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d03b      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a32      	ldr	r2, [pc, #200]	; (8001108 <HAL_UARTEx_RxEventCallback+0x150>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d036      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a30      	ldr	r2, [pc, #192]	; (800110c <HAL_UARTEx_RxEventCallback+0x154>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d031      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 800104e:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a2f      	ldr	r2, [pc, #188]	; (8001110 <HAL_UARTEx_RxEventCallback+0x158>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d02c      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <HAL_UARTEx_RxEventCallback+0x15c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d027      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a2c      	ldr	r2, [pc, #176]	; (8001118 <HAL_UARTEx_RxEventCallback+0x160>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d022      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a2a      	ldr	r2, [pc, #168]	; (800111c <HAL_UARTEx_RxEventCallback+0x164>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01d      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a29      	ldr	r2, [pc, #164]	; (8001120 <HAL_UARTEx_RxEventCallback+0x168>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d018      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a26      	ldr	r2, [pc, #152]	; (8001128 <HAL_UARTEx_RxEventCallback+0x170>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d00e      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a24      	ldr	r2, [pc, #144]	; (800112c <HAL_UARTEx_RxEventCallback+0x174>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d009      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a23      	ldr	r2, [pc, #140]	; (8001130 <HAL_UARTEx_RxEventCallback+0x178>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d004      	beq.n	80010b2 <HAL_UARTEx_RxEventCallback+0xfa>
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <HAL_UARTEx_RxEventCallback+0x17c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d109      	bne.n	80010c6 <HAL_UARTEx_RxEventCallback+0x10e>
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0208 	bic.w	r2, r2, #8
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	bf00      	nop
	}
}
 80010c4:	e007      	b.n	80010d6 <HAL_UARTEx_RxEventCallback+0x11e>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x13c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0204 	bic.w	r2, r2, #4
 80010d4:	601a      	str	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	24000014 	.word	0x24000014
 80010e4:	24000000 	.word	0x24000000
 80010e8:	24003508 	.word	0x24003508
 80010ec:	40004800 	.word	0x40004800
 80010f0:	24000015 	.word	0x24000015
 80010f4:	24003598 	.word	0x24003598
 80010f8:	40020010 	.word	0x40020010
 80010fc:	40020028 	.word	0x40020028
 8001100:	40020040 	.word	0x40020040
 8001104:	40020058 	.word	0x40020058
 8001108:	40020070 	.word	0x40020070
 800110c:	40020088 	.word	0x40020088
 8001110:	400200a0 	.word	0x400200a0
 8001114:	400200b8 	.word	0x400200b8
 8001118:	40020410 	.word	0x40020410
 800111c:	40020428 	.word	0x40020428
 8001120:	40020440 	.word	0x40020440
 8001124:	40020458 	.word	0x40020458
 8001128:	40020470 	.word	0x40020470
 800112c:	40020488 	.word	0x40020488
 8001130:	400204a0 	.word	0x400204a0
 8001134:	400204b8 	.word	0x400204b8

08001138 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	timersInterruptHandler(htim);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fa29 	bl	8001598 <timersInterruptHandler>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001162:	f000 fc65 	bl	8001a30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001166:	2301      	movs	r3, #1
 8001168:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800116a:	2300      	movs	r3, #0
 800116c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000010;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MPU_Config+0x58>)
 8001170:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128B;
 8001172:	2306      	movs	r3, #6
 8001174:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001176:	2300      	movs	r3, #0
 8001178:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800117a:	2300      	movs	r3, #0
 800117c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800117e:	2303      	movs	r3, #3
 8001180:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001182:	2301      	movs	r3, #1
 8001184:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001192:	463b      	mov	r3, r7
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fc83 	bl	8001aa0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800119a:	2004      	movs	r0, #4
 800119c:	f000 fc60 	bl	8001a60 <HAL_MPU_Enable>

}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	24000010 	.word	0x24000010

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_MspInit+0x30>)
 80011c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c4:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x30>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x30>)
 80011d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	58024400 	.word	0x58024400

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_TIM_Base_MspInit+0x48>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d116      	bne.n	800122c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_TIM_Base_MspInit+0x4c>)
 8001200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <HAL_TIM_Base_MspInit+0x4c>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_TIM_Base_MspInit+0x4c>)
 8001210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2036      	movs	r0, #54	; 0x36
 8001222:	f000 fbd0 	bl	80019c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001226:	2036      	movs	r0, #54	; 0x36
 8001228:	f000 fbe7 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40001000 	.word	0x40001000
 8001238:	58024400 	.word	0x58024400

0800123c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0b8      	sub	sp, #224	; 0xe0
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	22bc      	movs	r2, #188	; 0xbc
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fabb 	bl	80097d8 <memset>
  if(huart->Instance==USART3)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <HAL_UART_MspInit+0x12c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d178      	bne.n	800135e <HAL_UART_MspInit+0x122>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800126c:	2302      	movs	r3, #2
 800126e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fc68 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001286:	f7ff ff91 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_UART_MspInit+0x130>)
 800128c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001290:	4a36      	ldr	r2, [pc, #216]	; (800136c <HAL_UART_MspInit+0x130>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <HAL_UART_MspInit+0x130>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_UART_MspInit+0x130>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	4a2f      	ldr	r2, [pc, #188]	; (800136c <HAL_UART_MspInit+0x130>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <HAL_UART_MspInit+0x130>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012e0:	2307      	movs	r3, #7
 80012e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ea:	4619      	mov	r1, r3
 80012ec:	4820      	ldr	r0, [pc, #128]	; (8001370 <HAL_UART_MspInit+0x134>)
 80012ee:	f003 fa57 	bl	80047a0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_UART_MspInit+0x138>)
 80012f4:	4a20      	ldr	r2, [pc, #128]	; (8001378 <HAL_UART_MspInit+0x13c>)
 80012f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_UART_MspInit+0x138>)
 80012fa:	222d      	movs	r2, #45	; 0x2d
 80012fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_UART_MspInit+0x138>)
 800130c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001310:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_UART_MspInit+0x138>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800132a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_UART_MspInit+0x138>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001334:	f000 fbf8 	bl	8001b28 <HAL_DMA_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800133e:	f7ff ff35 	bl	80011ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001346:	67da      	str	r2, [r3, #124]	; 0x7c
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_UART_MspInit+0x138>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2027      	movs	r0, #39	; 0x27
 8001354:	f000 fb37 	bl	80019c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001358:	2027      	movs	r0, #39	; 0x27
 800135a:	f000 fb4e 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	37e0      	adds	r7, #224	; 0xe0
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004800 	.word	0x40004800
 800136c:	58024400 	.word	0x58024400
 8001370:	58020c00 	.word	0x58020c00
 8001374:	24003598 	.word	0x24003598
 8001378:	40020010 	.word	0x40020010

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <NMI_Handler+0x4>
	...

08001384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800138a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <HardFault_Handler+0x28>)
 8001390:	f003 fbcf 	bl	8004b32 <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 10000000; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	e003      	b.n	80013a2 <HardFault_Handler+0x1e>
	  {
		  __NOP();
 800139a:	bf00      	nop
	  for(int i = 0; i < 10000000; i++)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3301      	adds	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a02      	ldr	r2, [pc, #8]	; (80013b0 <HardFault_Handler+0x2c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	dbf7      	blt.n	800139a <HardFault_Handler+0x16>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80013aa:	e7ee      	b.n	800138a <HardFault_Handler+0x6>
 80013ac:	58020400 	.word	0x58020400
 80013b0:	00989680 	.word	0x00989680

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f99c 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <DMA1_Stream0_IRQHandler+0x10>)
 8001402:	f001 febb 	bl	800317c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	24003598 	.word	0x24003598

08001410 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USART3_IRQHandler+0x10>)
 8001416:	f006 facd 	bl	80079b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24003508 	.word	0x24003508

08001424 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM6_DAC_IRQHandler+0x10>)
 800142a:	f005 ff50 	bl	80072ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	240034bc 	.word	0x240034bc

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800143c:	4b37      	ldr	r3, [pc, #220]	; (800151c <SystemInit+0xe4>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001442:	4a36      	ldr	r2, [pc, #216]	; (800151c <SystemInit+0xe4>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800144c:	4b34      	ldr	r3, [pc, #208]	; (8001520 <SystemInit+0xe8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	2b06      	cmp	r3, #6
 8001456:	d807      	bhi.n	8001468 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001458:	4b31      	ldr	r3, [pc, #196]	; (8001520 <SystemInit+0xe8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 030f 	bic.w	r3, r3, #15
 8001460:	4a2f      	ldr	r2, [pc, #188]	; (8001520 <SystemInit+0xe8>)
 8001462:	f043 0307 	orr.w	r3, r3, #7
 8001466:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001468:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <SystemInit+0xec>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <SystemInit+0xec>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <SystemInit+0xec>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <SystemInit+0xec>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4929      	ldr	r1, [pc, #164]	; (8001524 <SystemInit+0xec>)
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <SystemInit+0xf0>)
 8001482:	4013      	ands	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <SystemInit+0xe8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <SystemInit+0xe8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 030f 	bic.w	r3, r3, #15
 800149a:	4a21      	ldr	r2, [pc, #132]	; (8001520 <SystemInit+0xe8>)
 800149c:	f043 0307 	orr.w	r3, r3, #7
 80014a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <SystemInit+0xec>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <SystemInit+0xec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <SystemInit+0xec>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <SystemInit+0xec>)
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <SystemInit+0xf4>)
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <SystemInit+0xec>)
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <SystemInit+0xf8>)
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <SystemInit+0xec>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <SystemInit+0xfc>)
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <SystemInit+0xec>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <SystemInit+0xec>)
 80014ce:	4a19      	ldr	r2, [pc, #100]	; (8001534 <SystemInit+0xfc>)
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <SystemInit+0xec>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <SystemInit+0xec>)
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <SystemInit+0xfc>)
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <SystemInit+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <SystemInit+0xec>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <SystemInit+0xec>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <SystemInit+0xec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <SystemInit+0x100>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <SystemInit+0x104>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001502:	d202      	bcs.n	800150a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <SystemInit+0x108>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <SystemInit+0x10c>)
 800150c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001510:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00
 8001520:	52002000 	.word	0x52002000
 8001524:	58024400 	.word	0x58024400
 8001528:	eaf6ed7f 	.word	0xeaf6ed7f
 800152c:	02020200 	.word	0x02020200
 8001530:	01ff0000 	.word	0x01ff0000
 8001534:	01010280 	.word	0x01010280
 8001538:	5c001000 	.word	0x5c001000
 800153c:	ffff0000 	.word	0xffff0000
 8001540:	51008108 	.word	0x51008108
 8001544:	52004000 	.word	0x52004000

08001548 <invokeTimerFunctions>:
static const timerInfo emptyTimer;

timerInfo timers[MAX_TIMERS] = {0};

void invokeTimerFunctions(uint8_t timerNumber)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i; i < timers[timerNumber].functionCount; i++)
 8001552:	e00f      	b.n	8001574 <invokeTimerFunctions+0x2c>
	{
		timers[timerNumber].functions[i]();
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	7bf9      	ldrb	r1, [r7, #15]
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <invokeTimerFunctions+0x4c>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	440b      	add	r3, r1
 8001566:	3302      	adds	r3, #2
 8001568:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800156c:	4798      	blx	r3
	for(uint8_t i; i < timers[timerNumber].functionCount; i++)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	3301      	adds	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <invokeTimerFunctions+0x4c>)
 8001578:	2134      	movs	r1, #52	; 0x34
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	3330      	adds	r3, #48	; 0x30
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	429a      	cmp	r2, r3
 8001588:	d3e4      	bcc.n	8001554 <invokeTimerFunctions+0xc>
	}
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	24003610 	.word	0x24003610

08001598 <timersInterruptHandler>:
	*psc = partB;
}


void timersInterruptHandler(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < MAX_TIMERS; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e01d      	b.n	80015e2 <timersInterruptHandler+0x4a>
	{
		if(timers[i].pointer != NULL && htim->Instance == timers[i].pointer->Instance)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <timersInterruptHandler+0x5c>)
 80015aa:	2134      	movs	r1, #52	; 0x34
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	3304      	adds	r3, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d010      	beq.n	80015dc <timersInterruptHandler+0x44>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <timersInterruptHandler+0x5c>)
 80015c2:	2034      	movs	r0, #52	; 0x34
 80015c4:	fb00 f303 	mul.w	r3, r0, r3
 80015c8:	440b      	add	r3, r1
 80015ca:	3304      	adds	r3, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d103      	bne.n	80015dc <timersInterruptHandler+0x44>
		{
			invokeTimerFunctions(i);
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ffb6 	bl	8001548 <invokeTimerFunctions>
	for(uint8_t i = 0; i < MAX_TIMERS; i++)
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	3301      	adds	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d9de      	bls.n	80015a6 <timersInterruptHandler+0xe>
		}
	}
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	24003610 	.word	0x24003610

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015fc:	f7ff ff1c 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f008 f8a5 	bl	8009774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff f9ef 	bl	8000a0c <main>
  bx  lr
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001638:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800163c:	08009858 	.word	0x08009858
  ldr r2, =_sbss
 8001640:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8001644:	2400367c 	.word	0x2400367c

08001648 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC3_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001652:	2003      	movs	r0, #3
 8001654:	f000 f9ac 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001658:	f004 f8a4 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_Init+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	4913      	ldr	r1, [pc, #76]	; (80016b8 <HAL_Init+0x6c>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_Init+0x68>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_Init+0x6c>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_Init+0x70>)
 800168e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_Init+0x74>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f814 	bl	80016c4 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e002      	b.n	80016ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016a6:	f7ff fd87 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	58024400 	.word	0x58024400
 80016b8:	08009808 	.word	0x08009808
 80016bc:	24000008 	.word	0x24000008
 80016c0:	24000004 	.word	0x24000004

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_InitTick+0x60>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e021      	b.n	800171c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_InitTick+0x64>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f991 	bl	8001a16 <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f95b 	bl	80019c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_InitTick+0x68>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	24000010 	.word	0x24000010
 8001728:	24000004 	.word	0x24000004
 800172c:	2400000c 	.word	0x2400000c

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	24000010 	.word	0x24000010
 8001754:	24003678 	.word	0x24003678

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	24003678 	.word	0x24003678

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000010 	.word	0x24000010

080017b8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_SuspendTick+0x1c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_SuspendTick+0x1c>)
 80017c2:	f023 0302 	bic.w	r3, r3, #2
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_ResumeTick+0x1c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_ResumeTick+0x1c>)
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetREVID+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0c1b      	lsrs	r3, r3, #16
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	5c001000 	.word	0x5c001000

08001810 <__NVIC_SetPriorityGrouping>:
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <__NVIC_SetPriorityGrouping+0x40>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	4313      	orrs	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x40>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00
 8001854:	05fa0000 	.word	0x05fa0000

08001858 <__NVIC_GetPriorityGrouping>:
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	; (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f7ff ff8e 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff29 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff40 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff90 	bl	8001904 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5f 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff33 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa4 	bl	800196c <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a34:	f3bf 8f5f 	dmb	sy
}
 8001a38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_MPU_Disable+0x28>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_MPU_Disable+0x28>)
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a44:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_MPU_Disable+0x2c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00
 8001a5c:	e000ed90 	.word	0xe000ed90

08001a60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a68:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_MPU_Enable+0x38>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_MPU_Enable+0x3c>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_MPU_Enable+0x3c>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a7e:	f3bf 8f4f 	dsb	sy
}
 8001a82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a84:	f3bf 8f6f 	isb	sy
}
 8001a88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed90 	.word	0xe000ed90
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	785a      	ldrb	r2, [r3, #1]
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_MPU_ConfigRegion+0x84>)
 8001aae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d029      	beq.n	8001b0c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_MPU_ConfigRegion+0x84>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7b1b      	ldrb	r3, [r3, #12]
 8001ac4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7adb      	ldrb	r3, [r3, #11]
 8001aca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001acc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7a9b      	ldrb	r3, [r3, #10]
 8001ad2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ad4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7b5b      	ldrb	r3, [r3, #13]
 8001ada:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001adc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7b9b      	ldrb	r3, [r3, #14]
 8001ae2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ae4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7bdb      	ldrb	r3, [r3, #15]
 8001aea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7a5b      	ldrb	r3, [r3, #9]
 8001af2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001af4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7a1b      	ldrb	r3, [r3, #8]
 8001afa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001afc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b06:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b0a:	e005      	b.n	8001b18 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_MPU_ConfigRegion+0x84>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HAL_MPU_ConfigRegion+0x84>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed90 	.word	0xe000ed90

08001b28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff fe12 	bl	8001758 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e316      	b.n	800216e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <HAL_DMA_Init+0x1b8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d04a      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_DMA_Init+0x1bc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d045      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <HAL_DMA_Init+0x1c0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d040      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a62      	ldr	r2, [pc, #392]	; (8001cec <HAL_DMA_Init+0x1c4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d03b      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_DMA_Init+0x1c8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d036      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5f      	ldr	r2, [pc, #380]	; (8001cf4 <HAL_DMA_Init+0x1cc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d031      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <HAL_DMA_Init+0x1d0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02c      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5c      	ldr	r2, [pc, #368]	; (8001cfc <HAL_DMA_Init+0x1d4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d027      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5a      	ldr	r2, [pc, #360]	; (8001d00 <HAL_DMA_Init+0x1d8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d022      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a59      	ldr	r2, [pc, #356]	; (8001d04 <HAL_DMA_Init+0x1dc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d01d      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <HAL_DMA_Init+0x1e0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d018      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a56      	ldr	r2, [pc, #344]	; (8001d0c <HAL_DMA_Init+0x1e4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a54      	ldr	r2, [pc, #336]	; (8001d10 <HAL_DMA_Init+0x1e8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00e      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a53      	ldr	r2, [pc, #332]	; (8001d14 <HAL_DMA_Init+0x1ec>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d009      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_DMA_Init+0x1f0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_DMA_Init+0xb8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_DMA_Init+0x1f4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <HAL_DMA_Init+0xbc>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_DMA_Init+0xbe>
 8001be4:	2300      	movs	r3, #0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 813b 	beq.w	8001e62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a37      	ldr	r2, [pc, #220]	; (8001ce0 <HAL_DMA_Init+0x1b8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d04a      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a36      	ldr	r2, [pc, #216]	; (8001ce4 <HAL_DMA_Init+0x1bc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d045      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a34      	ldr	r2, [pc, #208]	; (8001ce8 <HAL_DMA_Init+0x1c0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d040      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a33      	ldr	r2, [pc, #204]	; (8001cec <HAL_DMA_Init+0x1c4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d03b      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a31      	ldr	r2, [pc, #196]	; (8001cf0 <HAL_DMA_Init+0x1c8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d036      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_DMA_Init+0x1cc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d031      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2e      	ldr	r2, [pc, #184]	; (8001cf8 <HAL_DMA_Init+0x1d0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02c      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <HAL_DMA_Init+0x1d4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d027      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_DMA_Init+0x1d8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d022      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <HAL_DMA_Init+0x1dc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d01d      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <HAL_DMA_Init+0x1e0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d018      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a27      	ldr	r2, [pc, #156]	; (8001d0c <HAL_DMA_Init+0x1e4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <HAL_DMA_Init+0x1e8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00e      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <HAL_DMA_Init+0x1ec>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a22      	ldr	r2, [pc, #136]	; (8001d18 <HAL_DMA_Init+0x1f0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_DMA_Init+0x174>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a21      	ldr	r2, [pc, #132]	; (8001d1c <HAL_DMA_Init+0x1f4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d108      	bne.n	8001cae <HAL_DMA_Init+0x186>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_DMA_Init+0x196>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cbe:	e02f      	b.n	8001d20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc0:	f7ff fd4a 	bl	8001758 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d928      	bls.n	8001d20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e246      	b.n	800216e <HAL_DMA_Init+0x646>
 8001ce0:	40020010 	.word	0x40020010
 8001ce4:	40020028 	.word	0x40020028
 8001ce8:	40020040 	.word	0x40020040
 8001cec:	40020058 	.word	0x40020058
 8001cf0:	40020070 	.word	0x40020070
 8001cf4:	40020088 	.word	0x40020088
 8001cf8:	400200a0 	.word	0x400200a0
 8001cfc:	400200b8 	.word	0x400200b8
 8001d00:	40020410 	.word	0x40020410
 8001d04:	40020428 	.word	0x40020428
 8001d08:	40020440 	.word	0x40020440
 8001d0c:	40020458 	.word	0x40020458
 8001d10:	40020470 	.word	0x40020470
 8001d14:	40020488 	.word	0x40020488
 8001d18:	400204a0 	.word	0x400204a0
 8001d1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1c8      	bne.n	8001cc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <HAL_DMA_Init+0x420>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d107      	bne.n	8001d84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d84:	4b71      	ldr	r3, [pc, #452]	; (8001f4c <HAL_DMA_Init+0x424>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <HAL_DMA_Init+0x428>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d90:	d328      	bcc.n	8001de4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b28      	cmp	r3, #40	; 0x28
 8001d98:	d903      	bls.n	8001da2 <HAL_DMA_Init+0x27a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8001da0:	d917      	bls.n	8001dd2 <HAL_DMA_Init+0x2aa>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b3e      	cmp	r3, #62	; 0x3e
 8001da8:	d903      	bls.n	8001db2 <HAL_DMA_Init+0x28a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b42      	cmp	r3, #66	; 0x42
 8001db0:	d90f      	bls.n	8001dd2 <HAL_DMA_Init+0x2aa>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b46      	cmp	r3, #70	; 0x46
 8001db8:	d903      	bls.n	8001dc2 <HAL_DMA_Init+0x29a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b48      	cmp	r3, #72	; 0x48
 8001dc0:	d907      	bls.n	8001dd2 <HAL_DMA_Init+0x2aa>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b4e      	cmp	r3, #78	; 0x4e
 8001dc8:	d905      	bls.n	8001dd6 <HAL_DMA_Init+0x2ae>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b52      	cmp	r3, #82	; 0x52
 8001dd0:	d801      	bhi.n	8001dd6 <HAL_DMA_Init+0x2ae>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_DMA_Init+0x2b0>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001de2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f023 0307 	bic.w	r3, r3, #7
 8001dfa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d117      	bne.n	8001e3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00e      	beq.n	8001e3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f002 fb33 	bl	800448c <DMA_CheckFifoParam>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2240      	movs	r2, #64	; 0x40
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e197      	b.n	800216e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f002 fa6e 	bl	8004328 <DMA_CalcBaseAndBitshift>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	223f      	movs	r2, #63	; 0x3f
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e0cd      	b.n	8001ffe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a3b      	ldr	r2, [pc, #236]	; (8001f54 <HAL_DMA_Init+0x42c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <HAL_DMA_Init+0x38a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a39      	ldr	r2, [pc, #228]	; (8001f58 <HAL_DMA_Init+0x430>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01d      	beq.n	8001eb2 <HAL_DMA_Init+0x38a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_DMA_Init+0x434>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d018      	beq.n	8001eb2 <HAL_DMA_Init+0x38a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <HAL_DMA_Init+0x438>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_DMA_Init+0x38a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a35      	ldr	r2, [pc, #212]	; (8001f64 <HAL_DMA_Init+0x43c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Init+0x38a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a33      	ldr	r2, [pc, #204]	; (8001f68 <HAL_DMA_Init+0x440>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_DMA_Init+0x38a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <HAL_DMA_Init+0x444>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Init+0x38a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <HAL_DMA_Init+0x448>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_DMA_Init+0x38e>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_DMA_Init+0x390>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8097 	beq.w	8001fec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <HAL_DMA_Init+0x42c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d021      	beq.n	8001f0c <HAL_DMA_Init+0x3e4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_DMA_Init+0x430>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01c      	beq.n	8001f0c <HAL_DMA_Init+0x3e4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_DMA_Init+0x434>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d017      	beq.n	8001f0c <HAL_DMA_Init+0x3e4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_DMA_Init+0x438>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d012      	beq.n	8001f0c <HAL_DMA_Init+0x3e4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_DMA_Init+0x43c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_DMA_Init+0x3e4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_DMA_Init+0x440>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d008      	beq.n	8001f0c <HAL_DMA_Init+0x3e4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_DMA_Init+0x444>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d003      	beq.n	8001f0c <HAL_DMA_Init+0x3e4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_DMA_Init+0x448>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_DMA_Init+0x44c>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d020      	beq.n	8001f78 <HAL_DMA_Init+0x450>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b80      	cmp	r3, #128	; 0x80
 8001f3c:	d102      	bne.n	8001f44 <HAL_DMA_Init+0x41c>
 8001f3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f42:	e01a      	b.n	8001f7a <HAL_DMA_Init+0x452>
 8001f44:	2300      	movs	r3, #0
 8001f46:	e018      	b.n	8001f7a <HAL_DMA_Init+0x452>
 8001f48:	fe10803f 	.word	0xfe10803f
 8001f4c:	5c001000 	.word	0x5c001000
 8001f50:	ffff0000 	.word	0xffff0000
 8001f54:	58025408 	.word	0x58025408
 8001f58:	5802541c 	.word	0x5802541c
 8001f5c:	58025430 	.word	0x58025430
 8001f60:	58025444 	.word	0x58025444
 8001f64:	58025458 	.word	0x58025458
 8001f68:	5802546c 	.word	0x5802546c
 8001f6c:	58025480 	.word	0x58025480
 8001f70:	58025494 	.word	0x58025494
 8001f74:	fffe000f 	.word	0xfffe000f
 8001f78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68d2      	ldr	r2, [r2, #12]
 8001f7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fa8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b6e      	ldr	r3, [pc, #440]	; (8002178 <HAL_DMA_Init+0x650>)
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a6e      	ldr	r2, [pc, #440]	; (800217c <HAL_DMA_Init+0x654>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	009a      	lsls	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f002 f9a9 	bl	8004328 <DMA_CalcBaseAndBitshift>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	e008      	b.n	8001ffe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0b7      	b.n	800216e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a5f      	ldr	r2, [pc, #380]	; (8002180 <HAL_DMA_Init+0x658>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d072      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5d      	ldr	r2, [pc, #372]	; (8002184 <HAL_DMA_Init+0x65c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d06d      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <HAL_DMA_Init+0x660>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d068      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5a      	ldr	r2, [pc, #360]	; (800218c <HAL_DMA_Init+0x664>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d063      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a59      	ldr	r2, [pc, #356]	; (8002190 <HAL_DMA_Init+0x668>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d05e      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_DMA_Init+0x66c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d059      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a56      	ldr	r2, [pc, #344]	; (8002198 <HAL_DMA_Init+0x670>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d054      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a54      	ldr	r2, [pc, #336]	; (800219c <HAL_DMA_Init+0x674>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d04f      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a53      	ldr	r2, [pc, #332]	; (80021a0 <HAL_DMA_Init+0x678>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04a      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_DMA_Init+0x67c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d045      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <HAL_DMA_Init+0x680>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d040      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <HAL_DMA_Init+0x684>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d03b      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a4d      	ldr	r2, [pc, #308]	; (80021b0 <HAL_DMA_Init+0x688>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d036      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a4b      	ldr	r2, [pc, #300]	; (80021b4 <HAL_DMA_Init+0x68c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d031      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a4a      	ldr	r2, [pc, #296]	; (80021b8 <HAL_DMA_Init+0x690>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d02c      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a48      	ldr	r2, [pc, #288]	; (80021bc <HAL_DMA_Init+0x694>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d027      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a47      	ldr	r2, [pc, #284]	; (80021c0 <HAL_DMA_Init+0x698>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d022      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a45      	ldr	r2, [pc, #276]	; (80021c4 <HAL_DMA_Init+0x69c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01d      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a44      	ldr	r2, [pc, #272]	; (80021c8 <HAL_DMA_Init+0x6a0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a42      	ldr	r2, [pc, #264]	; (80021cc <HAL_DMA_Init+0x6a4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a41      	ldr	r2, [pc, #260]	; (80021d0 <HAL_DMA_Init+0x6a8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00e      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <HAL_DMA_Init+0x6ac>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3e      	ldr	r2, [pc, #248]	; (80021d8 <HAL_DMA_Init+0x6b0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_DMA_Init+0x5c6>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a3c      	ldr	r2, [pc, #240]	; (80021dc <HAL_DMA_Init+0x6b4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_DMA_Init+0x5ca>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_DMA_Init+0x5cc>
 80020f2:	2300      	movs	r3, #0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d032      	beq.n	800215e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f002 fa43 	bl	8004584 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b80      	cmp	r3, #128	; 0x80
 8002104:	d102      	bne.n	800210c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002120:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_DMA_Init+0x624>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b08      	cmp	r3, #8
 8002130:	d80c      	bhi.n	800214c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f002 fac0 	bl	80046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	e008      	b.n	800215e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	a7fdabf8 	.word	0xa7fdabf8
 800217c:	cccccccd 	.word	0xcccccccd
 8002180:	40020010 	.word	0x40020010
 8002184:	40020028 	.word	0x40020028
 8002188:	40020040 	.word	0x40020040
 800218c:	40020058 	.word	0x40020058
 8002190:	40020070 	.word	0x40020070
 8002194:	40020088 	.word	0x40020088
 8002198:	400200a0 	.word	0x400200a0
 800219c:	400200b8 	.word	0x400200b8
 80021a0:	40020410 	.word	0x40020410
 80021a4:	40020428 	.word	0x40020428
 80021a8:	40020440 	.word	0x40020440
 80021ac:	40020458 	.word	0x40020458
 80021b0:	40020470 	.word	0x40020470
 80021b4:	40020488 	.word	0x40020488
 80021b8:	400204a0 	.word	0x400204a0
 80021bc:	400204b8 	.word	0x400204b8
 80021c0:	58025408 	.word	0x58025408
 80021c4:	5802541c 	.word	0x5802541c
 80021c8:	58025430 	.word	0x58025430
 80021cc:	58025444 	.word	0x58025444
 80021d0:	58025458 	.word	0x58025458
 80021d4:	5802546c 	.word	0x5802546c
 80021d8:	58025480 	.word	0x58025480
 80021dc:	58025494 	.word	0x58025494

080021e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e226      	b.n	800264a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_DMA_Start_IT+0x2a>
 8002206:	2302      	movs	r3, #2
 8002208:	e21f      	b.n	800264a <HAL_DMA_Start_IT+0x46a>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	f040 820a 	bne.w	8002634 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a68      	ldr	r2, [pc, #416]	; (80023d4 <HAL_DMA_Start_IT+0x1f4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d04a      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a66      	ldr	r2, [pc, #408]	; (80023d8 <HAL_DMA_Start_IT+0x1f8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d045      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_DMA_Start_IT+0x1fc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d040      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a63      	ldr	r2, [pc, #396]	; (80023e0 <HAL_DMA_Start_IT+0x200>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d03b      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a62      	ldr	r2, [pc, #392]	; (80023e4 <HAL_DMA_Start_IT+0x204>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d036      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a60      	ldr	r2, [pc, #384]	; (80023e8 <HAL_DMA_Start_IT+0x208>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d031      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5f      	ldr	r2, [pc, #380]	; (80023ec <HAL_DMA_Start_IT+0x20c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d02c      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_DMA_Start_IT+0x210>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d027      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <HAL_DMA_Start_IT+0x214>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d022      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <HAL_DMA_Start_IT+0x218>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01d      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a59      	ldr	r2, [pc, #356]	; (80023fc <HAL_DMA_Start_IT+0x21c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d018      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a57      	ldr	r2, [pc, #348]	; (8002400 <HAL_DMA_Start_IT+0x220>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_DMA_Start_IT+0x224>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00e      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <HAL_DMA_Start_IT+0x228>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a53      	ldr	r2, [pc, #332]	; (800240c <HAL_DMA_Start_IT+0x22c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_DMA_Start_IT+0xee>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a51      	ldr	r2, [pc, #324]	; (8002410 <HAL_DMA_Start_IT+0x230>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d108      	bne.n	80022e0 <HAL_DMA_Start_IT+0x100>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e007      	b.n	80022f0 <HAL_DMA_Start_IT+0x110>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f001 fe6a 	bl	8003fd0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a34      	ldr	r2, [pc, #208]	; (80023d4 <HAL_DMA_Start_IT+0x1f4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04a      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a33      	ldr	r2, [pc, #204]	; (80023d8 <HAL_DMA_Start_IT+0x1f8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d045      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a31      	ldr	r2, [pc, #196]	; (80023dc <HAL_DMA_Start_IT+0x1fc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d040      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a30      	ldr	r2, [pc, #192]	; (80023e0 <HAL_DMA_Start_IT+0x200>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d03b      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2e      	ldr	r2, [pc, #184]	; (80023e4 <HAL_DMA_Start_IT+0x204>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d036      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2d      	ldr	r2, [pc, #180]	; (80023e8 <HAL_DMA_Start_IT+0x208>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d031      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <HAL_DMA_Start_IT+0x20c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02c      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <HAL_DMA_Start_IT+0x210>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d027      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a28      	ldr	r2, [pc, #160]	; (80023f4 <HAL_DMA_Start_IT+0x214>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d022      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_DMA_Start_IT+0x218>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01d      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_DMA_Start_IT+0x21c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d018      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a24      	ldr	r2, [pc, #144]	; (8002400 <HAL_DMA_Start_IT+0x220>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <HAL_DMA_Start_IT+0x224>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00e      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a21      	ldr	r2, [pc, #132]	; (8002408 <HAL_DMA_Start_IT+0x228>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_DMA_Start_IT+0x22c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Start_IT+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_DMA_Start_IT+0x230>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Start_IT+0x1c0>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_DMA_Start_IT+0x1c2>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d036      	beq.n	8002414 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 021e 	bic.w	r2, r3, #30
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0216 	orr.w	r2, r2, #22
 80023b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d03e      	beq.n	8002440 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0208 	orr.w	r2, r2, #8
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e035      	b.n	8002440 <HAL_DMA_Start_IT+0x260>
 80023d4:	40020010 	.word	0x40020010
 80023d8:	40020028 	.word	0x40020028
 80023dc:	40020040 	.word	0x40020040
 80023e0:	40020058 	.word	0x40020058
 80023e4:	40020070 	.word	0x40020070
 80023e8:	40020088 	.word	0x40020088
 80023ec:	400200a0 	.word	0x400200a0
 80023f0:	400200b8 	.word	0x400200b8
 80023f4:	40020410 	.word	0x40020410
 80023f8:	40020428 	.word	0x40020428
 80023fc:	40020440 	.word	0x40020440
 8002400:	40020458 	.word	0x40020458
 8002404:	40020470 	.word	0x40020470
 8002408:	40020488 	.word	0x40020488
 800240c:	400204a0 	.word	0x400204a0
 8002410:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 020e 	bic.w	r2, r3, #14
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 020a 	orr.w	r2, r2, #10
 8002426:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0204 	orr.w	r2, r2, #4
 800243e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a83      	ldr	r2, [pc, #524]	; (8002654 <HAL_DMA_Start_IT+0x474>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d072      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a82      	ldr	r2, [pc, #520]	; (8002658 <HAL_DMA_Start_IT+0x478>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d06d      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a80      	ldr	r2, [pc, #512]	; (800265c <HAL_DMA_Start_IT+0x47c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d068      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a7f      	ldr	r2, [pc, #508]	; (8002660 <HAL_DMA_Start_IT+0x480>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d063      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a7d      	ldr	r2, [pc, #500]	; (8002664 <HAL_DMA_Start_IT+0x484>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d05e      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7c      	ldr	r2, [pc, #496]	; (8002668 <HAL_DMA_Start_IT+0x488>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d059      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a7a      	ldr	r2, [pc, #488]	; (800266c <HAL_DMA_Start_IT+0x48c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d054      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a79      	ldr	r2, [pc, #484]	; (8002670 <HAL_DMA_Start_IT+0x490>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d04f      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a77      	ldr	r2, [pc, #476]	; (8002674 <HAL_DMA_Start_IT+0x494>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04a      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a76      	ldr	r2, [pc, #472]	; (8002678 <HAL_DMA_Start_IT+0x498>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d045      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a74      	ldr	r2, [pc, #464]	; (800267c <HAL_DMA_Start_IT+0x49c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d040      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a73      	ldr	r2, [pc, #460]	; (8002680 <HAL_DMA_Start_IT+0x4a0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d03b      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a71      	ldr	r2, [pc, #452]	; (8002684 <HAL_DMA_Start_IT+0x4a4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d036      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a70      	ldr	r2, [pc, #448]	; (8002688 <HAL_DMA_Start_IT+0x4a8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d031      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6e      	ldr	r2, [pc, #440]	; (800268c <HAL_DMA_Start_IT+0x4ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02c      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6d      	ldr	r2, [pc, #436]	; (8002690 <HAL_DMA_Start_IT+0x4b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d027      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6b      	ldr	r2, [pc, #428]	; (8002694 <HAL_DMA_Start_IT+0x4b4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6a      	ldr	r2, [pc, #424]	; (8002698 <HAL_DMA_Start_IT+0x4b8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d01d      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a68      	ldr	r2, [pc, #416]	; (800269c <HAL_DMA_Start_IT+0x4bc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a67      	ldr	r2, [pc, #412]	; (80026a0 <HAL_DMA_Start_IT+0x4c0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a65      	ldr	r2, [pc, #404]	; (80026a4 <HAL_DMA_Start_IT+0x4c4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a64      	ldr	r2, [pc, #400]	; (80026a8 <HAL_DMA_Start_IT+0x4c8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a62      	ldr	r2, [pc, #392]	; (80026ac <HAL_DMA_Start_IT+0x4cc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_DMA_Start_IT+0x350>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a61      	ldr	r2, [pc, #388]	; (80026b0 <HAL_DMA_Start_IT+0x4d0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Start_IT+0x354>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_DMA_Start_IT+0x356>
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d01a      	beq.n	8002570 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002556:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800256a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800256e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a37      	ldr	r2, [pc, #220]	; (8002654 <HAL_DMA_Start_IT+0x474>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d04a      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a36      	ldr	r2, [pc, #216]	; (8002658 <HAL_DMA_Start_IT+0x478>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d045      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a34      	ldr	r2, [pc, #208]	; (800265c <HAL_DMA_Start_IT+0x47c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d040      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a33      	ldr	r2, [pc, #204]	; (8002660 <HAL_DMA_Start_IT+0x480>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d03b      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a31      	ldr	r2, [pc, #196]	; (8002664 <HAL_DMA_Start_IT+0x484>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d036      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a30      	ldr	r2, [pc, #192]	; (8002668 <HAL_DMA_Start_IT+0x488>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d031      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2e      	ldr	r2, [pc, #184]	; (800266c <HAL_DMA_Start_IT+0x48c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02c      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <HAL_DMA_Start_IT+0x490>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d027      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <HAL_DMA_Start_IT+0x494>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d022      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2a      	ldr	r2, [pc, #168]	; (8002678 <HAL_DMA_Start_IT+0x498>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01d      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_DMA_Start_IT+0x49c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d018      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a27      	ldr	r2, [pc, #156]	; (8002680 <HAL_DMA_Start_IT+0x4a0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a25      	ldr	r2, [pc, #148]	; (8002684 <HAL_DMA_Start_IT+0x4a4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <HAL_DMA_Start_IT+0x4a8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_DMA_Start_IT+0x4ac>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_DMA_Start_IT+0x430>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a21      	ldr	r2, [pc, #132]	; (8002690 <HAL_DMA_Start_IT+0x4b0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <HAL_DMA_Start_IT+0x442>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e012      	b.n	8002648 <HAL_DMA_Start_IT+0x468>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e009      	b.n	8002648 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800263a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002648:	7dfb      	ldrb	r3, [r7, #23]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40020010 	.word	0x40020010
 8002658:	40020028 	.word	0x40020028
 800265c:	40020040 	.word	0x40020040
 8002660:	40020058 	.word	0x40020058
 8002664:	40020070 	.word	0x40020070
 8002668:	40020088 	.word	0x40020088
 800266c:	400200a0 	.word	0x400200a0
 8002670:	400200b8 	.word	0x400200b8
 8002674:	40020410 	.word	0x40020410
 8002678:	40020428 	.word	0x40020428
 800267c:	40020440 	.word	0x40020440
 8002680:	40020458 	.word	0x40020458
 8002684:	40020470 	.word	0x40020470
 8002688:	40020488 	.word	0x40020488
 800268c:	400204a0 	.word	0x400204a0
 8002690:	400204b8 	.word	0x400204b8
 8002694:	58025408 	.word	0x58025408
 8002698:	5802541c 	.word	0x5802541c
 800269c:	58025430 	.word	0x58025430
 80026a0:	58025444 	.word	0x58025444
 80026a4:	58025458 	.word	0x58025458
 80026a8:	5802546c 	.word	0x5802546c
 80026ac:	58025480 	.word	0x58025480
 80026b0:	58025494 	.word	0x58025494

080026b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff f84c 	bl	8001758 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e2dc      	b.n	8002c86 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d008      	beq.n	80026ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e2cd      	b.n	8002c86 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a76      	ldr	r2, [pc, #472]	; (80028c8 <HAL_DMA_Abort+0x214>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d04a      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a74      	ldr	r2, [pc, #464]	; (80028cc <HAL_DMA_Abort+0x218>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d045      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a73      	ldr	r2, [pc, #460]	; (80028d0 <HAL_DMA_Abort+0x21c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d040      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a71      	ldr	r2, [pc, #452]	; (80028d4 <HAL_DMA_Abort+0x220>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d03b      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a70      	ldr	r2, [pc, #448]	; (80028d8 <HAL_DMA_Abort+0x224>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d036      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6e      	ldr	r2, [pc, #440]	; (80028dc <HAL_DMA_Abort+0x228>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d031      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6d      	ldr	r2, [pc, #436]	; (80028e0 <HAL_DMA_Abort+0x22c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d02c      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6b      	ldr	r2, [pc, #428]	; (80028e4 <HAL_DMA_Abort+0x230>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d027      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6a      	ldr	r2, [pc, #424]	; (80028e8 <HAL_DMA_Abort+0x234>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a68      	ldr	r2, [pc, #416]	; (80028ec <HAL_DMA_Abort+0x238>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01d      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a67      	ldr	r2, [pc, #412]	; (80028f0 <HAL_DMA_Abort+0x23c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d018      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a65      	ldr	r2, [pc, #404]	; (80028f4 <HAL_DMA_Abort+0x240>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a64      	ldr	r2, [pc, #400]	; (80028f8 <HAL_DMA_Abort+0x244>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00e      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a62      	ldr	r2, [pc, #392]	; (80028fc <HAL_DMA_Abort+0x248>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a61      	ldr	r2, [pc, #388]	; (8002900 <HAL_DMA_Abort+0x24c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5f      	ldr	r2, [pc, #380]	; (8002904 <HAL_DMA_Abort+0x250>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_DMA_Abort+0xda>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_DMA_Abort+0xdc>
 800278e:	2300      	movs	r3, #0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 021e 	bic.w	r2, r2, #30
 80027a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	e00a      	b.n	80027d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 020e 	bic.w	r2, r2, #14
 80027ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <HAL_DMA_Abort+0x214>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d072      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3a      	ldr	r2, [pc, #232]	; (80028cc <HAL_DMA_Abort+0x218>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d06d      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <HAL_DMA_Abort+0x21c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d068      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a37      	ldr	r2, [pc, #220]	; (80028d4 <HAL_DMA_Abort+0x220>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d063      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a36      	ldr	r2, [pc, #216]	; (80028d8 <HAL_DMA_Abort+0x224>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d05e      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a34      	ldr	r2, [pc, #208]	; (80028dc <HAL_DMA_Abort+0x228>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d059      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_DMA_Abort+0x22c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d054      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_DMA_Abort+0x230>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04f      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a30      	ldr	r2, [pc, #192]	; (80028e8 <HAL_DMA_Abort+0x234>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04a      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_DMA_Abort+0x238>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d045      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <HAL_DMA_Abort+0x23c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <HAL_DMA_Abort+0x240>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03b      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <HAL_DMA_Abort+0x244>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d036      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a28      	ldr	r2, [pc, #160]	; (80028fc <HAL_DMA_Abort+0x248>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_DMA_Abort+0x24c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d02c      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_DMA_Abort+0x250>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a24      	ldr	r2, [pc, #144]	; (8002908 <HAL_DMA_Abort+0x254>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_DMA_Abort+0x258>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	; (8002910 <HAL_DMA_Abort+0x25c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_DMA_Abort+0x260>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <HAL_DMA_Abort+0x264>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_DMA_Abort+0x268>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <HAL_DMA_Abort+0x26c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_DMA_Abort+0x270>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d132      	bne.n	8002928 <HAL_DMA_Abort+0x274>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e031      	b.n	800292a <HAL_DMA_Abort+0x276>
 80028c6:	bf00      	nop
 80028c8:	40020010 	.word	0x40020010
 80028cc:	40020028 	.word	0x40020028
 80028d0:	40020040 	.word	0x40020040
 80028d4:	40020058 	.word	0x40020058
 80028d8:	40020070 	.word	0x40020070
 80028dc:	40020088 	.word	0x40020088
 80028e0:	400200a0 	.word	0x400200a0
 80028e4:	400200b8 	.word	0x400200b8
 80028e8:	40020410 	.word	0x40020410
 80028ec:	40020428 	.word	0x40020428
 80028f0:	40020440 	.word	0x40020440
 80028f4:	40020458 	.word	0x40020458
 80028f8:	40020470 	.word	0x40020470
 80028fc:	40020488 	.word	0x40020488
 8002900:	400204a0 	.word	0x400204a0
 8002904:	400204b8 	.word	0x400204b8
 8002908:	58025408 	.word	0x58025408
 800290c:	5802541c 	.word	0x5802541c
 8002910:	58025430 	.word	0x58025430
 8002914:	58025444 	.word	0x58025444
 8002918:	58025458 	.word	0x58025458
 800291c:	5802546c 	.word	0x5802546c
 8002920:	58025480 	.word	0x58025480
 8002924:	58025494 	.word	0x58025494
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800293c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6d      	ldr	r2, [pc, #436]	; (8002af8 <HAL_DMA_Abort+0x444>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d04a      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6b      	ldr	r2, [pc, #428]	; (8002afc <HAL_DMA_Abort+0x448>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d045      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_DMA_Abort+0x44c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d040      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a68      	ldr	r2, [pc, #416]	; (8002b04 <HAL_DMA_Abort+0x450>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d03b      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <HAL_DMA_Abort+0x454>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d036      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <HAL_DMA_Abort+0x458>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a64      	ldr	r2, [pc, #400]	; (8002b10 <HAL_DMA_Abort+0x45c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d02c      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a62      	ldr	r2, [pc, #392]	; (8002b14 <HAL_DMA_Abort+0x460>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d027      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a61      	ldr	r2, [pc, #388]	; (8002b18 <HAL_DMA_Abort+0x464>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5f      	ldr	r2, [pc, #380]	; (8002b1c <HAL_DMA_Abort+0x468>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_DMA_Abort+0x46c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5c      	ldr	r2, [pc, #368]	; (8002b24 <HAL_DMA_Abort+0x470>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5b      	ldr	r2, [pc, #364]	; (8002b28 <HAL_DMA_Abort+0x474>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a59      	ldr	r2, [pc, #356]	; (8002b2c <HAL_DMA_Abort+0x478>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_DMA_Abort+0x47c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a56      	ldr	r2, [pc, #344]	; (8002b34 <HAL_DMA_Abort+0x480>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <HAL_DMA_Abort+0x33c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e007      	b.n	8002a00 <HAL_DMA_Abort+0x34c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a00:	e013      	b.n	8002a2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7fe fea9 	bl	8001758 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d90c      	bls.n	8002a2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e12d      	b.n	8002c86 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e5      	bne.n	8002a02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <HAL_DMA_Abort+0x444>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d04a      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <HAL_DMA_Abort+0x448>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d045      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <HAL_DMA_Abort+0x44c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d040      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2a      	ldr	r2, [pc, #168]	; (8002b04 <HAL_DMA_Abort+0x450>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d03b      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <HAL_DMA_Abort+0x454>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d036      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a27      	ldr	r2, [pc, #156]	; (8002b0c <HAL_DMA_Abort+0x458>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d031      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <HAL_DMA_Abort+0x45c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d02c      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <HAL_DMA_Abort+0x460>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d027      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_DMA_Abort+0x464>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <HAL_DMA_Abort+0x468>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01d      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_DMA_Abort+0x46c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <HAL_DMA_Abort+0x470>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_DMA_Abort+0x474>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <HAL_DMA_Abort+0x478>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_DMA_Abort+0x47c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_DMA_Abort+0x480>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Abort+0x426>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_DMA_Abort+0x428>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02b      	beq.n	8002b38 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	223f      	movs	r2, #63	; 0x3f
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	e02a      	b.n	8002b4e <HAL_DMA_Abort+0x49a>
 8002af8:	40020010 	.word	0x40020010
 8002afc:	40020028 	.word	0x40020028
 8002b00:	40020040 	.word	0x40020040
 8002b04:	40020058 	.word	0x40020058
 8002b08:	40020070 	.word	0x40020070
 8002b0c:	40020088 	.word	0x40020088
 8002b10:	400200a0 	.word	0x400200a0
 8002b14:	400200b8 	.word	0x400200b8
 8002b18:	40020410 	.word	0x40020410
 8002b1c:	40020428 	.word	0x40020428
 8002b20:	40020440 	.word	0x40020440
 8002b24:	40020458 	.word	0x40020458
 8002b28:	40020470 	.word	0x40020470
 8002b2c:	40020488 	.word	0x40020488
 8002b30:	400204a0 	.word	0x400204a0
 8002b34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2201      	movs	r2, #1
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a4f      	ldr	r2, [pc, #316]	; (8002c90 <HAL_DMA_Abort+0x5dc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d072      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	; (8002c94 <HAL_DMA_Abort+0x5e0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d06d      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <HAL_DMA_Abort+0x5e4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d068      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_DMA_Abort+0x5e8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d063      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <HAL_DMA_Abort+0x5ec>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d05e      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a47      	ldr	r2, [pc, #284]	; (8002ca4 <HAL_DMA_Abort+0x5f0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d059      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a46      	ldr	r2, [pc, #280]	; (8002ca8 <HAL_DMA_Abort+0x5f4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d054      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a44      	ldr	r2, [pc, #272]	; (8002cac <HAL_DMA_Abort+0x5f8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d04f      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <HAL_DMA_Abort+0x5fc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d04a      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_DMA_Abort+0x600>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d045      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <HAL_DMA_Abort+0x604>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d040      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a3e      	ldr	r2, [pc, #248]	; (8002cbc <HAL_DMA_Abort+0x608>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d03b      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a3d      	ldr	r2, [pc, #244]	; (8002cc0 <HAL_DMA_Abort+0x60c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d036      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_DMA_Abort+0x610>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d031      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <HAL_DMA_Abort+0x614>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d02c      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a38      	ldr	r2, [pc, #224]	; (8002ccc <HAL_DMA_Abort+0x618>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d027      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a37      	ldr	r2, [pc, #220]	; (8002cd0 <HAL_DMA_Abort+0x61c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d022      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a35      	ldr	r2, [pc, #212]	; (8002cd4 <HAL_DMA_Abort+0x620>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01d      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <HAL_DMA_Abort+0x624>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a32      	ldr	r2, [pc, #200]	; (8002cdc <HAL_DMA_Abort+0x628>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a31      	ldr	r2, [pc, #196]	; (8002ce0 <HAL_DMA_Abort+0x62c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2f      	ldr	r2, [pc, #188]	; (8002ce4 <HAL_DMA_Abort+0x630>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a2e      	ldr	r2, [pc, #184]	; (8002ce8 <HAL_DMA_Abort+0x634>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2c      	ldr	r2, [pc, #176]	; (8002cec <HAL_DMA_Abort+0x638>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Abort+0x58e>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_DMA_Abort+0x590>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d015      	beq.n	8002c74 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c50:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c68:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c72:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40020010 	.word	0x40020010
 8002c94:	40020028 	.word	0x40020028
 8002c98:	40020040 	.word	0x40020040
 8002c9c:	40020058 	.word	0x40020058
 8002ca0:	40020070 	.word	0x40020070
 8002ca4:	40020088 	.word	0x40020088
 8002ca8:	400200a0 	.word	0x400200a0
 8002cac:	400200b8 	.word	0x400200b8
 8002cb0:	40020410 	.word	0x40020410
 8002cb4:	40020428 	.word	0x40020428
 8002cb8:	40020440 	.word	0x40020440
 8002cbc:	40020458 	.word	0x40020458
 8002cc0:	40020470 	.word	0x40020470
 8002cc4:	40020488 	.word	0x40020488
 8002cc8:	400204a0 	.word	0x400204a0
 8002ccc:	400204b8 	.word	0x400204b8
 8002cd0:	58025408 	.word	0x58025408
 8002cd4:	5802541c 	.word	0x5802541c
 8002cd8:	58025430 	.word	0x58025430
 8002cdc:	58025444 	.word	0x58025444
 8002ce0:	58025458 	.word	0x58025458
 8002ce4:	5802546c 	.word	0x5802546c
 8002ce8:	58025480 	.word	0x58025480
 8002cec:	58025494 	.word	0x58025494

08002cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e237      	b.n	8003172 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d004      	beq.n	8002d18 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e22c      	b.n	8003172 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5c      	ldr	r2, [pc, #368]	; (8002e90 <HAL_DMA_Abort_IT+0x1a0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d04a      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5b      	ldr	r2, [pc, #364]	; (8002e94 <HAL_DMA_Abort_IT+0x1a4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d045      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a59      	ldr	r2, [pc, #356]	; (8002e98 <HAL_DMA_Abort_IT+0x1a8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d040      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_DMA_Abort_IT+0x1ac>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d03b      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a56      	ldr	r2, [pc, #344]	; (8002ea0 <HAL_DMA_Abort_IT+0x1b0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d036      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a55      	ldr	r2, [pc, #340]	; (8002ea4 <HAL_DMA_Abort_IT+0x1b4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d031      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a53      	ldr	r2, [pc, #332]	; (8002ea8 <HAL_DMA_Abort_IT+0x1b8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02c      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_DMA_Abort_IT+0x1bc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d027      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_DMA_Abort_IT+0x1c0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d022      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4f      	ldr	r2, [pc, #316]	; (8002eb4 <HAL_DMA_Abort_IT+0x1c4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d01d      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a4d      	ldr	r2, [pc, #308]	; (8002eb8 <HAL_DMA_Abort_IT+0x1c8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d018      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4c      	ldr	r2, [pc, #304]	; (8002ebc <HAL_DMA_Abort_IT+0x1cc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a4a      	ldr	r2, [pc, #296]	; (8002ec0 <HAL_DMA_Abort_IT+0x1d0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00e      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a49      	ldr	r2, [pc, #292]	; (8002ec4 <HAL_DMA_Abort_IT+0x1d4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d009      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a47      	ldr	r2, [pc, #284]	; (8002ec8 <HAL_DMA_Abort_IT+0x1d8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d004      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a46      	ldr	r2, [pc, #280]	; (8002ecc <HAL_DMA_Abort_IT+0x1dc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_DMA_Abort_IT+0xcc>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_DMA_Abort_IT+0xce>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8086 	beq.w	8002ed0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <HAL_DMA_Abort_IT+0x1a0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d04a      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <HAL_DMA_Abort_IT+0x1a4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d045      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <HAL_DMA_Abort_IT+0x1a8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d040      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <HAL_DMA_Abort_IT+0x1ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d03b      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <HAL_DMA_Abort_IT+0x1b0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d036      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_DMA_Abort_IT+0x1b4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d031      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <HAL_DMA_Abort_IT+0x1b8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d02c      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a25      	ldr	r2, [pc, #148]	; (8002eac <HAL_DMA_Abort_IT+0x1bc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d027      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <HAL_DMA_Abort_IT+0x1c0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_DMA_Abort_IT+0x1c4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d01d      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_DMA_Abort_IT+0x1c8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d018      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_DMA_Abort_IT+0x1cc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_DMA_Abort_IT+0x1d0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_DMA_Abort_IT+0x1d4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ec8 <HAL_DMA_Abort_IT+0x1d8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x17c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a19      	ldr	r2, [pc, #100]	; (8002ecc <HAL_DMA_Abort_IT+0x1dc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <HAL_DMA_Abort_IT+0x18e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e178      	b.n	8003170 <HAL_DMA_Abort_IT+0x480>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e16f      	b.n	8003170 <HAL_DMA_Abort_IT+0x480>
 8002e90:	40020010 	.word	0x40020010
 8002e94:	40020028 	.word	0x40020028
 8002e98:	40020040 	.word	0x40020040
 8002e9c:	40020058 	.word	0x40020058
 8002ea0:	40020070 	.word	0x40020070
 8002ea4:	40020088 	.word	0x40020088
 8002ea8:	400200a0 	.word	0x400200a0
 8002eac:	400200b8 	.word	0x400200b8
 8002eb0:	40020410 	.word	0x40020410
 8002eb4:	40020428 	.word	0x40020428
 8002eb8:	40020440 	.word	0x40020440
 8002ebc:	40020458 	.word	0x40020458
 8002ec0:	40020470 	.word	0x40020470
 8002ec4:	40020488 	.word	0x40020488
 8002ec8:	400204a0 	.word	0x400204a0
 8002ecc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020e 	bic.w	r2, r2, #14
 8002ede:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <HAL_DMA_Abort_IT+0x3a8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d04a      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6b      	ldr	r2, [pc, #428]	; (800309c <HAL_DMA_Abort_IT+0x3ac>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d045      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <HAL_DMA_Abort_IT+0x3b0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d040      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a68      	ldr	r2, [pc, #416]	; (80030a4 <HAL_DMA_Abort_IT+0x3b4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d03b      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <HAL_DMA_Abort_IT+0x3b8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d036      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_DMA_Abort_IT+0x3bc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d031      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a63      	ldr	r2, [pc, #396]	; (80030b0 <HAL_DMA_Abort_IT+0x3c0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02c      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a62      	ldr	r2, [pc, #392]	; (80030b4 <HAL_DMA_Abort_IT+0x3c4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d027      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a60      	ldr	r2, [pc, #384]	; (80030b8 <HAL_DMA_Abort_IT+0x3c8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d022      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <HAL_DMA_Abort_IT+0x3cc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d01d      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <HAL_DMA_Abort_IT+0x3d0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d018      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5c      	ldr	r2, [pc, #368]	; (80030c4 <HAL_DMA_Abort_IT+0x3d4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5a      	ldr	r2, [pc, #360]	; (80030c8 <HAL_DMA_Abort_IT+0x3d8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00e      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a59      	ldr	r2, [pc, #356]	; (80030cc <HAL_DMA_Abort_IT+0x3dc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_DMA_Abort_IT+0x3e0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x290>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_DMA_Abort_IT+0x3e4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d108      	bne.n	8002f92 <HAL_DMA_Abort_IT+0x2a2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e007      	b.n	8002fa2 <HAL_DMA_Abort_IT+0x2b2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <HAL_DMA_Abort_IT+0x3a8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d072      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a3a      	ldr	r2, [pc, #232]	; (800309c <HAL_DMA_Abort_IT+0x3ac>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d06d      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a39      	ldr	r2, [pc, #228]	; (80030a0 <HAL_DMA_Abort_IT+0x3b0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d068      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a37      	ldr	r2, [pc, #220]	; (80030a4 <HAL_DMA_Abort_IT+0x3b4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d063      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a36      	ldr	r2, [pc, #216]	; (80030a8 <HAL_DMA_Abort_IT+0x3b8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d05e      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a34      	ldr	r2, [pc, #208]	; (80030ac <HAL_DMA_Abort_IT+0x3bc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d059      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a33      	ldr	r2, [pc, #204]	; (80030b0 <HAL_DMA_Abort_IT+0x3c0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d054      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a31      	ldr	r2, [pc, #196]	; (80030b4 <HAL_DMA_Abort_IT+0x3c4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d04f      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a30      	ldr	r2, [pc, #192]	; (80030b8 <HAL_DMA_Abort_IT+0x3c8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04a      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2e      	ldr	r2, [pc, #184]	; (80030bc <HAL_DMA_Abort_IT+0x3cc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d045      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_DMA_Abort_IT+0x3d0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d040      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2b      	ldr	r2, [pc, #172]	; (80030c4 <HAL_DMA_Abort_IT+0x3d4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d03b      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <HAL_DMA_Abort_IT+0x3d8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d036      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a28      	ldr	r2, [pc, #160]	; (80030cc <HAL_DMA_Abort_IT+0x3dc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <HAL_DMA_Abort_IT+0x3e0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d02c      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a25      	ldr	r2, [pc, #148]	; (80030d4 <HAL_DMA_Abort_IT+0x3e4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <HAL_DMA_Abort_IT+0x3e8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a22      	ldr	r2, [pc, #136]	; (80030dc <HAL_DMA_Abort_IT+0x3ec>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01d      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a21      	ldr	r2, [pc, #132]	; (80030e0 <HAL_DMA_Abort_IT+0x3f0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_DMA_Abort_IT+0x3f4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_DMA_Abort_IT+0x3f8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_DMA_Abort_IT+0x3fc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_DMA_Abort_IT+0x400>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_Abort_IT+0x3a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_DMA_Abort_IT+0x404>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d132      	bne.n	80030f8 <HAL_DMA_Abort_IT+0x408>
 8003092:	2301      	movs	r3, #1
 8003094:	e031      	b.n	80030fa <HAL_DMA_Abort_IT+0x40a>
 8003096:	bf00      	nop
 8003098:	40020010 	.word	0x40020010
 800309c:	40020028 	.word	0x40020028
 80030a0:	40020040 	.word	0x40020040
 80030a4:	40020058 	.word	0x40020058
 80030a8:	40020070 	.word	0x40020070
 80030ac:	40020088 	.word	0x40020088
 80030b0:	400200a0 	.word	0x400200a0
 80030b4:	400200b8 	.word	0x400200b8
 80030b8:	40020410 	.word	0x40020410
 80030bc:	40020428 	.word	0x40020428
 80030c0:	40020440 	.word	0x40020440
 80030c4:	40020458 	.word	0x40020458
 80030c8:	40020470 	.word	0x40020470
 80030cc:	40020488 	.word	0x40020488
 80030d0:	400204a0 	.word	0x400204a0
 80030d4:	400204b8 	.word	0x400204b8
 80030d8:	58025408 	.word	0x58025408
 80030dc:	5802541c 	.word	0x5802541c
 80030e0:	58025430 	.word	0x58025430
 80030e4:	58025444 	.word	0x58025444
 80030e8:	58025458 	.word	0x58025458
 80030ec:	5802546c 	.word	0x5802546c
 80030f0:	58025480 	.word	0x58025480
 80030f4:	58025494 	.word	0x58025494
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d028      	beq.n	8003150 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800310c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2201      	movs	r2, #1
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800312c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800314e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop

0800317c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003188:	4b67      	ldr	r3, [pc, #412]	; (8003328 <HAL_DMA_IRQHandler+0x1ac>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_DMA_IRQHandler+0x1b0>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0a9b      	lsrs	r3, r3, #10
 8003194:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a5f      	ldr	r2, [pc, #380]	; (8003330 <HAL_DMA_IRQHandler+0x1b4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_DMA_IRQHandler+0x1b8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a5c      	ldr	r2, [pc, #368]	; (8003338 <HAL_DMA_IRQHandler+0x1bc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5a      	ldr	r2, [pc, #360]	; (800333c <HAL_DMA_IRQHandler+0x1c0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a59      	ldr	r2, [pc, #356]	; (8003340 <HAL_DMA_IRQHandler+0x1c4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a57      	ldr	r2, [pc, #348]	; (8003344 <HAL_DMA_IRQHandler+0x1c8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a56      	ldr	r2, [pc, #344]	; (8003348 <HAL_DMA_IRQHandler+0x1cc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a54      	ldr	r2, [pc, #336]	; (800334c <HAL_DMA_IRQHandler+0x1d0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a53      	ldr	r2, [pc, #332]	; (8003350 <HAL_DMA_IRQHandler+0x1d4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a51      	ldr	r2, [pc, #324]	; (8003354 <HAL_DMA_IRQHandler+0x1d8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a50      	ldr	r2, [pc, #320]	; (8003358 <HAL_DMA_IRQHandler+0x1dc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a4e      	ldr	r2, [pc, #312]	; (800335c <HAL_DMA_IRQHandler+0x1e0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <HAL_DMA_IRQHandler+0x1e4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <HAL_DMA_IRQHandler+0x1e8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a4a      	ldr	r2, [pc, #296]	; (8003368 <HAL_DMA_IRQHandler+0x1ec>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_IRQHandler+0xd2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a48      	ldr	r2, [pc, #288]	; (800336c <HAL_DMA_IRQHandler+0x1f0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_DMA_IRQHandler+0xd6>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_DMA_IRQHandler+0xd8>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 842b 	beq.w	8003ab0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2208      	movs	r2, #8
 8003264:	409a      	lsls	r2, r3
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a2 	beq.w	80033b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2e      	ldr	r2, [pc, #184]	; (8003330 <HAL_DMA_IRQHandler+0x1b4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d04a      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <HAL_DMA_IRQHandler+0x1b8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d045      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <HAL_DMA_IRQHandler+0x1bc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d040      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2a      	ldr	r2, [pc, #168]	; (800333c <HAL_DMA_IRQHandler+0x1c0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d03b      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a28      	ldr	r2, [pc, #160]	; (8003340 <HAL_DMA_IRQHandler+0x1c4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d036      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a27      	ldr	r2, [pc, #156]	; (8003344 <HAL_DMA_IRQHandler+0x1c8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d031      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a25      	ldr	r2, [pc, #148]	; (8003348 <HAL_DMA_IRQHandler+0x1cc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02c      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a24      	ldr	r2, [pc, #144]	; (800334c <HAL_DMA_IRQHandler+0x1d0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d027      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a22      	ldr	r2, [pc, #136]	; (8003350 <HAL_DMA_IRQHandler+0x1d4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d022      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <HAL_DMA_IRQHandler+0x1d8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d01d      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_DMA_IRQHandler+0x1dc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d018      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1e      	ldr	r2, [pc, #120]	; (800335c <HAL_DMA_IRQHandler+0x1e0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <HAL_DMA_IRQHandler+0x1e4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00e      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_DMA_IRQHandler+0x1e8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a19      	ldr	r2, [pc, #100]	; (8003368 <HAL_DMA_IRQHandler+0x1ec>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_DMA_IRQHandler+0x194>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_DMA_IRQHandler+0x1f0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d12f      	bne.n	8003370 <HAL_DMA_IRQHandler+0x1f4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e02e      	b.n	8003384 <HAL_DMA_IRQHandler+0x208>
 8003326:	bf00      	nop
 8003328:	24000004 	.word	0x24000004
 800332c:	1b4e81b5 	.word	0x1b4e81b5
 8003330:	40020010 	.word	0x40020010
 8003334:	40020028 	.word	0x40020028
 8003338:	40020040 	.word	0x40020040
 800333c:	40020058 	.word	0x40020058
 8003340:	40020070 	.word	0x40020070
 8003344:	40020088 	.word	0x40020088
 8003348:	400200a0 	.word	0x400200a0
 800334c:	400200b8 	.word	0x400200b8
 8003350:	40020410 	.word	0x40020410
 8003354:	40020428 	.word	0x40020428
 8003358:	40020440 	.word	0x40020440
 800335c:	40020458 	.word	0x40020458
 8003360:	40020470 	.word	0x40020470
 8003364:	40020488 	.word	0x40020488
 8003368:	400204a0 	.word	0x400204a0
 800336c:	400204b8 	.word	0x400204b8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0204 	bic.w	r2, r2, #4
 8003396:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2208      	movs	r2, #8
 80033a2:	409a      	lsls	r2, r3
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d06e      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a69      	ldr	r2, [pc, #420]	; (8003574 <HAL_DMA_IRQHandler+0x3f8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04a      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a67      	ldr	r2, [pc, #412]	; (8003578 <HAL_DMA_IRQHandler+0x3fc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d045      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a66      	ldr	r2, [pc, #408]	; (800357c <HAL_DMA_IRQHandler+0x400>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d040      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a64      	ldr	r2, [pc, #400]	; (8003580 <HAL_DMA_IRQHandler+0x404>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d03b      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a63      	ldr	r2, [pc, #396]	; (8003584 <HAL_DMA_IRQHandler+0x408>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d036      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a61      	ldr	r2, [pc, #388]	; (8003588 <HAL_DMA_IRQHandler+0x40c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a60      	ldr	r2, [pc, #384]	; (800358c <HAL_DMA_IRQHandler+0x410>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d02c      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5e      	ldr	r2, [pc, #376]	; (8003590 <HAL_DMA_IRQHandler+0x414>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d027      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_DMA_IRQHandler+0x418>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d022      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5b      	ldr	r2, [pc, #364]	; (8003598 <HAL_DMA_IRQHandler+0x41c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01d      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_DMA_IRQHandler+0x420>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d018      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a58      	ldr	r2, [pc, #352]	; (80035a0 <HAL_DMA_IRQHandler+0x424>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_DMA_IRQHandler+0x428>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a55      	ldr	r2, [pc, #340]	; (80035a8 <HAL_DMA_IRQHandler+0x42c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a54      	ldr	r2, [pc, #336]	; (80035ac <HAL_DMA_IRQHandler+0x430>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_DMA_IRQHandler+0x2ee>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_DMA_IRQHandler+0x434>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10a      	bne.n	8003480 <HAL_DMA_IRQHandler+0x304>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e003      	b.n	8003488 <HAL_DMA_IRQHandler+0x30c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2201      	movs	r2, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f043 0202 	orr.w	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2204      	movs	r2, #4
 80034b2:	409a      	lsls	r2, r3
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 808f 	beq.w	80035dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2c      	ldr	r2, [pc, #176]	; (8003574 <HAL_DMA_IRQHandler+0x3f8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d04a      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <HAL_DMA_IRQHandler+0x3fc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d045      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <HAL_DMA_IRQHandler+0x400>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d040      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <HAL_DMA_IRQHandler+0x404>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d03b      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a26      	ldr	r2, [pc, #152]	; (8003584 <HAL_DMA_IRQHandler+0x408>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d036      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a24      	ldr	r2, [pc, #144]	; (8003588 <HAL_DMA_IRQHandler+0x40c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d031      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a23      	ldr	r2, [pc, #140]	; (800358c <HAL_DMA_IRQHandler+0x410>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d02c      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a21      	ldr	r2, [pc, #132]	; (8003590 <HAL_DMA_IRQHandler+0x414>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d027      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a20      	ldr	r2, [pc, #128]	; (8003594 <HAL_DMA_IRQHandler+0x418>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d022      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1e      	ldr	r2, [pc, #120]	; (8003598 <HAL_DMA_IRQHandler+0x41c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01d      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_DMA_IRQHandler+0x420>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d018      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_DMA_IRQHandler+0x424>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <HAL_DMA_IRQHandler+0x428>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00e      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <HAL_DMA_IRQHandler+0x42c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a17      	ldr	r2, [pc, #92]	; (80035ac <HAL_DMA_IRQHandler+0x430>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_DMA_IRQHandler+0x3e2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <HAL_DMA_IRQHandler+0x434>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d12a      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x438>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e023      	b.n	80035bc <HAL_DMA_IRQHandler+0x440>
 8003574:	40020010 	.word	0x40020010
 8003578:	40020028 	.word	0x40020028
 800357c:	40020040 	.word	0x40020040
 8003580:	40020058 	.word	0x40020058
 8003584:	40020070 	.word	0x40020070
 8003588:	40020088 	.word	0x40020088
 800358c:	400200a0 	.word	0x400200a0
 8003590:	400200b8 	.word	0x400200b8
 8003594:	40020410 	.word	0x40020410
 8003598:	40020428 	.word	0x40020428
 800359c:	40020440 	.word	0x40020440
 80035a0:	40020458 	.word	0x40020458
 80035a4:	40020470 	.word	0x40020470
 80035a8:	40020488 	.word	0x40020488
 80035ac:	400204a0 	.word	0x400204a0
 80035b0:	400204b8 	.word	0x400204b8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2204      	movs	r2, #4
 80035ca:	409a      	lsls	r2, r3
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f043 0204 	orr.w	r2, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2210      	movs	r2, #16
 80035e6:	409a      	lsls	r2, r3
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80a6 	beq.w	800373e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a85      	ldr	r2, [pc, #532]	; (800380c <HAL_DMA_IRQHandler+0x690>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04a      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a83      	ldr	r2, [pc, #524]	; (8003810 <HAL_DMA_IRQHandler+0x694>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d045      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a82      	ldr	r2, [pc, #520]	; (8003814 <HAL_DMA_IRQHandler+0x698>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d040      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a80      	ldr	r2, [pc, #512]	; (8003818 <HAL_DMA_IRQHandler+0x69c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d03b      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7f      	ldr	r2, [pc, #508]	; (800381c <HAL_DMA_IRQHandler+0x6a0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d036      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a7d      	ldr	r2, [pc, #500]	; (8003820 <HAL_DMA_IRQHandler+0x6a4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7c      	ldr	r2, [pc, #496]	; (8003824 <HAL_DMA_IRQHandler+0x6a8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d02c      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a7a      	ldr	r2, [pc, #488]	; (8003828 <HAL_DMA_IRQHandler+0x6ac>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d027      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a79      	ldr	r2, [pc, #484]	; (800382c <HAL_DMA_IRQHandler+0x6b0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a77      	ldr	r2, [pc, #476]	; (8003830 <HAL_DMA_IRQHandler+0x6b4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01d      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a76      	ldr	r2, [pc, #472]	; (8003834 <HAL_DMA_IRQHandler+0x6b8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a74      	ldr	r2, [pc, #464]	; (8003838 <HAL_DMA_IRQHandler+0x6bc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a73      	ldr	r2, [pc, #460]	; (800383c <HAL_DMA_IRQHandler+0x6c0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a71      	ldr	r2, [pc, #452]	; (8003840 <HAL_DMA_IRQHandler+0x6c4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a70      	ldr	r2, [pc, #448]	; (8003844 <HAL_DMA_IRQHandler+0x6c8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_DMA_IRQHandler+0x516>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a6e      	ldr	r2, [pc, #440]	; (8003848 <HAL_DMA_IRQHandler+0x6cc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10a      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x52c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e009      	b.n	80036bc <HAL_DMA_IRQHandler+0x540>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf14      	ite	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	2300      	moveq	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d03e      	beq.n	800373e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2210      	movs	r2, #16
 80036ca:	409a      	lsls	r2, r3
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d018      	beq.n	8003710 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d108      	bne.n	80036fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d024      	beq.n	800373e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e01f      	b.n	800373e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01b      	beq.n	800373e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e016      	b.n	800373e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d107      	bne.n	800372e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0208 	bic.w	r2, r2, #8
 800372c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2220      	movs	r2, #32
 8003748:	409a      	lsls	r2, r3
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8110 	beq.w	8003974 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2c      	ldr	r2, [pc, #176]	; (800380c <HAL_DMA_IRQHandler+0x690>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d04a      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <HAL_DMA_IRQHandler+0x694>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d045      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <HAL_DMA_IRQHandler+0x698>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d040      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a28      	ldr	r2, [pc, #160]	; (8003818 <HAL_DMA_IRQHandler+0x69c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d03b      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <HAL_DMA_IRQHandler+0x6a0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d036      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <HAL_DMA_IRQHandler+0x6a4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d031      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a23      	ldr	r2, [pc, #140]	; (8003824 <HAL_DMA_IRQHandler+0x6a8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d02c      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_DMA_IRQHandler+0x6ac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d027      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a20      	ldr	r2, [pc, #128]	; (800382c <HAL_DMA_IRQHandler+0x6b0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d022      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_DMA_IRQHandler+0x6b4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d01d      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <HAL_DMA_IRQHandler+0x6b8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_DMA_IRQHandler+0x6bc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_DMA_IRQHandler+0x6c0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_DMA_IRQHandler+0x6c4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d009      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a17      	ldr	r2, [pc, #92]	; (8003844 <HAL_DMA_IRQHandler+0x6c8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x678>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_DMA_IRQHandler+0x6cc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d12b      	bne.n	800384c <HAL_DMA_IRQHandler+0x6d0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e02a      	b.n	8003860 <HAL_DMA_IRQHandler+0x6e4>
 800380a:	bf00      	nop
 800380c:	40020010 	.word	0x40020010
 8003810:	40020028 	.word	0x40020028
 8003814:	40020040 	.word	0x40020040
 8003818:	40020058 	.word	0x40020058
 800381c:	40020070 	.word	0x40020070
 8003820:	40020088 	.word	0x40020088
 8003824:	400200a0 	.word	0x400200a0
 8003828:	400200b8 	.word	0x400200b8
 800382c:	40020410 	.word	0x40020410
 8003830:	40020428 	.word	0x40020428
 8003834:	40020440 	.word	0x40020440
 8003838:	40020458 	.word	0x40020458
 800383c:	40020470 	.word	0x40020470
 8003840:	40020488 	.word	0x40020488
 8003844:	400204a0 	.word	0x400204a0
 8003848:	400204b8 	.word	0x400204b8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8087 	beq.w	8003974 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	2220      	movs	r2, #32
 8003870:	409a      	lsls	r2, r3
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b04      	cmp	r3, #4
 8003880:	d139      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0216 	bic.w	r2, r2, #22
 8003890:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <HAL_DMA_IRQHandler+0x736>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0208 	bic.w	r2, r2, #8
 80038c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	223f      	movs	r2, #63	; 0x3f
 80038cc:	409a      	lsls	r2, r3
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 834a 	beq.w	8003f80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
          }
          return;
 80038f4:	e344      	b.n	8003f80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d018      	beq.n	8003936 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	2b00      	cmp	r3, #0
 8003918:	d02c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
 8003922:	e027      	b.n	8003974 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d023      	beq.n	8003974 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
 8003934:	e01e      	b.n	8003974 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0210 	bic.w	r2, r2, #16
 8003952:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8306 	beq.w	8003f8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8088 	beq.w	8003a9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2204      	movs	r2, #4
 8003990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a7a      	ldr	r2, [pc, #488]	; (8003b84 <HAL_DMA_IRQHandler+0xa08>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d04a      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a79      	ldr	r2, [pc, #484]	; (8003b88 <HAL_DMA_IRQHandler+0xa0c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d045      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a77      	ldr	r2, [pc, #476]	; (8003b8c <HAL_DMA_IRQHandler+0xa10>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d040      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a76      	ldr	r2, [pc, #472]	; (8003b90 <HAL_DMA_IRQHandler+0xa14>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d03b      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a74      	ldr	r2, [pc, #464]	; (8003b94 <HAL_DMA_IRQHandler+0xa18>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d036      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a73      	ldr	r2, [pc, #460]	; (8003b98 <HAL_DMA_IRQHandler+0xa1c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d031      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a71      	ldr	r2, [pc, #452]	; (8003b9c <HAL_DMA_IRQHandler+0xa20>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02c      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a70      	ldr	r2, [pc, #448]	; (8003ba0 <HAL_DMA_IRQHandler+0xa24>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d027      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6e      	ldr	r2, [pc, #440]	; (8003ba4 <HAL_DMA_IRQHandler+0xa28>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d022      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6d      	ldr	r2, [pc, #436]	; (8003ba8 <HAL_DMA_IRQHandler+0xa2c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d01d      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a6b      	ldr	r2, [pc, #428]	; (8003bac <HAL_DMA_IRQHandler+0xa30>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d018      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6a      	ldr	r2, [pc, #424]	; (8003bb0 <HAL_DMA_IRQHandler+0xa34>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a68      	ldr	r2, [pc, #416]	; (8003bb4 <HAL_DMA_IRQHandler+0xa38>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a67      	ldr	r2, [pc, #412]	; (8003bb8 <HAL_DMA_IRQHandler+0xa3c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <HAL_DMA_IRQHandler+0xa40>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x8b8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a64      	ldr	r2, [pc, #400]	; (8003bc0 <HAL_DMA_IRQHandler+0xa44>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x8ca>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e007      	b.n	8003a56 <HAL_DMA_IRQHandler+0x8da>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d307      	bcc.n	8003a72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f2      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x8da>
 8003a70:	e000      	b.n	8003a74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2203      	movs	r2, #3
 8003a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a8a:	e003      	b.n	8003a94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8272 	beq.w	8003f8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e26c      	b.n	8003f8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_DMA_IRQHandler+0xa48>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d022      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x984>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a42      	ldr	r2, [pc, #264]	; (8003bc8 <HAL_DMA_IRQHandler+0xa4c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d01d      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x984>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a40      	ldr	r2, [pc, #256]	; (8003bcc <HAL_DMA_IRQHandler+0xa50>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d018      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x984>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3f      	ldr	r2, [pc, #252]	; (8003bd0 <HAL_DMA_IRQHandler+0xa54>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x984>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3d      	ldr	r2, [pc, #244]	; (8003bd4 <HAL_DMA_IRQHandler+0xa58>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x984>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3c      	ldr	r2, [pc, #240]	; (8003bd8 <HAL_DMA_IRQHandler+0xa5c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x984>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3a      	ldr	r2, [pc, #232]	; (8003bdc <HAL_DMA_IRQHandler+0xa60>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x984>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a39      	ldr	r2, [pc, #228]	; (8003be0 <HAL_DMA_IRQHandler+0xa64>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d101      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x988>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_DMA_IRQHandler+0x98a>
 8003b04:	2300      	movs	r3, #0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 823f 	beq.w	8003f8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80cd 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0xb48>
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80c7 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2204      	movs	r2, #4
 8003b40:	409a      	lsls	r2, r3
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d049      	beq.n	8003be4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8210 	beq.w	8003f84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b6c:	e20a      	b.n	8003f84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8206 	beq.w	8003f84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b80:	e200      	b.n	8003f84 <HAL_DMA_IRQHandler+0xe08>
 8003b82:	bf00      	nop
 8003b84:	40020010 	.word	0x40020010
 8003b88:	40020028 	.word	0x40020028
 8003b8c:	40020040 	.word	0x40020040
 8003b90:	40020058 	.word	0x40020058
 8003b94:	40020070 	.word	0x40020070
 8003b98:	40020088 	.word	0x40020088
 8003b9c:	400200a0 	.word	0x400200a0
 8003ba0:	400200b8 	.word	0x400200b8
 8003ba4:	40020410 	.word	0x40020410
 8003ba8:	40020428 	.word	0x40020428
 8003bac:	40020440 	.word	0x40020440
 8003bb0:	40020458 	.word	0x40020458
 8003bb4:	40020470 	.word	0x40020470
 8003bb8:	40020488 	.word	0x40020488
 8003bbc:	400204a0 	.word	0x400204a0
 8003bc0:	400204b8 	.word	0x400204b8
 8003bc4:	58025408 	.word	0x58025408
 8003bc8:	5802541c 	.word	0x5802541c
 8003bcc:	58025430 	.word	0x58025430
 8003bd0:	58025444 	.word	0x58025444
 8003bd4:	58025458 	.word	0x58025458
 8003bd8:	5802546c 	.word	0x5802546c
 8003bdc:	58025480 	.word	0x58025480
 8003be0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d160      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7f      	ldr	r2, [pc, #508]	; (8003df0 <HAL_DMA_IRQHandler+0xc74>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d04a      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a7d      	ldr	r2, [pc, #500]	; (8003df4 <HAL_DMA_IRQHandler+0xc78>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d045      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7c      	ldr	r2, [pc, #496]	; (8003df8 <HAL_DMA_IRQHandler+0xc7c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d040      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7a      	ldr	r2, [pc, #488]	; (8003dfc <HAL_DMA_IRQHandler+0xc80>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d03b      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a79      	ldr	r2, [pc, #484]	; (8003e00 <HAL_DMA_IRQHandler+0xc84>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d036      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a77      	ldr	r2, [pc, #476]	; (8003e04 <HAL_DMA_IRQHandler+0xc88>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a76      	ldr	r2, [pc, #472]	; (8003e08 <HAL_DMA_IRQHandler+0xc8c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02c      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a74      	ldr	r2, [pc, #464]	; (8003e0c <HAL_DMA_IRQHandler+0xc90>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d027      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a73      	ldr	r2, [pc, #460]	; (8003e10 <HAL_DMA_IRQHandler+0xc94>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a71      	ldr	r2, [pc, #452]	; (8003e14 <HAL_DMA_IRQHandler+0xc98>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a70      	ldr	r2, [pc, #448]	; (8003e18 <HAL_DMA_IRQHandler+0xc9c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6e      	ldr	r2, [pc, #440]	; (8003e1c <HAL_DMA_IRQHandler+0xca0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6d      	ldr	r2, [pc, #436]	; (8003e20 <HAL_DMA_IRQHandler+0xca4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6b      	ldr	r2, [pc, #428]	; (8003e24 <HAL_DMA_IRQHandler+0xca8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a6a      	ldr	r2, [pc, #424]	; (8003e28 <HAL_DMA_IRQHandler+0xcac>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xb12>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a68      	ldr	r2, [pc, #416]	; (8003e2c <HAL_DMA_IRQHandler+0xcb0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d108      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0xb24>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0208 	bic.w	r2, r2, #8
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e007      	b.n	8003cb0 <HAL_DMA_IRQHandler+0xb34>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8165 	beq.w	8003f84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc2:	e15f      	b.n	8003f84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2202      	movs	r2, #2
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80c5 	beq.w	8003e64 <HAL_DMA_IRQHandler+0xce8>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80bf 	beq.w	8003e64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	2202      	movs	r2, #2
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 813a 	beq.w	8003f88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d1c:	e134      	b.n	8003f88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8130 	beq.w	8003f88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d30:	e12a      	b.n	8003f88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 8089 	bne.w	8003e50 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2b      	ldr	r2, [pc, #172]	; (8003df0 <HAL_DMA_IRQHandler+0xc74>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04a      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <HAL_DMA_IRQHandler+0xc78>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d045      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <HAL_DMA_IRQHandler+0xc7c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d040      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <HAL_DMA_IRQHandler+0xc80>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d03b      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_DMA_IRQHandler+0xc84>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d036      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <HAL_DMA_IRQHandler+0xc88>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d031      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_DMA_IRQHandler+0xc8c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d02c      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <HAL_DMA_IRQHandler+0xc90>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d027      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_DMA_IRQHandler+0xc94>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_DMA_IRQHandler+0xc98>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01d      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_DMA_IRQHandler+0xc9c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_DMA_IRQHandler+0xca0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_DMA_IRQHandler+0xca4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <HAL_DMA_IRQHandler+0xca8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <HAL_DMA_IRQHandler+0xcac>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_DMA_IRQHandler+0xc62>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <HAL_DMA_IRQHandler+0xcb0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d128      	bne.n	8003e30 <HAL_DMA_IRQHandler+0xcb4>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0214 	bic.w	r2, r2, #20
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e027      	b.n	8003e40 <HAL_DMA_IRQHandler+0xcc4>
 8003df0:	40020010 	.word	0x40020010
 8003df4:	40020028 	.word	0x40020028
 8003df8:	40020040 	.word	0x40020040
 8003dfc:	40020058 	.word	0x40020058
 8003e00:	40020070 	.word	0x40020070
 8003e04:	40020088 	.word	0x40020088
 8003e08:	400200a0 	.word	0x400200a0
 8003e0c:	400200b8 	.word	0x400200b8
 8003e10:	40020410 	.word	0x40020410
 8003e14:	40020428 	.word	0x40020428
 8003e18:	40020440 	.word	0x40020440
 8003e1c:	40020458 	.word	0x40020458
 8003e20:	40020470 	.word	0x40020470
 8003e24:	40020488 	.word	0x40020488
 8003e28:	400204a0 	.word	0x400204a0
 8003e2c:	400204b8 	.word	0x400204b8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 020a 	bic.w	r2, r2, #10
 8003e3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8097 	beq.w	8003f88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e62:	e091      	b.n	8003f88 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8088 	beq.w	8003f8a <HAL_DMA_IRQHandler+0xe0e>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8082 	beq.w	8003f8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a41      	ldr	r2, [pc, #260]	; (8003f90 <HAL_DMA_IRQHandler+0xe14>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d04a      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <HAL_DMA_IRQHandler+0xe18>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d045      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a3e      	ldr	r2, [pc, #248]	; (8003f98 <HAL_DMA_IRQHandler+0xe1c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d040      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <HAL_DMA_IRQHandler+0xe20>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d03b      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a3b      	ldr	r2, [pc, #236]	; (8003fa0 <HAL_DMA_IRQHandler+0xe24>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d036      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a39      	ldr	r2, [pc, #228]	; (8003fa4 <HAL_DMA_IRQHandler+0xe28>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d031      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a38      	ldr	r2, [pc, #224]	; (8003fa8 <HAL_DMA_IRQHandler+0xe2c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d02c      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a36      	ldr	r2, [pc, #216]	; (8003fac <HAL_DMA_IRQHandler+0xe30>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d027      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a35      	ldr	r2, [pc, #212]	; (8003fb0 <HAL_DMA_IRQHandler+0xe34>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d022      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a33      	ldr	r2, [pc, #204]	; (8003fb4 <HAL_DMA_IRQHandler+0xe38>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01d      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a32      	ldr	r2, [pc, #200]	; (8003fb8 <HAL_DMA_IRQHandler+0xe3c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d018      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a30      	ldr	r2, [pc, #192]	; (8003fbc <HAL_DMA_IRQHandler+0xe40>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <HAL_DMA_IRQHandler+0xe44>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	; (8003fc4 <HAL_DMA_IRQHandler+0xe48>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <HAL_DMA_IRQHandler+0xe4c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xdaa>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	; (8003fcc <HAL_DMA_IRQHandler+0xe50>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <HAL_DMA_IRQHandler+0xdbc>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 021c 	bic.w	r2, r2, #28
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e007      	b.n	8003f48 <HAL_DMA_IRQHandler+0xdcc>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 020e 	bic.w	r2, r2, #14
 8003f46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2201      	movs	r2, #1
 8003f52:	409a      	lsls	r2, r3
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
 8003f7e:	e004      	b.n	8003f8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f80:	bf00      	nop
 8003f82:	e002      	b.n	8003f8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40020010 	.word	0x40020010
 8003f94:	40020028 	.word	0x40020028
 8003f98:	40020040 	.word	0x40020040
 8003f9c:	40020058 	.word	0x40020058
 8003fa0:	40020070 	.word	0x40020070
 8003fa4:	40020088 	.word	0x40020088
 8003fa8:	400200a0 	.word	0x400200a0
 8003fac:	400200b8 	.word	0x400200b8
 8003fb0:	40020410 	.word	0x40020410
 8003fb4:	40020428 	.word	0x40020428
 8003fb8:	40020440 	.word	0x40020440
 8003fbc:	40020458 	.word	0x40020458
 8003fc0:	40020470 	.word	0x40020470
 8003fc4:	40020488 	.word	0x40020488
 8003fc8:	400204a0 	.word	0x400204a0
 8003fcc:	400204b8 	.word	0x400204b8

08003fd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7f      	ldr	r2, [pc, #508]	; (80041ec <DMA_SetConfig+0x21c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d072      	beq.n	80040da <DMA_SetConfig+0x10a>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7d      	ldr	r2, [pc, #500]	; (80041f0 <DMA_SetConfig+0x220>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d06d      	beq.n	80040da <DMA_SetConfig+0x10a>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7c      	ldr	r2, [pc, #496]	; (80041f4 <DMA_SetConfig+0x224>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d068      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7a      	ldr	r2, [pc, #488]	; (80041f8 <DMA_SetConfig+0x228>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d063      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a79      	ldr	r2, [pc, #484]	; (80041fc <DMA_SetConfig+0x22c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d05e      	beq.n	80040da <DMA_SetConfig+0x10a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a77      	ldr	r2, [pc, #476]	; (8004200 <DMA_SetConfig+0x230>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d059      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a76      	ldr	r2, [pc, #472]	; (8004204 <DMA_SetConfig+0x234>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d054      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a74      	ldr	r2, [pc, #464]	; (8004208 <DMA_SetConfig+0x238>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d04f      	beq.n	80040da <DMA_SetConfig+0x10a>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a73      	ldr	r2, [pc, #460]	; (800420c <DMA_SetConfig+0x23c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d04a      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a71      	ldr	r2, [pc, #452]	; (8004210 <DMA_SetConfig+0x240>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d045      	beq.n	80040da <DMA_SetConfig+0x10a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a70      	ldr	r2, [pc, #448]	; (8004214 <DMA_SetConfig+0x244>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d040      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6e      	ldr	r2, [pc, #440]	; (8004218 <DMA_SetConfig+0x248>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d03b      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6d      	ldr	r2, [pc, #436]	; (800421c <DMA_SetConfig+0x24c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d036      	beq.n	80040da <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6b      	ldr	r2, [pc, #428]	; (8004220 <DMA_SetConfig+0x250>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d031      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6a      	ldr	r2, [pc, #424]	; (8004224 <DMA_SetConfig+0x254>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d02c      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a68      	ldr	r2, [pc, #416]	; (8004228 <DMA_SetConfig+0x258>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d027      	beq.n	80040da <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a67      	ldr	r2, [pc, #412]	; (800422c <DMA_SetConfig+0x25c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a65      	ldr	r2, [pc, #404]	; (8004230 <DMA_SetConfig+0x260>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01d      	beq.n	80040da <DMA_SetConfig+0x10a>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a64      	ldr	r2, [pc, #400]	; (8004234 <DMA_SetConfig+0x264>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d018      	beq.n	80040da <DMA_SetConfig+0x10a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a62      	ldr	r2, [pc, #392]	; (8004238 <DMA_SetConfig+0x268>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <DMA_SetConfig+0x10a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a61      	ldr	r2, [pc, #388]	; (800423c <DMA_SetConfig+0x26c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <DMA_SetConfig+0x10a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a5f      	ldr	r2, [pc, #380]	; (8004240 <DMA_SetConfig+0x270>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <DMA_SetConfig+0x10a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a5e      	ldr	r2, [pc, #376]	; (8004244 <DMA_SetConfig+0x274>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a5c      	ldr	r2, [pc, #368]	; (8004248 <DMA_SetConfig+0x278>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <DMA_SetConfig+0x10e>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <DMA_SetConfig+0x110>
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a39      	ldr	r2, [pc, #228]	; (80041ec <DMA_SetConfig+0x21c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d04a      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a38      	ldr	r2, [pc, #224]	; (80041f0 <DMA_SetConfig+0x220>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d045      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a36      	ldr	r2, [pc, #216]	; (80041f4 <DMA_SetConfig+0x224>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d040      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a35      	ldr	r2, [pc, #212]	; (80041f8 <DMA_SetConfig+0x228>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d03b      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a33      	ldr	r2, [pc, #204]	; (80041fc <DMA_SetConfig+0x22c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d036      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a32      	ldr	r2, [pc, #200]	; (8004200 <DMA_SetConfig+0x230>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d031      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a30      	ldr	r2, [pc, #192]	; (8004204 <DMA_SetConfig+0x234>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d02c      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <DMA_SetConfig+0x238>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d027      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2d      	ldr	r2, [pc, #180]	; (800420c <DMA_SetConfig+0x23c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d022      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2c      	ldr	r2, [pc, #176]	; (8004210 <DMA_SetConfig+0x240>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d01d      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2a      	ldr	r2, [pc, #168]	; (8004214 <DMA_SetConfig+0x244>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d018      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a29      	ldr	r2, [pc, #164]	; (8004218 <DMA_SetConfig+0x248>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d013      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a27      	ldr	r2, [pc, #156]	; (800421c <DMA_SetConfig+0x24c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00e      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a26      	ldr	r2, [pc, #152]	; (8004220 <DMA_SetConfig+0x250>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d009      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a24      	ldr	r2, [pc, #144]	; (8004224 <DMA_SetConfig+0x254>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <DMA_SetConfig+0x1d0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a23      	ldr	r2, [pc, #140]	; (8004228 <DMA_SetConfig+0x258>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <DMA_SetConfig+0x1d4>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <DMA_SetConfig+0x1d6>
 80041a4:	2300      	movs	r3, #0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d059      	beq.n	800425e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	223f      	movs	r2, #63	; 0x3f
 80041b4:	409a      	lsls	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d138      	bne.n	800424c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041ea:	e086      	b.n	80042fa <DMA_SetConfig+0x32a>
 80041ec:	40020010 	.word	0x40020010
 80041f0:	40020028 	.word	0x40020028
 80041f4:	40020040 	.word	0x40020040
 80041f8:	40020058 	.word	0x40020058
 80041fc:	40020070 	.word	0x40020070
 8004200:	40020088 	.word	0x40020088
 8004204:	400200a0 	.word	0x400200a0
 8004208:	400200b8 	.word	0x400200b8
 800420c:	40020410 	.word	0x40020410
 8004210:	40020428 	.word	0x40020428
 8004214:	40020440 	.word	0x40020440
 8004218:	40020458 	.word	0x40020458
 800421c:	40020470 	.word	0x40020470
 8004220:	40020488 	.word	0x40020488
 8004224:	400204a0 	.word	0x400204a0
 8004228:	400204b8 	.word	0x400204b8
 800422c:	58025408 	.word	0x58025408
 8004230:	5802541c 	.word	0x5802541c
 8004234:	58025430 	.word	0x58025430
 8004238:	58025444 	.word	0x58025444
 800423c:	58025458 	.word	0x58025458
 8004240:	5802546c 	.word	0x5802546c
 8004244:	58025480 	.word	0x58025480
 8004248:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	60da      	str	r2, [r3, #12]
}
 800425c:	e04d      	b.n	80042fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a29      	ldr	r2, [pc, #164]	; (8004308 <DMA_SetConfig+0x338>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d022      	beq.n	80042ae <DMA_SetConfig+0x2de>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <DMA_SetConfig+0x33c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <DMA_SetConfig+0x2de>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a26      	ldr	r2, [pc, #152]	; (8004310 <DMA_SetConfig+0x340>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d018      	beq.n	80042ae <DMA_SetConfig+0x2de>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a24      	ldr	r2, [pc, #144]	; (8004314 <DMA_SetConfig+0x344>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <DMA_SetConfig+0x2de>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a23      	ldr	r2, [pc, #140]	; (8004318 <DMA_SetConfig+0x348>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <DMA_SetConfig+0x2de>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a21      	ldr	r2, [pc, #132]	; (800431c <DMA_SetConfig+0x34c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <DMA_SetConfig+0x2de>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a20      	ldr	r2, [pc, #128]	; (8004320 <DMA_SetConfig+0x350>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <DMA_SetConfig+0x2de>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <DMA_SetConfig+0x354>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <DMA_SetConfig+0x2e2>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <DMA_SetConfig+0x2e4>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d020      	beq.n	80042fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2201      	movs	r2, #1
 80042c2:	409a      	lsls	r2, r3
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d108      	bne.n	80042ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	60da      	str	r2, [r3, #12]
}
 80042e8:	e007      	b.n	80042fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	58025408 	.word	0x58025408
 800430c:	5802541c 	.word	0x5802541c
 8004310:	58025430 	.word	0x58025430
 8004314:	58025444 	.word	0x58025444
 8004318:	58025458 	.word	0x58025458
 800431c:	5802546c 	.word	0x5802546c
 8004320:	58025480 	.word	0x58025480
 8004324:	58025494 	.word	0x58025494

08004328 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a42      	ldr	r2, [pc, #264]	; (8004440 <DMA_CalcBaseAndBitshift+0x118>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d04a      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a41      	ldr	r2, [pc, #260]	; (8004444 <DMA_CalcBaseAndBitshift+0x11c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d045      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3f      	ldr	r2, [pc, #252]	; (8004448 <DMA_CalcBaseAndBitshift+0x120>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d040      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a3e      	ldr	r2, [pc, #248]	; (800444c <DMA_CalcBaseAndBitshift+0x124>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d03b      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3c      	ldr	r2, [pc, #240]	; (8004450 <DMA_CalcBaseAndBitshift+0x128>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d036      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a3b      	ldr	r2, [pc, #236]	; (8004454 <DMA_CalcBaseAndBitshift+0x12c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d031      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a39      	ldr	r2, [pc, #228]	; (8004458 <DMA_CalcBaseAndBitshift+0x130>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d02c      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a38      	ldr	r2, [pc, #224]	; (800445c <DMA_CalcBaseAndBitshift+0x134>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d027      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a36      	ldr	r2, [pc, #216]	; (8004460 <DMA_CalcBaseAndBitshift+0x138>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a35      	ldr	r2, [pc, #212]	; (8004464 <DMA_CalcBaseAndBitshift+0x13c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d01d      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a33      	ldr	r2, [pc, #204]	; (8004468 <DMA_CalcBaseAndBitshift+0x140>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a32      	ldr	r2, [pc, #200]	; (800446c <DMA_CalcBaseAndBitshift+0x144>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a30      	ldr	r2, [pc, #192]	; (8004470 <DMA_CalcBaseAndBitshift+0x148>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <DMA_CalcBaseAndBitshift+0x14c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2d      	ldr	r2, [pc, #180]	; (8004478 <DMA_CalcBaseAndBitshift+0x150>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xa8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2c      	ldr	r2, [pc, #176]	; (800447c <DMA_CalcBaseAndBitshift+0x154>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d101      	bne.n	80043d4 <DMA_CalcBaseAndBitshift+0xac>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <DMA_CalcBaseAndBitshift+0xae>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d024      	beq.n	8004424 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	3b10      	subs	r3, #16
 80043e2:	4a27      	ldr	r2, [pc, #156]	; (8004480 <DMA_CalcBaseAndBitshift+0x158>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	4a24      	ldr	r2, [pc, #144]	; (8004484 <DMA_CalcBaseAndBitshift+0x15c>)
 80043f4:	5cd3      	ldrb	r3, [r2, r3]
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d908      	bls.n	8004414 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <DMA_CalcBaseAndBitshift+0x160>)
 800440a:	4013      	ands	r3, r2
 800440c:	1d1a      	adds	r2, r3, #4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	659a      	str	r2, [r3, #88]	; 0x58
 8004412:	e00d      	b.n	8004430 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <DMA_CalcBaseAndBitshift+0x160>)
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6593      	str	r3, [r2, #88]	; 0x58
 8004422:	e005      	b.n	8004430 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40020010 	.word	0x40020010
 8004444:	40020028 	.word	0x40020028
 8004448:	40020040 	.word	0x40020040
 800444c:	40020058 	.word	0x40020058
 8004450:	40020070 	.word	0x40020070
 8004454:	40020088 	.word	0x40020088
 8004458:	400200a0 	.word	0x400200a0
 800445c:	400200b8 	.word	0x400200b8
 8004460:	40020410 	.word	0x40020410
 8004464:	40020428 	.word	0x40020428
 8004468:	40020440 	.word	0x40020440
 800446c:	40020458 	.word	0x40020458
 8004470:	40020470 	.word	0x40020470
 8004474:	40020488 	.word	0x40020488
 8004478:	400204a0 	.word	0x400204a0
 800447c:	400204b8 	.word	0x400204b8
 8004480:	aaaaaaab 	.word	0xaaaaaaab
 8004484:	08009818 	.word	0x08009818
 8004488:	fffffc00 	.word	0xfffffc00

0800448c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d120      	bne.n	80044e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d858      	bhi.n	800455a <DMA_CheckFifoParam+0xce>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <DMA_CheckFifoParam+0x24>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044d3 	.word	0x080044d3
 80044b8:	080044c1 	.word	0x080044c1
 80044bc:	0800455b 	.word	0x0800455b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d048      	beq.n	800455e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044d0:	e045      	b.n	800455e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044da:	d142      	bne.n	8004562 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044e0:	e03f      	b.n	8004562 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ea:	d123      	bne.n	8004534 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d838      	bhi.n	8004566 <DMA_CheckFifoParam+0xda>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <DMA_CheckFifoParam+0x70>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004513 	.word	0x08004513
 8004504:	0800450d 	.word	0x0800450d
 8004508:	08004525 	.word	0x08004525
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
        break;
 8004510:	e030      	b.n	8004574 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d025      	beq.n	800456a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004522:	e022      	b.n	800456a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800452c:	d11f      	bne.n	800456e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004532:	e01c      	b.n	800456e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	2b02      	cmp	r3, #2
 800453a:	d902      	bls.n	8004542 <DMA_CheckFifoParam+0xb6>
 800453c:	2b03      	cmp	r3, #3
 800453e:	d003      	beq.n	8004548 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004540:	e018      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
        break;
 8004546:	e015      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00e      	beq.n	8004572 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
    break;
 8004558:	e00b      	b.n	8004572 <DMA_CheckFifoParam+0xe6>
        break;
 800455a:	bf00      	nop
 800455c:	e00a      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
        break;
 800455e:	bf00      	nop
 8004560:	e008      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
        break;
 8004562:	bf00      	nop
 8004564:	e006      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
        break;
 8004566:	bf00      	nop
 8004568:	e004      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
        break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
        break;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
    break;
 8004572:	bf00      	nop
    }
  }

  return status;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop

08004584 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a38      	ldr	r2, [pc, #224]	; (8004678 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d022      	beq.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a36      	ldr	r2, [pc, #216]	; (800467c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01d      	beq.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a35      	ldr	r2, [pc, #212]	; (8004680 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d018      	beq.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a33      	ldr	r2, [pc, #204]	; (8004684 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a32      	ldr	r2, [pc, #200]	; (8004688 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a30      	ldr	r2, [pc, #192]	; (800468c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2f      	ldr	r2, [pc, #188]	; (8004690 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2d      	ldr	r2, [pc, #180]	; (8004694 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01a      	beq.n	8004622 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	3b08      	subs	r3, #8
 80045f4:	4a28      	ldr	r2, [pc, #160]	; (8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4b26      	ldr	r3, [pc, #152]	; (800469c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004610:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	2201      	movs	r2, #1
 800461a:	409a      	lsls	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004620:	e024      	b.n	800466c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3b10      	subs	r3, #16
 800462a:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d806      	bhi.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d902      	bls.n	800464a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3308      	adds	r3, #8
 8004648:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	461a      	mov	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800465c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2201      	movs	r2, #1
 8004666:	409a      	lsls	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	58025408 	.word	0x58025408
 800467c:	5802541c 	.word	0x5802541c
 8004680:	58025430 	.word	0x58025430
 8004684:	58025444 	.word	0x58025444
 8004688:	58025458 	.word	0x58025458
 800468c:	5802546c 	.word	0x5802546c
 8004690:	58025480 	.word	0x58025480
 8004694:	58025494 	.word	0x58025494
 8004698:	cccccccd 	.word	0xcccccccd
 800469c:	16009600 	.word	0x16009600
 80046a0:	58025880 	.word	0x58025880
 80046a4:	aaaaaaab 	.word	0xaaaaaaab
 80046a8:	400204b8 	.word	0x400204b8
 80046ac:	4002040f 	.word	0x4002040f
 80046b0:	10008200 	.word	0x10008200
 80046b4:	40020880 	.word	0x40020880

080046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d04a      	beq.n	8004764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d847      	bhi.n	8004764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a25      	ldr	r2, [pc, #148]	; (8004770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a24      	ldr	r2, [pc, #144]	; (8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d01d      	beq.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a22      	ldr	r2, [pc, #136]	; (8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a21      	ldr	r2, [pc, #132]	; (800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1f      	ldr	r2, [pc, #124]	; (8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1b      	ldr	r2, [pc, #108]	; (800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4b17      	ldr	r3, [pc, #92]	; (8004790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	461a      	mov	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a15      	ldr	r2, [pc, #84]	; (8004794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004740:	671a      	str	r2, [r3, #112]	; 0x70
 8004742:	e009      	b.n	8004758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a11      	ldr	r2, [pc, #68]	; (800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004756:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3b01      	subs	r3, #1
 800475c:	2201      	movs	r2, #1
 800475e:	409a      	lsls	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	58025408 	.word	0x58025408
 8004774:	5802541c 	.word	0x5802541c
 8004778:	58025430 	.word	0x58025430
 800477c:	58025444 	.word	0x58025444
 8004780:	58025458 	.word	0x58025458
 8004784:	5802546c 	.word	0x5802546c
 8004788:	58025480 	.word	0x58025480
 800478c:	58025494 	.word	0x58025494
 8004790:	1600963f 	.word	0x1600963f
 8004794:	58025940 	.word	0x58025940
 8004798:	1000823f 	.word	0x1000823f
 800479c:	40020940 	.word	0x40020940

080047a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047ae:	4b89      	ldr	r3, [pc, #548]	; (80049d4 <HAL_GPIO_Init+0x234>)
 80047b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047b2:	e194      	b.n	8004ade <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	2101      	movs	r1, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	4013      	ands	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8186 	beq.w	8004ad8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d005      	beq.n	80047e4 <HAL_GPIO_Init+0x44>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d130      	bne.n	8004846 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	2203      	movs	r2, #3
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800481a:	2201      	movs	r2, #1
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0201 	and.w	r2, r3, #1
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b03      	cmp	r3, #3
 8004850:	d017      	beq.n	8004882 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2203      	movs	r2, #3
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d123      	bne.n	80048d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	08da      	lsrs	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3208      	adds	r2, #8
 8004896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	220f      	movs	r2, #15
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	08da      	lsrs	r2, r3, #3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3208      	adds	r2, #8
 80048d0:	69b9      	ldr	r1, [r7, #24]
 80048d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2203      	movs	r2, #3
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0203 	and.w	r2, r3, #3
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80e0 	beq.w	8004ad8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004918:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <HAL_GPIO_Init+0x238>)
 800491a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800491e:	4a2e      	ldr	r2, [pc, #184]	; (80049d8 <HAL_GPIO_Init+0x238>)
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <HAL_GPIO_Init+0x238>)
 800492a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004936:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_GPIO_Init+0x23c>)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	3302      	adds	r3, #2
 800493e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	220f      	movs	r2, #15
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a20      	ldr	r2, [pc, #128]	; (80049e0 <HAL_GPIO_Init+0x240>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d052      	beq.n	8004a08 <HAL_GPIO_Init+0x268>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_GPIO_Init+0x244>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d031      	beq.n	80049ce <HAL_GPIO_Init+0x22e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <HAL_GPIO_Init+0x248>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d02b      	beq.n	80049ca <HAL_GPIO_Init+0x22a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_GPIO_Init+0x24c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d025      	beq.n	80049c6 <HAL_GPIO_Init+0x226>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <HAL_GPIO_Init+0x250>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01f      	beq.n	80049c2 <HAL_GPIO_Init+0x222>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1b      	ldr	r2, [pc, #108]	; (80049f4 <HAL_GPIO_Init+0x254>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d019      	beq.n	80049be <HAL_GPIO_Init+0x21e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1a      	ldr	r2, [pc, #104]	; (80049f8 <HAL_GPIO_Init+0x258>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_GPIO_Init+0x21a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a19      	ldr	r2, [pc, #100]	; (80049fc <HAL_GPIO_Init+0x25c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00d      	beq.n	80049b6 <HAL_GPIO_Init+0x216>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_GPIO_Init+0x260>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <HAL_GPIO_Init+0x212>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <HAL_GPIO_Init+0x264>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_GPIO_Init+0x20e>
 80049aa:	2309      	movs	r3, #9
 80049ac:	e02d      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049ae:	230a      	movs	r3, #10
 80049b0:	e02b      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049b2:	2308      	movs	r3, #8
 80049b4:	e029      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049b6:	2307      	movs	r3, #7
 80049b8:	e027      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049ba:	2306      	movs	r3, #6
 80049bc:	e025      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049be:	2305      	movs	r3, #5
 80049c0:	e023      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049c2:	2304      	movs	r3, #4
 80049c4:	e021      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049c6:	2303      	movs	r3, #3
 80049c8:	e01f      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e01d      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e01b      	b.n	8004a0a <HAL_GPIO_Init+0x26a>
 80049d2:	bf00      	nop
 80049d4:	58000080 	.word	0x58000080
 80049d8:	58024400 	.word	0x58024400
 80049dc:	58000400 	.word	0x58000400
 80049e0:	58020000 	.word	0x58020000
 80049e4:	58020400 	.word	0x58020400
 80049e8:	58020800 	.word	0x58020800
 80049ec:	58020c00 	.word	0x58020c00
 80049f0:	58021000 	.word	0x58021000
 80049f4:	58021400 	.word	0x58021400
 80049f8:	58021800 	.word	0x58021800
 80049fc:	58021c00 	.word	0x58021c00
 8004a00:	58022000 	.word	0x58022000
 8004a04:	58022400 	.word	0x58022400
 8004a08:	2300      	movs	r3, #0
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	f002 0203 	and.w	r2, r2, #3
 8004a10:	0092      	lsls	r2, r2, #2
 8004a12:	4093      	lsls	r3, r2
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a1a:	4938      	ldr	r1, [pc, #224]	; (8004afc <HAL_GPIO_Init+0x35c>)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	3302      	adds	r3, #2
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	3301      	adds	r3, #1
 8004adc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f ae63 	bne.w	80047b4 <HAL_GPIO_Init+0x14>
  }
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	3724      	adds	r7, #36	; 0x24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	58000400 	.word	0x58000400

08004b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b10:	787b      	ldrb	r3, [r7, #1]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b1c:	e003      	b.n	8004b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	619a      	str	r2, [r3, #24]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b44:	887a      	ldrh	r2, [r7, #2]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	041a      	lsls	r2, r3, #16
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43d9      	mvns	r1, r3
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	400b      	ands	r3, r1
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d00a      	beq.n	8004b92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b7c:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d001      	beq.n	8004b8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e01f      	b.n	8004bce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e01d      	b.n	8004bce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b92:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f023 0207 	bic.w	r2, r3, #7
 8004b9a:	490f      	ldr	r1, [pc, #60]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ba2:	f7fc fdd9 	bl	8001758 <HAL_GetTick>
 8004ba6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ba8:	e009      	b.n	8004bbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004baa:	f7fc fdd5 	bl	8001758 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb8:	d901      	bls.n	8004bbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e007      	b.n	8004bce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bca:	d1ee      	bne.n	8004baa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	58024800 	.word	0x58024800

08004bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f000 bc1d 	b.w	800542a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8087 	beq.w	8004d0c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfe:	4b99      	ldr	r3, [pc, #612]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c08:	4b96      	ldr	r3, [pc, #600]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d007      	beq.n	8004c24 <HAL_RCC_OscConfig+0x48>
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2b18      	cmp	r3, #24
 8004c18:	d110      	bne.n	8004c3c <HAL_RCC_OscConfig+0x60>
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d10b      	bne.n	8004c3c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	4b8f      	ldr	r3, [pc, #572]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d06c      	beq.n	8004d0a <HAL_RCC_OscConfig+0x12e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d168      	bne.n	8004d0a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e3f6      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c44:	d106      	bne.n	8004c54 <HAL_RCC_OscConfig+0x78>
 8004c46:	4b87      	ldr	r3, [pc, #540]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a86      	ldr	r2, [pc, #536]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e02e      	b.n	8004cb2 <HAL_RCC_OscConfig+0xd6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10c      	bne.n	8004c76 <HAL_RCC_OscConfig+0x9a>
 8004c5c:	4b81      	ldr	r3, [pc, #516]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a80      	ldr	r2, [pc, #512]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b7e      	ldr	r3, [pc, #504]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a7d      	ldr	r2, [pc, #500]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	e01d      	b.n	8004cb2 <HAL_RCC_OscConfig+0xd6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c7e:	d10c      	bne.n	8004c9a <HAL_RCC_OscConfig+0xbe>
 8004c80:	4b78      	ldr	r3, [pc, #480]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a77      	ldr	r2, [pc, #476]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b75      	ldr	r3, [pc, #468]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a74      	ldr	r2, [pc, #464]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	e00b      	b.n	8004cb2 <HAL_RCC_OscConfig+0xd6>
 8004c9a:	4b72      	ldr	r3, [pc, #456]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a71      	ldr	r2, [pc, #452]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6e      	ldr	r2, [pc, #440]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d013      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fc fd4d 	bl	8001758 <HAL_GetTick>
 8004cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc2:	f7fc fd49 	bl	8001758 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b64      	cmp	r3, #100	; 0x64
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e3aa      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cd4:	4b63      	ldr	r3, [pc, #396]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0xe6>
 8004ce0:	e014      	b.n	8004d0c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fc fd39 	bl	8001758 <HAL_GetTick>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cea:	f7fc fd35 	bl	8001758 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b64      	cmp	r3, #100	; 0x64
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e396      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cfc:	4b59      	ldr	r3, [pc, #356]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x10e>
 8004d08:	e000      	b.n	8004d0c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80cb 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1a:	4b52      	ldr	r3, [pc, #328]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d24:	4b4f      	ldr	r3, [pc, #316]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_RCC_OscConfig+0x164>
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	2b18      	cmp	r3, #24
 8004d34:	d156      	bne.n	8004de4 <HAL_RCC_OscConfig+0x208>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d151      	bne.n	8004de4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d40:	4b48      	ldr	r3, [pc, #288]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_OscConfig+0x17c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e368      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d58:	4b42      	ldr	r3, [pc, #264]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f023 0219 	bic.w	r2, r3, #25
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	493f      	ldr	r1, [pc, #252]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d6a:	f7fc fcf5 	bl	8001758 <HAL_GetTick>
 8004d6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d72:	f7fc fcf1 	bl	8001758 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e352      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d84:	4b37      	ldr	r3, [pc, #220]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	f7fc fd32 	bl	80017f8 <HAL_GetREVID>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d817      	bhi.n	8004dce <HAL_RCC_OscConfig+0x1f2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d108      	bne.n	8004db8 <HAL_RCC_OscConfig+0x1dc>
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004dae:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db6:	e07b      	b.n	8004eb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	031b      	lsls	r3, r3, #12
 8004dc6:	4927      	ldr	r1, [pc, #156]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dcc:	e070      	b.n	8004eb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	4921      	ldr	r1, [pc, #132]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004de2:	e065      	b.n	8004eb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d048      	beq.n	8004e7e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dec:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f023 0219 	bic.w	r2, r3, #25
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	491a      	ldr	r1, [pc, #104]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fc fcab 	bl	8001758 <HAL_GetTick>
 8004e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e06:	f7fc fca7 	bl	8001758 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e308      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	f7fc fce8 	bl	80017f8 <HAL_GetREVID>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d81a      	bhi.n	8004e68 <HAL_RCC_OscConfig+0x28c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d108      	bne.n	8004e4c <HAL_RCC_OscConfig+0x270>
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e48:	6053      	str	r3, [r2, #4]
 8004e4a:	e031      	b.n	8004eb0 <HAL_RCC_OscConfig+0x2d4>
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	031b      	lsls	r3, r3, #12
 8004e5a:	4902      	ldr	r1, [pc, #8]	; (8004e64 <HAL_RCC_OscConfig+0x288>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	604b      	str	r3, [r1, #4]
 8004e60:	e026      	b.n	8004eb0 <HAL_RCC_OscConfig+0x2d4>
 8004e62:	bf00      	nop
 8004e64:	58024400 	.word	0x58024400
 8004e68:	4b9a      	ldr	r3, [pc, #616]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	4997      	ldr	r1, [pc, #604]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
 8004e7c:	e018      	b.n	8004eb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e7e:	4b95      	ldr	r3, [pc, #596]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a94      	ldr	r2, [pc, #592]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8a:	f7fc fc65 	bl	8001758 <HAL_GetTick>
 8004e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e92:	f7fc fc61 	bl	8001758 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e2c2      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ea4:	4b8b      	ldr	r3, [pc, #556]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f0      	bne.n	8004e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80a9 	beq.w	8005010 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ebe:	4b85      	ldr	r3, [pc, #532]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ec8:	4b82      	ldr	r3, [pc, #520]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d007      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x308>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b18      	cmp	r3, #24
 8004ed8:	d13a      	bne.n	8004f50 <HAL_RCC_OscConfig+0x374>
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d135      	bne.n	8004f50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ee4:	4b7b      	ldr	r3, [pc, #492]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_OscConfig+0x320>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e296      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004efc:	f7fc fc7c 	bl	80017f8 <HAL_GetREVID>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d817      	bhi.n	8004f3a <HAL_RCC_OscConfig+0x35e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d108      	bne.n	8004f24 <HAL_RCC_OscConfig+0x348>
 8004f12:	4b70      	ldr	r3, [pc, #448]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f1a:	4a6e      	ldr	r2, [pc, #440]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f20:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f22:	e075      	b.n	8005010 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f24:	4b6b      	ldr	r3, [pc, #428]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	069b      	lsls	r3, r3, #26
 8004f32:	4968      	ldr	r1, [pc, #416]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f38:	e06a      	b.n	8005010 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f3a:	4b66      	ldr	r3, [pc, #408]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	061b      	lsls	r3, r3, #24
 8004f48:	4962      	ldr	r1, [pc, #392]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f4e:	e05f      	b.n	8005010 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d042      	beq.n	8004fde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f58:	4b5e      	ldr	r3, [pc, #376]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fbf8 	bl	8001758 <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f6c:	f7fc fbf4 	bl	8001758 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e255      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f7e:	4b55      	ldr	r3, [pc, #340]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f8a:	f7fc fc35 	bl	80017f8 <HAL_GetREVID>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d817      	bhi.n	8004fc8 <HAL_RCC_OscConfig+0x3ec>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d108      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x3d6>
 8004fa0:	4b4c      	ldr	r3, [pc, #304]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004fa8:	4a4a      	ldr	r2, [pc, #296]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004faa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fae:	6053      	str	r3, [r2, #4]
 8004fb0:	e02e      	b.n	8005010 <HAL_RCC_OscConfig+0x434>
 8004fb2:	4b48      	ldr	r3, [pc, #288]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	069b      	lsls	r3, r3, #26
 8004fc0:	4944      	ldr	r1, [pc, #272]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	604b      	str	r3, [r1, #4]
 8004fc6:	e023      	b.n	8005010 <HAL_RCC_OscConfig+0x434>
 8004fc8:	4b42      	ldr	r3, [pc, #264]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	061b      	lsls	r3, r3, #24
 8004fd6:	493f      	ldr	r1, [pc, #252]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60cb      	str	r3, [r1, #12]
 8004fdc:	e018      	b.n	8005010 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fde:	4b3d      	ldr	r3, [pc, #244]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fea:	f7fc fbb5 	bl	8001758 <HAL_GetTick>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ff2:	f7fc fbb1 	bl	8001758 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e212      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005004:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d036      	beq.n	800508a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d019      	beq.n	8005058 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8005026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005028:	4a2a      	ldr	r2, [pc, #168]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005030:	f7fc fb92 	bl	8001758 <HAL_GetTick>
 8005034:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005038:	f7fc fb8e 	bl	8001758 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e1ef      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800504a:	4b22      	ldr	r3, [pc, #136]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 800504c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x45c>
 8005056:	e018      	b.n	800508a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005058:	4b1e      	ldr	r3, [pc, #120]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 800505a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7fc fb78 	bl	8001758 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800506c:	f7fc fb74 	bl	8001758 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1d5      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 8005080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d039      	beq.n	800510a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01c      	beq.n	80050d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800509e:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 80050a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050aa:	f7fc fb55 	bl	8001758 <HAL_GetTick>
 80050ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050b2:	f7fc fb51 	bl	8001758 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e1b2      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <HAL_RCC_OscConfig+0x4f8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x4d6>
 80050d0:	e01b      	b.n	800510a <HAL_RCC_OscConfig+0x52e>
 80050d2:	bf00      	nop
 80050d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050d8:	4b9b      	ldr	r3, [pc, #620]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a9a      	ldr	r2, [pc, #616]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80050de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050e4:	f7fc fb38 	bl	8001758 <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050ec:	f7fc fb34 	bl	8001758 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e195      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050fe:	4b92      	ldr	r3, [pc, #584]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8081 	beq.w	800521a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005118:	4b8c      	ldr	r3, [pc, #560]	; (800534c <HAL_RCC_OscConfig+0x770>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a8b      	ldr	r2, [pc, #556]	; (800534c <HAL_RCC_OscConfig+0x770>)
 800511e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005122:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005124:	f7fc fb18 	bl	8001758 <HAL_GetTick>
 8005128:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800512c:	f7fc fb14 	bl	8001758 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b64      	cmp	r3, #100	; 0x64
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e175      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800513e:	4b83      	ldr	r3, [pc, #524]	; (800534c <HAL_RCC_OscConfig+0x770>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d106      	bne.n	8005160 <HAL_RCC_OscConfig+0x584>
 8005152:	4b7d      	ldr	r3, [pc, #500]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	4a7c      	ldr	r2, [pc, #496]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	6713      	str	r3, [r2, #112]	; 0x70
 800515e:	e02d      	b.n	80051bc <HAL_RCC_OscConfig+0x5e0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10c      	bne.n	8005182 <HAL_RCC_OscConfig+0x5a6>
 8005168:	4b77      	ldr	r3, [pc, #476]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a76      	ldr	r2, [pc, #472]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	4b74      	ldr	r3, [pc, #464]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a73      	ldr	r2, [pc, #460]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 800517a:	f023 0304 	bic.w	r3, r3, #4
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	e01c      	b.n	80051bc <HAL_RCC_OscConfig+0x5e0>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d10c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x5c8>
 800518a:	4b6f      	ldr	r3, [pc, #444]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a6e      	ldr	r2, [pc, #440]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005190:	f043 0304 	orr.w	r3, r3, #4
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	4b6c      	ldr	r3, [pc, #432]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a6b      	ldr	r2, [pc, #428]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70
 80051a2:	e00b      	b.n	80051bc <HAL_RCC_OscConfig+0x5e0>
 80051a4:	4b68      	ldr	r3, [pc, #416]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	4a67      	ldr	r2, [pc, #412]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	; 0x70
 80051b0:	4b65      	ldr	r3, [pc, #404]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	4a64      	ldr	r2, [pc, #400]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80051b6:	f023 0304 	bic.w	r3, r3, #4
 80051ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fc fac8 	bl	8001758 <HAL_GetTick>
 80051c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7fc fac4 	bl	8001758 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e123      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051e2:	4b59      	ldr	r3, [pc, #356]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0ee      	beq.n	80051cc <HAL_RCC_OscConfig+0x5f0>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fc fab2 	bl	8001758 <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051f6:	e00a      	b.n	800520e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fc faae 	bl	8001758 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	; 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e10d      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800520e:	4b4e      	ldr	r3, [pc, #312]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1ee      	bne.n	80051f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 8102 	beq.w	8005428 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005224:	4b48      	ldr	r3, [pc, #288]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800522c:	2b18      	cmp	r3, #24
 800522e:	f000 80bd 	beq.w	80053ac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	2b02      	cmp	r3, #2
 8005238:	f040 809e 	bne.w	8005378 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523c:	4b42      	ldr	r3, [pc, #264]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a41      	ldr	r2, [pc, #260]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fc fa86 	bl	8001758 <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005250:	f7fc fa82 	bl	8001758 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0e3      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005262:	4b39      	ldr	r3, [pc, #228]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800526e:	4b36      	ldr	r3, [pc, #216]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005272:	4b37      	ldr	r3, [pc, #220]	; (8005350 <HAL_RCC_OscConfig+0x774>)
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800527e:	0112      	lsls	r2, r2, #4
 8005280:	430a      	orrs	r2, r1
 8005282:	4931      	ldr	r1, [pc, #196]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005284:	4313      	orrs	r3, r2
 8005286:	628b      	str	r3, [r1, #40]	; 0x28
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	3b01      	subs	r3, #1
 800528e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005296:	3b01      	subs	r3, #1
 8005298:	025b      	lsls	r3, r3, #9
 800529a:	b29b      	uxth	r3, r3
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	3b01      	subs	r3, #1
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	3b01      	subs	r3, #1
 80052b2:	061b      	lsls	r3, r3, #24
 80052b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052b8:	4923      	ldr	r1, [pc, #140]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80052be:	4b22      	ldr	r3, [pc, #136]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	4a21      	ldr	r2, [pc, #132]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052ca:	4b1f      	ldr	r3, [pc, #124]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ce:	4b21      	ldr	r3, [pc, #132]	; (8005354 <HAL_RCC_OscConfig+0x778>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052d6:	00d2      	lsls	r2, r2, #3
 80052d8:	491b      	ldr	r1, [pc, #108]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052de:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	f023 020c 	bic.w	r2, r3, #12
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	4917      	ldr	r1, [pc, #92]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052f0:	4b15      	ldr	r3, [pc, #84]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	f023 0202 	bic.w	r2, r3, #2
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fc:	4912      	ldr	r1, [pc, #72]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005302:	4b11      	ldr	r3, [pc, #68]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	4a10      	ldr	r2, [pc, #64]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005324:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005326:	4b08      	ldr	r3, [pc, #32]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	4a07      	ldr	r2, [pc, #28]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a04      	ldr	r2, [pc, #16]	; (8005348 <HAL_RCC_OscConfig+0x76c>)
 8005338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533e:	f7fc fa0b 	bl	8001758 <HAL_GetTick>
 8005342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005344:	e011      	b.n	800536a <HAL_RCC_OscConfig+0x78e>
 8005346:	bf00      	nop
 8005348:	58024400 	.word	0x58024400
 800534c:	58024800 	.word	0x58024800
 8005350:	fffffc0c 	.word	0xfffffc0c
 8005354:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005358:	f7fc f9fe 	bl	8001758 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e05f      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800536a:	4b32      	ldr	r3, [pc, #200]	; (8005434 <HAL_RCC_OscConfig+0x858>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0x77c>
 8005376:	e057      	b.n	8005428 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005378:	4b2e      	ldr	r3, [pc, #184]	; (8005434 <HAL_RCC_OscConfig+0x858>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2d      	ldr	r2, [pc, #180]	; (8005434 <HAL_RCC_OscConfig+0x858>)
 800537e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fc f9e8 	bl	8001758 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538c:	f7fc f9e4 	bl	8001758 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e045      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800539e:	4b25      	ldr	r3, [pc, #148]	; (8005434 <HAL_RCC_OscConfig+0x858>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x7b0>
 80053aa:	e03d      	b.n	8005428 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053ac:	4b21      	ldr	r3, [pc, #132]	; (8005434 <HAL_RCC_OscConfig+0x858>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053b2:	4b20      	ldr	r3, [pc, #128]	; (8005434 <HAL_RCC_OscConfig+0x858>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d031      	beq.n	8005424 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f003 0203 	and.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d12a      	bne.n	8005424 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d122      	bne.n	8005424 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d11a      	bne.n	8005424 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	0a5b      	lsrs	r3, r3, #9
 80053f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d111      	bne.n	8005424 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	0c1b      	lsrs	r3, r3, #16
 8005404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800540e:	429a      	cmp	r2, r3
 8005410:	d108      	bne.n	8005424 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	0e1b      	lsrs	r3, r3, #24
 8005416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3730      	adds	r7, #48	; 0x30
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400

08005438 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e19c      	b.n	8005786 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800544c:	4b8a      	ldr	r3, [pc, #552]	; (8005678 <HAL_RCC_ClockConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d910      	bls.n	800547c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545a:	4b87      	ldr	r3, [pc, #540]	; (8005678 <HAL_RCC_ClockConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f023 020f 	bic.w	r2, r3, #15
 8005462:	4985      	ldr	r1, [pc, #532]	; (8005678 <HAL_RCC_ClockConfig+0x240>)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	4313      	orrs	r3, r2
 8005468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546a:	4b83      	ldr	r3, [pc, #524]	; (8005678 <HAL_RCC_ClockConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d001      	beq.n	800547c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e184      	b.n	8005786 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d010      	beq.n	80054aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	4b7b      	ldr	r3, [pc, #492]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005494:	429a      	cmp	r2, r3
 8005496:	d908      	bls.n	80054aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005498:	4b78      	ldr	r3, [pc, #480]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	4975      	ldr	r1, [pc, #468]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d010      	beq.n	80054d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	4b70      	ldr	r3, [pc, #448]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d908      	bls.n	80054d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054c6:	4b6d      	ldr	r3, [pc, #436]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	496a      	ldr	r1, [pc, #424]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d010      	beq.n	8005506 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	4b64      	ldr	r3, [pc, #400]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d908      	bls.n	8005506 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054f4:	4b61      	ldr	r3, [pc, #388]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	495e      	ldr	r1, [pc, #376]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005502:	4313      	orrs	r3, r2
 8005504:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	4b59      	ldr	r3, [pc, #356]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800551e:	429a      	cmp	r2, r3
 8005520:	d908      	bls.n	8005534 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005522:	4b56      	ldr	r3, [pc, #344]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	4953      	ldr	r1, [pc, #332]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005530:	4313      	orrs	r3, r2
 8005532:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	4b4d      	ldr	r3, [pc, #308]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	429a      	cmp	r2, r3
 800554e:	d908      	bls.n	8005562 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005550:	4b4a      	ldr	r3, [pc, #296]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f023 020f 	bic.w	r2, r3, #15
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4947      	ldr	r1, [pc, #284]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 800555e:	4313      	orrs	r3, r2
 8005560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d055      	beq.n	800561a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800556e:	4b43      	ldr	r3, [pc, #268]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	4940      	ldr	r1, [pc, #256]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 800557c:	4313      	orrs	r3, r2
 800557e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d107      	bne.n	8005598 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005588:	4b3c      	ldr	r3, [pc, #240]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d121      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0f6      	b.n	8005786 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055a0:	4b36      	ldr	r3, [pc, #216]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d115      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0ea      	b.n	8005786 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055b8:	4b30      	ldr	r3, [pc, #192]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0de      	b.n	8005786 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055c8:	4b2c      	ldr	r3, [pc, #176]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0d6      	b.n	8005786 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055d8:	4b28      	ldr	r3, [pc, #160]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f023 0207 	bic.w	r2, r3, #7
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4925      	ldr	r1, [pc, #148]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ea:	f7fc f8b5 	bl	8001758 <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f0:	e00a      	b.n	8005608 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f2:	f7fc f8b1 	bl	8001758 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e0be      	b.n	8005786 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005608:	4b1c      	ldr	r3, [pc, #112]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	429a      	cmp	r2, r3
 8005618:	d1eb      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	429a      	cmp	r2, r3
 8005634:	d208      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f023 020f 	bic.w	r2, r3, #15
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	490e      	ldr	r1, [pc, #56]	; (800567c <HAL_RCC_ClockConfig+0x244>)
 8005644:	4313      	orrs	r3, r2
 8005646:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <HAL_RCC_ClockConfig+0x240>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d214      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005656:	4b08      	ldr	r3, [pc, #32]	; (8005678 <HAL_RCC_ClockConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 020f 	bic.w	r2, r3, #15
 800565e:	4906      	ldr	r1, [pc, #24]	; (8005678 <HAL_RCC_ClockConfig+0x240>)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	4313      	orrs	r3, r2
 8005664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005666:	4b04      	ldr	r3, [pc, #16]	; (8005678 <HAL_RCC_ClockConfig+0x240>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d005      	beq.n	8005680 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e086      	b.n	8005786 <HAL_RCC_ClockConfig+0x34e>
 8005678:	52002000 	.word	0x52002000
 800567c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d010      	beq.n	80056ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	4b3f      	ldr	r3, [pc, #252]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005698:	429a      	cmp	r2, r3
 800569a:	d208      	bcs.n	80056ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800569c:	4b3c      	ldr	r3, [pc, #240]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	4939      	ldr	r1, [pc, #228]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d010      	beq.n	80056dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d208      	bcs.n	80056dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056ca:	4b31      	ldr	r3, [pc, #196]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	492e      	ldr	r1, [pc, #184]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d010      	beq.n	800570a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	4b28      	ldr	r3, [pc, #160]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d208      	bcs.n	800570a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	4922      	ldr	r1, [pc, #136]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 8005706:	4313      	orrs	r3, r2
 8005708:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d010      	beq.n	8005738 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69da      	ldr	r2, [r3, #28]
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005722:	429a      	cmp	r2, r3
 8005724:	d208      	bcs.n	8005738 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005726:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	4917      	ldr	r1, [pc, #92]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 8005734:	4313      	orrs	r3, r2
 8005736:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005738:	f000 f834 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800573c:	4602      	mov	r2, r0
 800573e:	4b14      	ldr	r3, [pc, #80]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	4912      	ldr	r1, [pc, #72]	; (8005794 <HAL_RCC_ClockConfig+0x35c>)
 800574a:	5ccb      	ldrb	r3, [r1, r3]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
 8005754:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005756:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <HAL_RCC_ClockConfig+0x358>)
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	4a0d      	ldr	r2, [pc, #52]	; (8005794 <HAL_RCC_ClockConfig+0x35c>)
 8005760:	5cd3      	ldrb	r3, [r2, r3]
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <HAL_RCC_ClockConfig+0x360>)
 800576e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <HAL_RCC_ClockConfig+0x364>)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_RCC_ClockConfig+0x368>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f7fb ffa2 	bl	80016c4 <HAL_InitTick>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	58024400 	.word	0x58024400
 8005794:	08009808 	.word	0x08009808
 8005798:	24000008 	.word	0x24000008
 800579c:	24000004 	.word	0x24000004
 80057a0:	2400000c 	.word	0x2400000c

080057a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b089      	sub	sp, #36	; 0x24
 80057a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057aa:	4bb3      	ldr	r3, [pc, #716]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b2:	2b18      	cmp	r3, #24
 80057b4:	f200 8155 	bhi.w	8005a62 <HAL_RCC_GetSysClockFreq+0x2be>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	08005825 	.word	0x08005825
 80057c4:	08005a63 	.word	0x08005a63
 80057c8:	08005a63 	.word	0x08005a63
 80057cc:	08005a63 	.word	0x08005a63
 80057d0:	08005a63 	.word	0x08005a63
 80057d4:	08005a63 	.word	0x08005a63
 80057d8:	08005a63 	.word	0x08005a63
 80057dc:	08005a63 	.word	0x08005a63
 80057e0:	0800584b 	.word	0x0800584b
 80057e4:	08005a63 	.word	0x08005a63
 80057e8:	08005a63 	.word	0x08005a63
 80057ec:	08005a63 	.word	0x08005a63
 80057f0:	08005a63 	.word	0x08005a63
 80057f4:	08005a63 	.word	0x08005a63
 80057f8:	08005a63 	.word	0x08005a63
 80057fc:	08005a63 	.word	0x08005a63
 8005800:	08005851 	.word	0x08005851
 8005804:	08005a63 	.word	0x08005a63
 8005808:	08005a63 	.word	0x08005a63
 800580c:	08005a63 	.word	0x08005a63
 8005810:	08005a63 	.word	0x08005a63
 8005814:	08005a63 	.word	0x08005a63
 8005818:	08005a63 	.word	0x08005a63
 800581c:	08005a63 	.word	0x08005a63
 8005820:	08005857 	.word	0x08005857
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005824:	4b94      	ldr	r3, [pc, #592]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005830:	4b91      	ldr	r3, [pc, #580]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	08db      	lsrs	r3, r3, #3
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	4a90      	ldr	r2, [pc, #576]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
 8005840:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005842:	e111      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005844:	4b8d      	ldr	r3, [pc, #564]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005846:	61bb      	str	r3, [r7, #24]
    break;
 8005848:	e10e      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800584a:	4b8d      	ldr	r3, [pc, #564]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800584c:	61bb      	str	r3, [r7, #24]
    break;
 800584e:	e10b      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005850:	4b8c      	ldr	r3, [pc, #560]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005852:	61bb      	str	r3, [r7, #24]
    break;
 8005854:	e108      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005856:	4b88      	ldr	r3, [pc, #544]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005860:	4b85      	ldr	r3, [pc, #532]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800586a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800586c:	4b82      	ldr	r3, [pc, #520]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005876:	4b80      	ldr	r3, [pc, #512]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587a:	08db      	lsrs	r3, r3, #3
 800587c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80e1 	beq.w	8005a5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b02      	cmp	r3, #2
 800589e:	f000 8083 	beq.w	80059a8 <HAL_RCC_GetSysClockFreq+0x204>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	f200 80a1 	bhi.w	80059ec <HAL_RCC_GetSysClockFreq+0x248>
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0x114>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d056      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058b6:	e099      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058b8:	4b6f      	ldr	r3, [pc, #444]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d02d      	beq.n	8005920 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058c4:	4b6c      	ldr	r3, [pc, #432]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	08db      	lsrs	r3, r3, #3
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	4a6b      	ldr	r2, [pc, #428]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
 80058d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ee:	4b62      	ldr	r3, [pc, #392]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005902:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800591e:	e087      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a8c <HAL_RCC_GetSysClockFreq+0x2e8>
 800592e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005932:	4b51      	ldr	r3, [pc, #324]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005942:	ed97 6a02 	vldr	s12, [r7, #8]
 8005946:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800594a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005962:	e065      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005976:	4b40      	ldr	r3, [pc, #256]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005986:	ed97 6a02 	vldr	s12, [r7, #8]
 800598a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800598e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800599a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059a6:	e043      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a94 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ba:	4b2f      	ldr	r3, [pc, #188]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ea:	e021      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a90 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fe:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a30:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	0a5b      	lsrs	r3, r3, #9
 8005a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	ee07 3a90 	vmov	s15, r3
 8005a44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a54:	ee17 3a90 	vmov	r3, s15
 8005a58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a5a:	e005      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
    break;
 8005a60:	e002      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a62:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a64:	61bb      	str	r3, [r7, #24]
    break;
 8005a66:	bf00      	nop
  }

  return sysclockfreq;
 8005a68:	69bb      	ldr	r3, [r7, #24]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3724      	adds	r7, #36	; 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	58024400 	.word	0x58024400
 8005a7c:	03d09000 	.word	0x03d09000
 8005a80:	003d0900 	.word	0x003d0900
 8005a84:	017d7840 	.word	0x017d7840
 8005a88:	46000000 	.word	0x46000000
 8005a8c:	4c742400 	.word	0x4c742400
 8005a90:	4a742400 	.word	0x4a742400
 8005a94:	4bbebc20 	.word	0x4bbebc20

08005a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a9e:	f7ff fe81 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	0a1b      	lsrs	r3, r3, #8
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	490f      	ldr	r1, [pc, #60]	; (8005aec <HAL_RCC_GetHCLKFreq+0x54>)
 8005ab0:	5ccb      	ldrb	r3, [r1, r3]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	4a09      	ldr	r2, [pc, #36]	; (8005aec <HAL_RCC_GetHCLKFreq+0x54>)
 8005ac6:	5cd3      	ldrb	r3, [r2, r3]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad2:	4a07      	ldr	r2, [pc, #28]	; (8005af0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ad4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ad6:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ade:	681b      	ldr	r3, [r3, #0]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	08009808 	.word	0x08009808
 8005af0:	24000008 	.word	0x24000008
 8005af4:	24000004 	.word	0x24000004

08005af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005afc:	f7ff ffcc 	bl	8005a98 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	091b      	lsrs	r3, r3, #4
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4904      	ldr	r1, [pc, #16]	; (8005b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	08009808 	.word	0x08009808

08005b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b28:	f7ff ffb6 	bl	8005a98 <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4904      	ldr	r1, [pc, #16]	; (8005b4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	58024400 	.word	0x58024400
 8005b4c:	08009808 	.word	0x08009808

08005b50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b58:	2300      	movs	r3, #0
 8005b5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d03f      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b74:	d02a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b7a:	d824      	bhi.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b80:	d018      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b86:	d81e      	bhi.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b90:	d007      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b92:	e018      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b94:	4ba3      	ldr	r3, [pc, #652]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4aa2      	ldr	r2, [pc, #648]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ba0:	e015      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 f9d5 	bl	8006f58 <RCCEx_PLL2_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bb2:	e00c      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3324      	adds	r3, #36	; 0x24
 8005bb8:	2102      	movs	r1, #2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 fa7e 	bl	80070bc <RCCEx_PLL3_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bc4:	e003      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bca:	e000      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bd4:	4b93      	ldr	r3, [pc, #588]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be0:	4990      	ldr	r1, [pc, #576]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	650b      	str	r3, [r1, #80]	; 0x50
 8005be6:	e001      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d03d      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d826      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c00:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005c1d 	.word	0x08005c1d
 8005c0c:	08005c2b 	.word	0x08005c2b
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	08005c55 	.word	0x08005c55
 8005c18:	08005c55 	.word	0x08005c55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1c:	4b81      	ldr	r3, [pc, #516]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a80      	ldr	r2, [pc, #512]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c28:	e015      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	2100      	movs	r1, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 f991 	bl	8006f58 <RCCEx_PLL2_Config>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c3a:	e00c      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3324      	adds	r3, #36	; 0x24
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f001 fa3a 	bl	80070bc <RCCEx_PLL3_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c4c:	e003      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	75fb      	strb	r3, [r7, #23]
      break;
 8005c52:	e000      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c5c:	4b71      	ldr	r3, [pc, #452]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c60:	f023 0207 	bic.w	r2, r3, #7
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	496e      	ldr	r1, [pc, #440]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c6e:	e001      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d042      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c88:	d02b      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8e:	d825      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c90:	2bc0      	cmp	r3, #192	; 0xc0
 8005c92:	d028      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c94:	2bc0      	cmp	r3, #192	; 0xc0
 8005c96:	d821      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c98:	2b80      	cmp	r3, #128	; 0x80
 8005c9a:	d016      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005c9c:	2b80      	cmp	r3, #128	; 0x80
 8005c9e:	d81d      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d007      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005ca8:	e018      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005caa:	4b5e      	ldr	r3, [pc, #376]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	4a5d      	ldr	r2, [pc, #372]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cb6:	e017      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 f94a 	bl	8006f58 <RCCEx_PLL2_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cc8:	e00e      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3324      	adds	r3, #36	; 0x24
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 f9f3 	bl	80070bc <RCCEx_PLL3_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cda:	e005      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce0:	e002      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005cee:	4b4d      	ldr	r3, [pc, #308]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfa:	494a      	ldr	r1, [pc, #296]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	650b      	str	r3, [r1, #80]	; 0x50
 8005d00:	e001      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d049      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d1c:	d030      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d22:	d82a      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d28:	d02c      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005d2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d2e:	d824      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d34:	d018      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3a:	d81e      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d44:	d007      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d46:	e018      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d48:	4b36      	ldr	r3, [pc, #216]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a35      	ldr	r2, [pc, #212]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d54:	e017      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 f8fb 	bl	8006f58 <RCCEx_PLL2_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d66:	e00e      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3324      	adds	r3, #36	; 0x24
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 f9a4 	bl	80070bc <RCCEx_PLL3_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d78:	e005      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d7e:	e002      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d80:	bf00      	nop
 8005d82:	e000      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d8c:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d9a:	4922      	ldr	r1, [pc, #136]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	658b      	str	r3, [r1, #88]	; 0x58
 8005da0:	e001      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d04b      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005db8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dbc:	d030      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dc2:	d82a      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005dc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dc8:	d02e      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005dca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dce:	d824      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dd4:	d018      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005dd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dda:	d81e      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005de4:	d007      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005de6:	e018      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de8:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005df4:	e019      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 f8ab 	bl	8006f58 <RCCEx_PLL2_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e06:	e010      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3324      	adds	r3, #36	; 0x24
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 f954 	bl	80070bc <RCCEx_PLL3_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e18:	e007      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1e:	e004      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005e20:	bf00      	nop
 8005e22:	e002      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e24:	58024400 	.word	0x58024400
      break;
 8005e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e30:	4b99      	ldr	r3, [pc, #612]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e3e:	4996      	ldr	r1, [pc, #600]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	658b      	str	r3, [r1, #88]	; 0x58
 8005e44:	e001      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d032      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5a:	2b30      	cmp	r3, #48	; 0x30
 8005e5c:	d01c      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005e5e:	2b30      	cmp	r3, #48	; 0x30
 8005e60:	d817      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d00c      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d813      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d10f      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e72:	4b89      	ldr	r3, [pc, #548]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	4a88      	ldr	r2, [pc, #544]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e7e:	e00e      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	2102      	movs	r1, #2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f866 	bl	8006f58 <RCCEx_PLL2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e90:	e005      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
      break;
 8005e96:	e002      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005e98:	bf00      	nop
 8005e9a:	e000      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ea4:	4b7c      	ldr	r3, [pc, #496]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb0:	4979      	ldr	r1, [pc, #484]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005eb6:	e001      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d047      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ed0:	d030      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ed6:	d82a      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005ed8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005edc:	d02c      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005ede:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ee2:	d824      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee8:	d018      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	d81e      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef8:	d007      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005efa:	e018      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005efc:	4b66      	ldr	r3, [pc, #408]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	4a65      	ldr	r2, [pc, #404]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f08:	e017      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 f821 	bl	8006f58 <RCCEx_PLL2_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f1a:	e00e      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3324      	adds	r3, #36	; 0x24
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 f8ca 	bl	80070bc <RCCEx_PLL3_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f2c:	e005      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]
      break;
 8005f32:	e002      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f40:	4b55      	ldr	r3, [pc, #340]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4c:	4952      	ldr	r1, [pc, #328]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	650b      	str	r3, [r1, #80]	; 0x50
 8005f52:	e001      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d049      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f6c:	d02e      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005f6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f72:	d828      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f78:	d02a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005f7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f7e:	d822      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f84:	d026      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005f86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f8a:	d81c      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f90:	d010      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f96:	d816      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01d      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa0:	d111      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 ffd5 	bl	8006f58 <RCCEx_PLL2_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fb2:	e012      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3324      	adds	r3, #36	; 0x24
 8005fb8:	2101      	movs	r1, #1
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 f87e 	bl	80070bc <RCCEx_PLL3_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fc4:	e009      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fca:	e006      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005fcc:	bf00      	nop
 8005fce:	e004      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005fd0:	bf00      	nop
 8005fd2:	e002      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005fd4:	bf00      	nop
 8005fd6:	e000      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d109      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fe0:	4b2d      	ldr	r3, [pc, #180]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	492a      	ldr	r1, [pc, #168]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ff2:	e001      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d04d      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800600a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800600e:	d02e      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006014:	d828      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d02a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d822      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006022:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006026:	d026      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006028:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800602c:	d81c      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800602e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006032:	d010      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006038:	d816      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01d      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800603e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006042:	d111      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	2101      	movs	r1, #1
 800604a:	4618      	mov	r0, r3
 800604c:	f000 ff84 	bl	8006f58 <RCCEx_PLL2_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006054:	e012      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3324      	adds	r3, #36	; 0x24
 800605a:	2101      	movs	r1, #1
 800605c:	4618      	mov	r0, r3
 800605e:	f001 f82d 	bl	80070bc <RCCEx_PLL3_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006066:	e009      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
      break;
 800606c:	e006      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800606e:	bf00      	nop
 8006070:	e004      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006072:	bf00      	nop
 8006074:	e002      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006076:	bf00      	nop
 8006078:	e000      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800607a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10c      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006086:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006090:	4901      	ldr	r1, [pc, #4]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006092:	4313      	orrs	r3, r2
 8006094:	658b      	str	r3, [r1, #88]	; 0x58
 8006096:	e003      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d02f      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b4:	d00e      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80060b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ba:	d814      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d015      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80060c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060c4:	d10f      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c6:	4baf      	ldr	r3, [pc, #700]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	4aae      	ldr	r2, [pc, #696]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80060d2:	e00c      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3304      	adds	r3, #4
 80060d8:	2101      	movs	r1, #1
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 ff3c 	bl	8006f58 <RCCEx_PLL2_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80060e4:	e003      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ea:	e000      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80060ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060f4:	4ba3      	ldr	r3, [pc, #652]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006100:	49a0      	ldr	r1, [pc, #640]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006102:	4313      	orrs	r3, r2
 8006104:	650b      	str	r3, [r1, #80]	; 0x50
 8006106:	e001      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d032      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611c:	2b03      	cmp	r3, #3
 800611e:	d81b      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	0800615f 	.word	0x0800615f
 800612c:	08006139 	.word	0x08006139
 8006130:	08006147 	.word	0x08006147
 8006134:	0800615f 	.word	0x0800615f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006138:	4b92      	ldr	r3, [pc, #584]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a91      	ldr	r2, [pc, #580]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800613e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006144:	e00c      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	2102      	movs	r1, #2
 800614c:	4618      	mov	r0, r3
 800614e:	f000 ff03 	bl	8006f58 <RCCEx_PLL2_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006156:	e003      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	75fb      	strb	r3, [r7, #23]
      break;
 800615c:	e000      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800615e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006166:	4b87      	ldr	r3, [pc, #540]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616a:	f023 0203 	bic.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	4984      	ldr	r1, [pc, #528]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006174:	4313      	orrs	r3, r2
 8006176:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006178:	e001      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 8086 	beq.w	8006298 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800618c:	4b7e      	ldr	r3, [pc, #504]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7d      	ldr	r2, [pc, #500]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006196:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006198:	f7fb fade 	bl	8001758 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800619e:	e009      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a0:	f7fb fada 	bl	8001758 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	; 0x64
 80061ac:	d902      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	75fb      	strb	r3, [r7, #23]
        break;
 80061b2:	e005      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b4:	4b74      	ldr	r3, [pc, #464]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0ef      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d166      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061c6:	4b6f      	ldr	r3, [pc, #444]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061d0:	4053      	eors	r3, r2
 80061d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d013      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061da:	4b6a      	ldr	r3, [pc, #424]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061e4:	4b67      	ldr	r3, [pc, #412]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e8:	4a66      	ldr	r2, [pc, #408]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061f0:	4b64      	ldr	r3, [pc, #400]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	4a63      	ldr	r2, [pc, #396]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061fc:	4a61      	ldr	r2, [pc, #388]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620c:	d115      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620e:	f7fb faa3 	bl	8001758 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006214:	e00b      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006216:	f7fb fa9f 	bl	8001758 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	f241 3288 	movw	r2, #5000	; 0x1388
 8006224:	4293      	cmp	r3, r2
 8006226:	d902      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	75fb      	strb	r3, [r7, #23]
            break;
 800622c:	e005      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800622e:	4b55      	ldr	r3, [pc, #340]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0ed      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d126      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624e:	d10d      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006250:	4b4c      	ldr	r3, [pc, #304]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800625e:	0919      	lsrs	r1, r3, #4
 8006260:	4b4a      	ldr	r3, [pc, #296]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006262:	400b      	ands	r3, r1
 8006264:	4947      	ldr	r1, [pc, #284]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006266:	4313      	orrs	r3, r2
 8006268:	610b      	str	r3, [r1, #16]
 800626a:	e005      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800626c:	4b45      	ldr	r3, [pc, #276]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	4a44      	ldr	r2, [pc, #272]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006272:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006276:	6113      	str	r3, [r2, #16]
 8006278:	4b42      	ldr	r3, [pc, #264]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800627a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006286:	493f      	ldr	r1, [pc, #252]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006288:	4313      	orrs	r3, r2
 800628a:	670b      	str	r3, [r1, #112]	; 0x70
 800628c:	e004      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	75bb      	strb	r3, [r7, #22]
 8006292:	e001      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8085 	beq.w	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062aa:	2b28      	cmp	r3, #40	; 0x28
 80062ac:	d866      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	08006391 	.word	0x08006391
 80062b8:	0800637d 	.word	0x0800637d
 80062bc:	0800637d 	.word	0x0800637d
 80062c0:	0800637d 	.word	0x0800637d
 80062c4:	0800637d 	.word	0x0800637d
 80062c8:	0800637d 	.word	0x0800637d
 80062cc:	0800637d 	.word	0x0800637d
 80062d0:	0800637d 	.word	0x0800637d
 80062d4:	08006359 	.word	0x08006359
 80062d8:	0800637d 	.word	0x0800637d
 80062dc:	0800637d 	.word	0x0800637d
 80062e0:	0800637d 	.word	0x0800637d
 80062e4:	0800637d 	.word	0x0800637d
 80062e8:	0800637d 	.word	0x0800637d
 80062ec:	0800637d 	.word	0x0800637d
 80062f0:	0800637d 	.word	0x0800637d
 80062f4:	0800636b 	.word	0x0800636b
 80062f8:	0800637d 	.word	0x0800637d
 80062fc:	0800637d 	.word	0x0800637d
 8006300:	0800637d 	.word	0x0800637d
 8006304:	0800637d 	.word	0x0800637d
 8006308:	0800637d 	.word	0x0800637d
 800630c:	0800637d 	.word	0x0800637d
 8006310:	0800637d 	.word	0x0800637d
 8006314:	08006391 	.word	0x08006391
 8006318:	0800637d 	.word	0x0800637d
 800631c:	0800637d 	.word	0x0800637d
 8006320:	0800637d 	.word	0x0800637d
 8006324:	0800637d 	.word	0x0800637d
 8006328:	0800637d 	.word	0x0800637d
 800632c:	0800637d 	.word	0x0800637d
 8006330:	0800637d 	.word	0x0800637d
 8006334:	08006391 	.word	0x08006391
 8006338:	0800637d 	.word	0x0800637d
 800633c:	0800637d 	.word	0x0800637d
 8006340:	0800637d 	.word	0x0800637d
 8006344:	0800637d 	.word	0x0800637d
 8006348:	0800637d 	.word	0x0800637d
 800634c:	0800637d 	.word	0x0800637d
 8006350:	0800637d 	.word	0x0800637d
 8006354:	08006391 	.word	0x08006391
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	2101      	movs	r1, #1
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fdfa 	bl	8006f58 <RCCEx_PLL2_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006368:	e013      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3324      	adds	r3, #36	; 0x24
 800636e:	2101      	movs	r1, #1
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fea3 	bl	80070bc <RCCEx_PLL3_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800637a:	e00a      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]
      break;
 8006380:	e007      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006382:	bf00      	nop
 8006384:	58024400 	.word	0x58024400
 8006388:	58024800 	.word	0x58024800
 800638c:	00ffffcf 	.word	0x00ffffcf
      break;
 8006390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d109      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006398:	4b96      	ldr	r3, [pc, #600]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a4:	4993      	ldr	r1, [pc, #588]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	654b      	str	r3, [r1, #84]	; 0x54
 80063aa:	e001      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d038      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c0:	2b05      	cmp	r3, #5
 80063c2:	d821      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	0800640f 	.word	0x0800640f
 80063d0:	080063e5 	.word	0x080063e5
 80063d4:	080063f7 	.word	0x080063f7
 80063d8:	0800640f 	.word	0x0800640f
 80063dc:	0800640f 	.word	0x0800640f
 80063e0:	0800640f 	.word	0x0800640f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	2101      	movs	r1, #1
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fdb4 	bl	8006f58 <RCCEx_PLL2_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80063f4:	e00c      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3324      	adds	r3, #36	; 0x24
 80063fa:	2101      	movs	r1, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fe5d 	bl	80070bc <RCCEx_PLL3_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006406:	e003      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	75fb      	strb	r3, [r7, #23]
      break;
 800640c:	e000      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800640e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006416:	4b77      	ldr	r3, [pc, #476]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	f023 0207 	bic.w	r2, r3, #7
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006422:	4974      	ldr	r1, [pc, #464]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006424:	4313      	orrs	r3, r2
 8006426:	654b      	str	r3, [r1, #84]	; 0x54
 8006428:	e001      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d03a      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	2b05      	cmp	r3, #5
 8006442:	d821      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006444:	a201      	add	r2, pc, #4	; (adr r2, 800644c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	0800648f 	.word	0x0800648f
 8006450:	08006465 	.word	0x08006465
 8006454:	08006477 	.word	0x08006477
 8006458:	0800648f 	.word	0x0800648f
 800645c:	0800648f 	.word	0x0800648f
 8006460:	0800648f 	.word	0x0800648f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	2101      	movs	r1, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fd74 	bl	8006f58 <RCCEx_PLL2_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006474:	e00c      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3324      	adds	r3, #36	; 0x24
 800647a:	2101      	movs	r1, #1
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fe1d 	bl	80070bc <RCCEx_PLL3_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006486:	e003      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
      break;
 800648c:	e000      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800648e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006496:	4b57      	ldr	r3, [pc, #348]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649a:	f023 0207 	bic.w	r2, r3, #7
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	4953      	ldr	r1, [pc, #332]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	658b      	str	r3, [r1, #88]	; 0x58
 80064aa:	e001      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d04b      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064c6:	d02e      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80064c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064cc:	d828      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d2:	d02a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d8:	d822      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80064da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064de:	d026      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80064e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064e4:	d81c      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80064e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ea:	d010      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80064ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f0:	d816      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01d      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80064f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064fa:	d111      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fd28 	bl	8006f58 <RCCEx_PLL2_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800650c:	e012      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	2102      	movs	r1, #2
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fdd1 	bl	80070bc <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800651e:	e009      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
      break;
 8006524:	e006      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006526:	bf00      	nop
 8006528:	e004      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800652a:	bf00      	nop
 800652c:	e002      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800653a:	4b2e      	ldr	r3, [pc, #184]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006548:	492a      	ldr	r1, [pc, #168]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	654b      	str	r3, [r1, #84]	; 0x54
 800654e:	e001      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d04d      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006566:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800656a:	d02e      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800656c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006570:	d828      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006576:	d02a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657c:	d822      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800657e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006582:	d026      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006588:	d81c      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800658a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800658e:	d010      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006594:	d816      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01d      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800659a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659e:	d111      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3304      	adds	r3, #4
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fcd6 	bl	8006f58 <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065b0:	e012      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3324      	adds	r3, #36	; 0x24
 80065b6:	2102      	movs	r1, #2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fd7f 	bl	80070bc <RCCEx_PLL3_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065c2:	e009      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
      break;
 80065c8:	e006      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80065ca:	bf00      	nop
 80065cc:	e004      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80065ce:	bf00      	nop
 80065d0:	e002      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80065d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10c      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065de:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065ec:	4901      	ldr	r1, [pc, #4]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	658b      	str	r3, [r1, #88]	; 0x58
 80065f2:	e003      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80065f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b00      	cmp	r3, #0
 8006606:	d04b      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800660e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006612:	d02e      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006614:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006618:	d828      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800661a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661e:	d02a      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006624:	d822      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006626:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800662a:	d026      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800662c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006630:	d81c      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006636:	d010      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800663c:	d816      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01d      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	d111      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3304      	adds	r3, #4
 800664c:	2100      	movs	r1, #0
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fc82 	bl	8006f58 <RCCEx_PLL2_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006658:	e012      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3324      	adds	r3, #36	; 0x24
 800665e:	2102      	movs	r1, #2
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fd2b 	bl	80070bc <RCCEx_PLL3_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800666a:	e009      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	75fb      	strb	r3, [r7, #23]
      break;
 8006670:	e006      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006672:	bf00      	nop
 8006674:	e004      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006676:	bf00      	nop
 8006678:	e002      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800667e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006686:	4b9d      	ldr	r3, [pc, #628]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006694:	4999      	ldr	r1, [pc, #612]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006696:	4313      	orrs	r3, r2
 8006698:	658b      	str	r3, [r1, #88]	; 0x58
 800669a:	e001      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01a      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b6:	d10a      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	2102      	movs	r1, #2
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fcfc 	bl	80070bc <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066ce:	4b8b      	ldr	r3, [pc, #556]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066dc:	4987      	ldr	r1, [pc, #540]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0310 	and.w	r3, r3, #16
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01a      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f8:	d10a      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3324      	adds	r3, #36	; 0x24
 80066fe:	2102      	movs	r1, #2
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fcdb 	bl	80070bc <RCCEx_PLL3_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006710:	4b7a      	ldr	r3, [pc, #488]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800671e:	4977      	ldr	r1, [pc, #476]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006720:	4313      	orrs	r3, r2
 8006722:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d034      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800673a:	d01d      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800673c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006740:	d817      	bhi.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674a:	d009      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800674c:	e011      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3304      	adds	r3, #4
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fbff 	bl	8006f58 <RCCEx_PLL2_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800675e:	e00c      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3324      	adds	r3, #36	; 0x24
 8006764:	2102      	movs	r1, #2
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fca8 	bl	80070bc <RCCEx_PLL3_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006770:	e003      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
      break;
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006780:	4b5e      	ldr	r3, [pc, #376]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006784:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800678e:	495b      	ldr	r1, [pc, #364]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006790:	4313      	orrs	r3, r2
 8006792:	658b      	str	r3, [r1, #88]	; 0x58
 8006794:	e001      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d033      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067b0:	d01c      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80067b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067b6:	d816      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80067b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067bc:	d003      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80067be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c2:	d007      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80067c4:	e00f      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c6:	4b4d      	ldr	r3, [pc, #308]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4a4c      	ldr	r2, [pc, #304]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80067d2:	e00c      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3324      	adds	r3, #36	; 0x24
 80067d8:	2101      	movs	r1, #1
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fc6e 	bl	80070bc <RCCEx_PLL3_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80067e4:	e003      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80067ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067f4:	4b41      	ldr	r3, [pc, #260]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006802:	493e      	ldr	r1, [pc, #248]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006804:	4313      	orrs	r3, r2
 8006806:	654b      	str	r3, [r1, #84]	; 0x54
 8006808:	e001      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d029      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006826:	d007      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006828:	e00f      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800682a:	4b34      	ldr	r3, [pc, #208]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	4a33      	ldr	r2, [pc, #204]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006836:	e00b      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	2102      	movs	r1, #2
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fb8a 	bl	8006f58 <RCCEx_PLL2_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006848:	e002      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	75fb      	strb	r3, [r7, #23]
      break;
 800684e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006856:	4b29      	ldr	r3, [pc, #164]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006862:	4926      	ldr	r1, [pc, #152]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006864:	4313      	orrs	r3, r2
 8006866:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006868:	e001      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3324      	adds	r3, #36	; 0x24
 800687e:	2102      	movs	r1, #2
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fc1b 	bl	80070bc <RCCEx_PLL3_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d033      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a4:	d017      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80068a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068aa:	d811      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80068ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b0:	d013      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80068b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b6:	d80b      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d010      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80068bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c0:	d106      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c2:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80068ce:	e007      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
      break;
 80068d4:	e004      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80068d6:	bf00      	nop
 80068d8:	e002      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80068de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10c      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068f2:	4902      	ldr	r1, [pc, #8]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	654b      	str	r3, [r1, #84]	; 0x54
 80068f8:	e004      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80068fa:	bf00      	nop
 80068fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006910:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691c:	492e      	ldr	r1, [pc, #184]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800691e:	4313      	orrs	r3, r2
 8006920:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800692e:	4b2a      	ldr	r3, [pc, #168]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800693c:	4926      	ldr	r1, [pc, #152]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800693e:	4313      	orrs	r3, r2
 8006940:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d008      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800694e:	4b22      	ldr	r3, [pc, #136]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006952:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695a:	491f      	ldr	r1, [pc, #124]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800695c:	4313      	orrs	r3, r2
 800695e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00d      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800696c:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	4a19      	ldr	r2, [pc, #100]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006972:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006976:	6113      	str	r3, [r2, #16]
 8006978:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006982:	4915      	ldr	r1, [pc, #84]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006984:	4313      	orrs	r3, r2
 8006986:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	da08      	bge.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006990:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006994:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699c:	490e      	ldr	r1, [pc, #56]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069ae:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069bc:	4906      	ldr	r1, [pc, #24]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80069c2:	7dbb      	ldrb	r3, [r7, #22]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e000      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	58024400 	.word	0x58024400

080069dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069e0:	f7ff f85a 	bl	8005a98 <HAL_RCC_GetHCLKFreq>
 80069e4:	4602      	mov	r2, r0
 80069e6:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	091b      	lsrs	r3, r3, #4
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	4904      	ldr	r1, [pc, #16]	; (8006a04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069f2:	5ccb      	ldrb	r3, [r1, r3]
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	58024400 	.word	0x58024400
 8006a04:	08009808 	.word	0x08009808

08006a08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	; 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a10:	4ba1      	ldr	r3, [pc, #644]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006a1a:	4b9f      	ldr	r3, [pc, #636]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	0b1b      	lsrs	r3, r3, #12
 8006a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a26:	4b9c      	ldr	r3, [pc, #624]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	091b      	lsrs	r3, r3, #4
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a32:	4b99      	ldr	r3, [pc, #612]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a36:	08db      	lsrs	r3, r3, #3
 8006a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8111 	beq.w	8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	f000 8083 	beq.w	8006b64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	f200 80a1 	bhi.w	8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d056      	beq.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a72:	e099      	b.n	8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a74:	4b88      	ldr	r3, [pc, #544]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d02d      	beq.n	8006adc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a80:	4b85      	ldr	r3, [pc, #532]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	4a84      	ldr	r2, [pc, #528]	; (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a90:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	ee07 3a90 	vmov	s15, r3
 8006a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aaa:	4b7b      	ldr	r3, [pc, #492]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006abe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ada:	e087      	b.n	8006bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aee:	4b6a      	ldr	r3, [pc, #424]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b1e:	e065      	b.n	8006bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b32:	4b59      	ldr	r3, [pc, #356]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b62:	e043      	b.n	8006bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b76:	4b48      	ldr	r3, [pc, #288]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ba6:	e021      	b.n	8006bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	4b37      	ldr	r3, [pc, #220]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006bec:	4b2a      	ldr	r3, [pc, #168]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	0a5b      	lsrs	r3, r3, #9
 8006bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c12:	ee17 2a90 	vmov	r2, s15
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c1a:	4b1f      	ldr	r3, [pc, #124]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c40:	ee17 2a90 	vmov	r2, s15
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006c48:	4b13      	ldr	r3, [pc, #76]	; (8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	0e1b      	lsrs	r3, r3, #24
 8006c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6e:	ee17 2a90 	vmov	r2, s15
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c76:	e008      	b.n	8006c8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	609a      	str	r2, [r3, #8]
}
 8006c8a:	bf00      	nop
 8006c8c:	3724      	adds	r7, #36	; 0x24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	03d09000 	.word	0x03d09000
 8006ca0:	46000000 	.word	0x46000000
 8006ca4:	4c742400 	.word	0x4c742400
 8006ca8:	4a742400 	.word	0x4a742400
 8006cac:	4bbebc20 	.word	0x4bbebc20

08006cb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b089      	sub	sp, #36	; 0x24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cb8:	4ba1      	ldr	r3, [pc, #644]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006cc2:	4b9f      	ldr	r3, [pc, #636]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	0d1b      	lsrs	r3, r3, #20
 8006cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ccc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cce:	4b9c      	ldr	r3, [pc, #624]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	0a1b      	lsrs	r3, r3, #8
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006cda:	4b99      	ldr	r3, [pc, #612]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	08db      	lsrs	r3, r3, #3
 8006ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	fb02 f303 	mul.w	r3, r2, r3
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8111 	beq.w	8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	f000 8083 	beq.w	8006e0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	f200 80a1 	bhi.w	8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d056      	beq.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d1a:	e099      	b.n	8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d1c:	4b88      	ldr	r3, [pc, #544]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d02d      	beq.n	8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d28:	4b85      	ldr	r3, [pc, #532]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	4a84      	ldr	r2, [pc, #528]	; (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
 8006d38:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b7b      	ldr	r3, [pc, #492]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d82:	e087      	b.n	8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b6a      	ldr	r3, [pc, #424]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc6:	e065      	b.n	8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dda:	4b59      	ldr	r3, [pc, #356]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e0a:	e043      	b.n	8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1e:	4b48      	ldr	r3, [pc, #288]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e4e:	e021      	b.n	8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e62:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006e94:	4b2a      	ldr	r3, [pc, #168]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	0a5b      	lsrs	r3, r3, #9
 8006e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eba:	ee17 2a90 	vmov	r2, s15
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	0c1b      	lsrs	r3, r3, #16
 8006ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee8:	ee17 2a90 	vmov	r2, s15
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006ef0:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	0e1b      	lsrs	r3, r3, #24
 8006ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f16:	ee17 2a90 	vmov	r2, s15
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f1e:	e008      	b.n	8006f32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	609a      	str	r2, [r3, #8]
}
 8006f32:	bf00      	nop
 8006f34:	3724      	adds	r7, #36	; 0x24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
 8006f44:	03d09000 	.word	0x03d09000
 8006f48:	46000000 	.word	0x46000000
 8006f4c:	4c742400 	.word	0x4c742400
 8006f50:	4a742400 	.word	0x4a742400
 8006f54:	4bbebc20 	.word	0x4bbebc20

08006f58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f66:	4b53      	ldr	r3, [pc, #332]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d101      	bne.n	8006f76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e099      	b.n	80070aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f76:	4b4f      	ldr	r3, [pc, #316]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a4e      	ldr	r2, [pc, #312]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8006f7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f82:	f7fa fbe9 	bl	8001758 <HAL_GetTick>
 8006f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f88:	e008      	b.n	8006f9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f8a:	f7fa fbe5 	bl	8001758 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e086      	b.n	80070aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f9c:	4b45      	ldr	r3, [pc, #276]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f0      	bne.n	8006f8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fa8:	4b42      	ldr	r3, [pc, #264]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8006faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	031b      	lsls	r3, r3, #12
 8006fb6:	493f      	ldr	r1, [pc, #252]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	628b      	str	r3, [r1, #40]	; 0x28
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	025b      	lsls	r3, r3, #9
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	041b      	lsls	r3, r3, #16
 8006fda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	061b      	lsls	r3, r3, #24
 8006fe8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fec:	4931      	ldr	r1, [pc, #196]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ff2:	4b30      	ldr	r3, [pc, #192]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	492d      	ldr	r1, [pc, #180]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007000:	4313      	orrs	r3, r2
 8007002:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007004:	4b2b      	ldr	r3, [pc, #172]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	f023 0220 	bic.w	r2, r3, #32
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	4928      	ldr	r1, [pc, #160]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007012:	4313      	orrs	r3, r2
 8007014:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007016:	4b27      	ldr	r3, [pc, #156]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	4a26      	ldr	r2, [pc, #152]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 800701c:	f023 0310 	bic.w	r3, r3, #16
 8007020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007022:	4b24      	ldr	r3, [pc, #144]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <RCCEx_PLL2_Config+0x160>)
 8007028:	4013      	ands	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	69d2      	ldr	r2, [r2, #28]
 800702e:	00d2      	lsls	r2, r2, #3
 8007030:	4920      	ldr	r1, [pc, #128]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007036:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 800703c:	f043 0310 	orr.w	r3, r3, #16
 8007040:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007048:	4b1a      	ldr	r3, [pc, #104]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 800704e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007054:	e00f      	b.n	8007076 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d106      	bne.n	800706a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800705c:	4b15      	ldr	r3, [pc, #84]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007066:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007068:	e005      	b.n	8007076 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	4a11      	ldr	r2, [pc, #68]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007074:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007076:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a0e      	ldr	r2, [pc, #56]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 800707c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007082:	f7fa fb69 	bl	8001758 <HAL_GetTick>
 8007086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007088:	e008      	b.n	800709c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800708a:	f7fa fb65 	bl	8001758 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <RCCEx_PLL2_Config+0x15c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0f0      	beq.n	800708a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	58024400 	.word	0x58024400
 80070b8:	ffff0007 	.word	0xffff0007

080070bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070ca:	4b53      	ldr	r3, [pc, #332]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d101      	bne.n	80070da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e099      	b.n	800720e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070da:	4b4f      	ldr	r3, [pc, #316]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a4e      	ldr	r2, [pc, #312]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80070e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e6:	f7fa fb37 	bl	8001758 <HAL_GetTick>
 80070ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070ec:	e008      	b.n	8007100 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070ee:	f7fa fb33 	bl	8001758 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e086      	b.n	800720e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007100:	4b45      	ldr	r3, [pc, #276]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1f0      	bne.n	80070ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800710c:	4b42      	ldr	r3, [pc, #264]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	051b      	lsls	r3, r3, #20
 800711a:	493f      	ldr	r1, [pc, #252]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 800711c:	4313      	orrs	r3, r2
 800711e:	628b      	str	r3, [r1, #40]	; 0x28
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	3b01      	subs	r3, #1
 8007126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	3b01      	subs	r3, #1
 8007130:	025b      	lsls	r3, r3, #9
 8007132:	b29b      	uxth	r3, r3
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	3b01      	subs	r3, #1
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	3b01      	subs	r3, #1
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007150:	4931      	ldr	r1, [pc, #196]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007152:	4313      	orrs	r3, r2
 8007154:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007156:	4b30      	ldr	r3, [pc, #192]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	492d      	ldr	r1, [pc, #180]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007164:	4313      	orrs	r3, r2
 8007166:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007168:	4b2b      	ldr	r3, [pc, #172]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	4928      	ldr	r1, [pc, #160]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007176:	4313      	orrs	r3, r2
 8007178:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800717a:	4b27      	ldr	r3, [pc, #156]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	4a26      	ldr	r2, [pc, #152]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007184:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007186:	4b24      	ldr	r3, [pc, #144]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800718a:	4b24      	ldr	r3, [pc, #144]	; (800721c <RCCEx_PLL3_Config+0x160>)
 800718c:	4013      	ands	r3, r2
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	69d2      	ldr	r2, [r2, #28]
 8007192:	00d2      	lsls	r2, r2, #3
 8007194:	4920      	ldr	r1, [pc, #128]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007196:	4313      	orrs	r3, r2
 8007198:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800719a:	4b1f      	ldr	r3, [pc, #124]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	4a1e      	ldr	r2, [pc, #120]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d106      	bne.n	80071ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071ac:	4b1a      	ldr	r3, [pc, #104]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	4a19      	ldr	r2, [pc, #100]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071b8:	e00f      	b.n	80071da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d106      	bne.n	80071ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071c0:	4b15      	ldr	r3, [pc, #84]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	4a14      	ldr	r2, [pc, #80]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071cc:	e005      	b.n	80071da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	4a11      	ldr	r2, [pc, #68]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071da:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a0e      	ldr	r2, [pc, #56]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 80071e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e6:	f7fa fab7 	bl	8001758 <HAL_GetTick>
 80071ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071ec:	e008      	b.n	8007200 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071ee:	f7fa fab3 	bl	8001758 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e006      	b.n	800720e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <RCCEx_PLL3_Config+0x15c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0f0      	beq.n	80071ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	58024400 	.word	0x58024400
 800721c:	ffff0007 	.word	0xffff0007

08007220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e049      	b.n	80072c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7f9 ffd0 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4610      	mov	r0, r2
 8007260:	f000 f97c 	bl	800755c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d122      	bne.n	800732a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d11b      	bne.n	800732a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f06f 0202 	mvn.w	r2, #2
 80072fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f905 	bl	8007520 <HAL_TIM_IC_CaptureCallback>
 8007316:	e005      	b.n	8007324 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f8f7 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f908 	bl	8007534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b04      	cmp	r3, #4
 8007336:	d122      	bne.n	800737e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b04      	cmp	r3, #4
 8007344:	d11b      	bne.n	800737e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f06f 0204 	mvn.w	r2, #4
 800734e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f8db 	bl	8007520 <HAL_TIM_IC_CaptureCallback>
 800736a:	e005      	b.n	8007378 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8cd 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f8de 	bl	8007534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b08      	cmp	r3, #8
 800738a:	d122      	bne.n	80073d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b08      	cmp	r3, #8
 8007398:	d11b      	bne.n	80073d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f06f 0208 	mvn.w	r2, #8
 80073a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2204      	movs	r2, #4
 80073a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8b1 	bl	8007520 <HAL_TIM_IC_CaptureCallback>
 80073be:	e005      	b.n	80073cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8a3 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f8b4 	bl	8007534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b10      	cmp	r3, #16
 80073de:	d122      	bne.n	8007426 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d11b      	bne.n	8007426 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f06f 0210 	mvn.w	r2, #16
 80073f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2208      	movs	r2, #8
 80073fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f887 	bl	8007520 <HAL_TIM_IC_CaptureCallback>
 8007412:	e005      	b.n	8007420 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f879 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f88a 	bl	8007534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b01      	cmp	r3, #1
 8007432:	d10e      	bne.n	8007452 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b01      	cmp	r3, #1
 8007440:	d107      	bne.n	8007452 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f06f 0201 	mvn.w	r2, #1
 800744a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7f9 fe73 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745c:	2b80      	cmp	r3, #128	; 0x80
 800745e:	d10e      	bne.n	800747e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746a:	2b80      	cmp	r3, #128	; 0x80
 800746c:	d107      	bne.n	800747e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9a1 	bl	80077c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748c:	d10e      	bne.n	80074ac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007498:	2b80      	cmp	r3, #128	; 0x80
 800749a:	d107      	bne.n	80074ac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f994 	bl	80077d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d10e      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	d107      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f838 	bl	8007548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d10e      	bne.n	8007504 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d107      	bne.n	8007504 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0220 	mvn.w	r2, #32
 80074fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f954 	bl	80077ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a40      	ldr	r2, [pc, #256]	; (8007670 <TIM_Base_SetConfig+0x114>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d013      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757a:	d00f      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3d      	ldr	r2, [pc, #244]	; (8007674 <TIM_Base_SetConfig+0x118>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00b      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a3c      	ldr	r2, [pc, #240]	; (8007678 <TIM_Base_SetConfig+0x11c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d007      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a3b      	ldr	r2, [pc, #236]	; (800767c <TIM_Base_SetConfig+0x120>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a3a      	ldr	r2, [pc, #232]	; (8007680 <TIM_Base_SetConfig+0x124>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d108      	bne.n	80075ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2f      	ldr	r2, [pc, #188]	; (8007670 <TIM_Base_SetConfig+0x114>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01f      	beq.n	80075f6 <TIM_Base_SetConfig+0x9a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075bc:	d01b      	beq.n	80075f6 <TIM_Base_SetConfig+0x9a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a2c      	ldr	r2, [pc, #176]	; (8007674 <TIM_Base_SetConfig+0x118>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d017      	beq.n	80075f6 <TIM_Base_SetConfig+0x9a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2b      	ldr	r2, [pc, #172]	; (8007678 <TIM_Base_SetConfig+0x11c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <TIM_Base_SetConfig+0x9a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2a      	ldr	r2, [pc, #168]	; (800767c <TIM_Base_SetConfig+0x120>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00f      	beq.n	80075f6 <TIM_Base_SetConfig+0x9a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a29      	ldr	r2, [pc, #164]	; (8007680 <TIM_Base_SetConfig+0x124>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_Base_SetConfig+0x9a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a28      	ldr	r2, [pc, #160]	; (8007684 <TIM_Base_SetConfig+0x128>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_Base_SetConfig+0x9a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a27      	ldr	r2, [pc, #156]	; (8007688 <TIM_Base_SetConfig+0x12c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_Base_SetConfig+0x9a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a26      	ldr	r2, [pc, #152]	; (800768c <TIM_Base_SetConfig+0x130>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d108      	bne.n	8007608 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a10      	ldr	r2, [pc, #64]	; (8007670 <TIM_Base_SetConfig+0x114>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00f      	beq.n	8007654 <TIM_Base_SetConfig+0xf8>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a12      	ldr	r2, [pc, #72]	; (8007680 <TIM_Base_SetConfig+0x124>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00b      	beq.n	8007654 <TIM_Base_SetConfig+0xf8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a11      	ldr	r2, [pc, #68]	; (8007684 <TIM_Base_SetConfig+0x128>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d007      	beq.n	8007654 <TIM_Base_SetConfig+0xf8>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a10      	ldr	r2, [pc, #64]	; (8007688 <TIM_Base_SetConfig+0x12c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_Base_SetConfig+0xf8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a0f      	ldr	r2, [pc, #60]	; (800768c <TIM_Base_SetConfig+0x130>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d103      	bne.n	800765c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	615a      	str	r2, [r3, #20]
}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40010000 	.word	0x40010000
 8007674:	40000400 	.word	0x40000400
 8007678:	40000800 	.word	0x40000800
 800767c:	40000c00 	.word	0x40000c00
 8007680:	40010400 	.word	0x40010400
 8007684:	40014000 	.word	0x40014000
 8007688:	40014400 	.word	0x40014400
 800768c:	40014800 	.word	0x40014800

08007690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e06d      	b.n	8007784 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a30      	ldr	r2, [pc, #192]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d004      	beq.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a2f      	ldr	r2, [pc, #188]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d108      	bne.n	80076ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a20      	ldr	r2, [pc, #128]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d022      	beq.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771a:	d01d      	beq.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1d      	ldr	r2, [pc, #116]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d018      	beq.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1c      	ldr	r2, [pc, #112]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d013      	beq.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a1a      	ldr	r2, [pc, #104]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00e      	beq.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a15      	ldr	r2, [pc, #84]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d009      	beq.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a16      	ldr	r2, [pc, #88]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d004      	beq.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a15      	ldr	r2, [pc, #84]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d10c      	bne.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800775e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	4313      	orrs	r3, r2
 8007768:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40010000 	.word	0x40010000
 8007794:	40010400 	.word	0x40010400
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800
 80077a0:	40000c00 	.word	0x40000c00
 80077a4:	40001800 	.word	0x40001800
 80077a8:	40014000 	.word	0x40014000

080077ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e042      	b.n	8007880 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007800:	2b00      	cmp	r3, #0
 8007802:	d106      	bne.n	8007812 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7f9 fd15 	bl	800123c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2224      	movs	r2, #36	; 0x24
 8007816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0201 	bic.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fc88 	bl	8008140 <UART_SetConfig>
 8007830:	4603      	mov	r3, r0
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e022      	b.n	8007880 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 f9e4 	bl	8008c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 fa6b 	bl	8008d54 <UART_CheckIdleState>
 800787e:	4603      	mov	r3, r0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08a      	sub	sp, #40	; 0x28
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789e:	2b20      	cmp	r3, #32
 80078a0:	f040 8083 	bne.w	80079aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_UART_Transmit+0x28>
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e07b      	b.n	80079ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_UART_Transmit+0x3a>
 80078be:	2302      	movs	r3, #2
 80078c0:	e074      	b.n	80079ac <HAL_UART_Transmit+0x124>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2221      	movs	r2, #33	; 0x21
 80078d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078da:	f7f9 ff3d 	bl	8001758 <HAL_GetTick>
 80078de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f8:	d108      	bne.n	800790c <HAL_UART_Transmit+0x84>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	e003      	b.n	8007914 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800791c:	e02c      	b.n	8007978 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2200      	movs	r2, #0
 8007926:	2180      	movs	r1, #128	; 0x80
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f001 fa5e 	bl	8008dea <UART_WaitOnFlagUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e039      	b.n	80079ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800794c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	3302      	adds	r3, #2
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	e007      	b.n	8007966 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	781a      	ldrb	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	3301      	adds	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1cc      	bne.n	800791e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2200      	movs	r2, #0
 800798c:	2140      	movs	r1, #64	; 0x40
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f001 fa2b 	bl	8008dea <UART_WaitOnFlagUntilTimeout>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e006      	b.n	80079ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e000      	b.n	80079ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80079aa:	2302      	movs	r3, #2
  }
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b0ba      	sub	sp, #232	; 0xe8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079de:	f640 030f 	movw	r3, #2063	; 0x80f
 80079e2:	4013      	ands	r3, r2
 80079e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d11b      	bne.n	8007a28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f4:	f003 0320 	and.w	r3, r3, #32
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d015      	beq.n	8007a28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d105      	bne.n	8007a14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d009      	beq.n	8007a28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 835a 	beq.w	80080d2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
      }
      return;
 8007a26:	e354      	b.n	80080d2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 811f 	beq.w	8007c70 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a36:	4b8b      	ldr	r3, [pc, #556]	; (8007c64 <HAL_UART_IRQHandler+0x2b0>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d106      	bne.n	8007a4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a42:	4b89      	ldr	r3, [pc, #548]	; (8007c68 <HAL_UART_IRQHandler+0x2b4>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8112 	beq.w	8007c70 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d011      	beq.n	8007a7c <HAL_UART_IRQHandler+0xc8>
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a72:	f043 0201 	orr.w	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d011      	beq.n	8007aac <HAL_UART_IRQHandler+0xf8>
 8007a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa2:	f043 0204 	orr.w	r2, r3, #4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d011      	beq.n	8007adc <HAL_UART_IRQHandler+0x128>
 8007ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ad2:	f043 0202 	orr.w	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007af4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007af8:	4b5a      	ldr	r3, [pc, #360]	; (8007c64 <HAL_UART_IRQHandler+0x2b0>)
 8007afa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2208      	movs	r2, #8
 8007b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b0e:	f043 0208 	orr.w	r2, r3, #8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d012      	beq.n	8007b4a <HAL_UART_IRQHandler+0x196>
 8007b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00c      	beq.n	8007b4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b40:	f043 0220 	orr.w	r2, r3, #32
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 82c0 	beq.w	80080d6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d013      	beq.n	8007b8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d105      	bne.n	8007b7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	d005      	beq.n	8007bae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d04f      	beq.n	8007c4e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 face 	bl	8009150 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	d141      	bne.n	8007c46 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3308      	adds	r3, #8
 8007bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1d9      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d013      	beq.n	8007c3e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1a:	4a14      	ldr	r2, [pc, #80]	; (8007c6c <HAL_UART_IRQHandler+0x2b8>)
 8007c1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fb f864 	bl	8002cf0 <HAL_DMA_Abort_IT>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d017      	beq.n	8007c5e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3c:	e00f      	b.n	8007c5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa74 	bl	800812c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	e00b      	b.n	8007c5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa70 	bl	800812c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	e007      	b.n	8007c5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa6c 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007c5c:	e23b      	b.n	80080d6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5e:	bf00      	nop
    return;
 8007c60:	e239      	b.n	80080d6 <HAL_UART_IRQHandler+0x722>
 8007c62:	bf00      	nop
 8007c64:	10000001 	.word	0x10000001
 8007c68:	04000120 	.word	0x04000120
 8007c6c:	080093f7 	.word	0x080093f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	f040 81ce 	bne.w	8008016 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c7e:	f003 0310 	and.w	r3, r3, #16
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 81c7 	beq.w	8008016 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 81c0 	beq.w	8008016 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2210      	movs	r2, #16
 8007c9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca8:	2b40      	cmp	r3, #64	; 0x40
 8007caa:	f040 813b 	bne.w	8007f24 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a8b      	ldr	r2, [pc, #556]	; (8007ee4 <HAL_UART_IRQHandler+0x530>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d059      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a89      	ldr	r2, [pc, #548]	; (8007ee8 <HAL_UART_IRQHandler+0x534>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d053      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a87      	ldr	r2, [pc, #540]	; (8007eec <HAL_UART_IRQHandler+0x538>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d04d      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a85      	ldr	r2, [pc, #532]	; (8007ef0 <HAL_UART_IRQHandler+0x53c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d047      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a83      	ldr	r2, [pc, #524]	; (8007ef4 <HAL_UART_IRQHandler+0x540>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d041      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a81      	ldr	r2, [pc, #516]	; (8007ef8 <HAL_UART_IRQHandler+0x544>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d03b      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a7f      	ldr	r2, [pc, #508]	; (8007efc <HAL_UART_IRQHandler+0x548>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d035      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a7d      	ldr	r2, [pc, #500]	; (8007f00 <HAL_UART_IRQHandler+0x54c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d02f      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a7b      	ldr	r2, [pc, #492]	; (8007f04 <HAL_UART_IRQHandler+0x550>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d029      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a79      	ldr	r2, [pc, #484]	; (8007f08 <HAL_UART_IRQHandler+0x554>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d023      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a77      	ldr	r2, [pc, #476]	; (8007f0c <HAL_UART_IRQHandler+0x558>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d01d      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a75      	ldr	r2, [pc, #468]	; (8007f10 <HAL_UART_IRQHandler+0x55c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d017      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a73      	ldr	r2, [pc, #460]	; (8007f14 <HAL_UART_IRQHandler+0x560>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d011      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a71      	ldr	r2, [pc, #452]	; (8007f18 <HAL_UART_IRQHandler+0x564>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00b      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a6f      	ldr	r2, [pc, #444]	; (8007f1c <HAL_UART_IRQHandler+0x568>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d005      	beq.n	8007d6e <HAL_UART_IRQHandler+0x3ba>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a6d      	ldr	r2, [pc, #436]	; (8007f20 <HAL_UART_IRQHandler+0x56c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d105      	bne.n	8007d7a <HAL_UART_IRQHandler+0x3c6>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	e004      	b.n	8007d84 <HAL_UART_IRQHandler+0x3d0>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 81a4 	beq.w	80080da <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	f080 819c 	bcs.w	80080da <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007da8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db6:	f000 8086 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007de8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007df0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1da      	bne.n	8007dba <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3308      	adds	r3, #8
 8007e0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e16:	f023 0301 	bic.w	r3, r3, #1
 8007e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e1      	bne.n	8007e04 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3308      	adds	r3, #8
 8007e46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e3      	bne.n	8007e40 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e96:	f023 0310 	bic.w	r3, r3, #16
 8007e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ea8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e4      	bne.n	8007e86 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fa fbf7 	bl	80026b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7f9 f86c 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ee0:	e0fb      	b.n	80080da <HAL_UART_IRQHandler+0x726>
 8007ee2:	bf00      	nop
 8007ee4:	40020010 	.word	0x40020010
 8007ee8:	40020028 	.word	0x40020028
 8007eec:	40020040 	.word	0x40020040
 8007ef0:	40020058 	.word	0x40020058
 8007ef4:	40020070 	.word	0x40020070
 8007ef8:	40020088 	.word	0x40020088
 8007efc:	400200a0 	.word	0x400200a0
 8007f00:	400200b8 	.word	0x400200b8
 8007f04:	40020410 	.word	0x40020410
 8007f08:	40020428 	.word	0x40020428
 8007f0c:	40020440 	.word	0x40020440
 8007f10:	40020458 	.word	0x40020458
 8007f14:	40020470 	.word	0x40020470
 8007f18:	40020488 	.word	0x40020488
 8007f1c:	400204a0 	.word	0x400204a0
 8007f20:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 80cc 	beq.w	80080de <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007f46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80c7 	beq.w	80080de <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f72:	647b      	str	r3, [r7, #68]	; 0x44
 8007f74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e4      	bne.n	8007f50 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	623b      	str	r3, [r7, #32]
   return(result);
 8007f96:	6a3a      	ldr	r2, [r7, #32]
 8007f98:	4b54      	ldr	r3, [pc, #336]	; (80080ec <HAL_UART_IRQHandler+0x738>)
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007faa:	633a      	str	r2, [r7, #48]	; 0x30
 8007fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e3      	bne.n	8007f86 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0310 	bic.w	r3, r3, #16
 8007fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	69b9      	ldr	r1, [r7, #24]
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	617b      	str	r3, [r7, #20]
   return(result);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e4      	bne.n	8007fd2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7f8 ffd2 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008014:	e063      	b.n	80080de <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00e      	beq.n	8008040 <HAL_UART_IRQHandler+0x68c>
 8008022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d008      	beq.n	8008040 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008036:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fa1d 	bl	8009478 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800803e:	e051      	b.n	80080e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008048:	2b00      	cmp	r3, #0
 800804a:	d014      	beq.n	8008076 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800804c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008054:	2b00      	cmp	r3, #0
 8008056:	d105      	bne.n	8008064 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d008      	beq.n	8008076 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008068:	2b00      	cmp	r3, #0
 800806a:	d03a      	beq.n	80080e2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
    }
    return;
 8008074:	e035      	b.n	80080e2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <HAL_UART_IRQHandler+0x6e2>
 8008082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 f9c7 	bl	8009422 <UART_EndTransmit_IT>
    return;
 8008094:	e026      	b.n	80080e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d009      	beq.n	80080b6 <HAL_UART_IRQHandler+0x702>
 80080a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 f9f6 	bl	80094a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080b4:	e016      	b.n	80080e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d010      	beq.n	80080e4 <HAL_UART_IRQHandler+0x730>
 80080c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	da0c      	bge.n	80080e4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 f9de 	bl	800948c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080d0:	e008      	b.n	80080e4 <HAL_UART_IRQHandler+0x730>
      return;
 80080d2:	bf00      	nop
 80080d4:	e006      	b.n	80080e4 <HAL_UART_IRQHandler+0x730>
    return;
 80080d6:	bf00      	nop
 80080d8:	e004      	b.n	80080e4 <HAL_UART_IRQHandler+0x730>
      return;
 80080da:	bf00      	nop
 80080dc:	e002      	b.n	80080e4 <HAL_UART_IRQHandler+0x730>
      return;
 80080de:	bf00      	nop
 80080e0:	e000      	b.n	80080e4 <HAL_UART_IRQHandler+0x730>
    return;
 80080e2:	bf00      	nop
  }
}
 80080e4:	37e8      	adds	r7, #232	; 0xe8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	effffffe 	.word	0xeffffffe

080080f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008144:	b092      	sub	sp, #72	; 0x48
 8008146:	af00      	add	r7, sp, #0
 8008148:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	431a      	orrs	r2, r3
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	431a      	orrs	r2, r3
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	4313      	orrs	r3, r2
 8008166:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4bbe      	ldr	r3, [pc, #760]	; (8008468 <UART_SetConfig+0x328>)
 8008170:	4013      	ands	r3, r2
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008178:	430b      	orrs	r3, r1
 800817a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4ab3      	ldr	r2, [pc, #716]	; (800846c <UART_SetConfig+0x32c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081a8:	4313      	orrs	r3, r2
 80081aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	4baf      	ldr	r3, [pc, #700]	; (8008470 <UART_SetConfig+0x330>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	6812      	ldr	r2, [r2, #0]
 80081ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081bc:	430b      	orrs	r3, r1
 80081be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	f023 010f 	bic.w	r1, r3, #15
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4aa6      	ldr	r2, [pc, #664]	; (8008474 <UART_SetConfig+0x334>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d177      	bne.n	80082d0 <UART_SetConfig+0x190>
 80081e0:	4ba5      	ldr	r3, [pc, #660]	; (8008478 <UART_SetConfig+0x338>)
 80081e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081e8:	2b28      	cmp	r3, #40	; 0x28
 80081ea:	d86d      	bhi.n	80082c8 <UART_SetConfig+0x188>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <UART_SetConfig+0xb4>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008299 	.word	0x08008299
 80081f8:	080082c9 	.word	0x080082c9
 80081fc:	080082c9 	.word	0x080082c9
 8008200:	080082c9 	.word	0x080082c9
 8008204:	080082c9 	.word	0x080082c9
 8008208:	080082c9 	.word	0x080082c9
 800820c:	080082c9 	.word	0x080082c9
 8008210:	080082c9 	.word	0x080082c9
 8008214:	080082a1 	.word	0x080082a1
 8008218:	080082c9 	.word	0x080082c9
 800821c:	080082c9 	.word	0x080082c9
 8008220:	080082c9 	.word	0x080082c9
 8008224:	080082c9 	.word	0x080082c9
 8008228:	080082c9 	.word	0x080082c9
 800822c:	080082c9 	.word	0x080082c9
 8008230:	080082c9 	.word	0x080082c9
 8008234:	080082a9 	.word	0x080082a9
 8008238:	080082c9 	.word	0x080082c9
 800823c:	080082c9 	.word	0x080082c9
 8008240:	080082c9 	.word	0x080082c9
 8008244:	080082c9 	.word	0x080082c9
 8008248:	080082c9 	.word	0x080082c9
 800824c:	080082c9 	.word	0x080082c9
 8008250:	080082c9 	.word	0x080082c9
 8008254:	080082b1 	.word	0x080082b1
 8008258:	080082c9 	.word	0x080082c9
 800825c:	080082c9 	.word	0x080082c9
 8008260:	080082c9 	.word	0x080082c9
 8008264:	080082c9 	.word	0x080082c9
 8008268:	080082c9 	.word	0x080082c9
 800826c:	080082c9 	.word	0x080082c9
 8008270:	080082c9 	.word	0x080082c9
 8008274:	080082b9 	.word	0x080082b9
 8008278:	080082c9 	.word	0x080082c9
 800827c:	080082c9 	.word	0x080082c9
 8008280:	080082c9 	.word	0x080082c9
 8008284:	080082c9 	.word	0x080082c9
 8008288:	080082c9 	.word	0x080082c9
 800828c:	080082c9 	.word	0x080082c9
 8008290:	080082c9 	.word	0x080082c9
 8008294:	080082c1 	.word	0x080082c1
 8008298:	2301      	movs	r3, #1
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e222      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a6:	e21e      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80082a8:	2308      	movs	r3, #8
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ae:	e21a      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80082b0:	2310      	movs	r3, #16
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e216      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80082b8:	2320      	movs	r3, #32
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e212      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80082c0:	2340      	movs	r3, #64	; 0x40
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e20e      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e20a      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a69      	ldr	r2, [pc, #420]	; (800847c <UART_SetConfig+0x33c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d130      	bne.n	800833c <UART_SetConfig+0x1fc>
 80082da:	4b67      	ldr	r3, [pc, #412]	; (8008478 <UART_SetConfig+0x338>)
 80082dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	2b05      	cmp	r3, #5
 80082e4:	d826      	bhi.n	8008334 <UART_SetConfig+0x1f4>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <UART_SetConfig+0x1ac>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008305 	.word	0x08008305
 80082f0:	0800830d 	.word	0x0800830d
 80082f4:	08008315 	.word	0x08008315
 80082f8:	0800831d 	.word	0x0800831d
 80082fc:	08008325 	.word	0x08008325
 8008300:	0800832d 	.word	0x0800832d
 8008304:	2300      	movs	r3, #0
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e1ec      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800830c:	2304      	movs	r3, #4
 800830e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008312:	e1e8      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008314:	2308      	movs	r3, #8
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831a:	e1e4      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800831c:	2310      	movs	r3, #16
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008322:	e1e0      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008324:	2320      	movs	r3, #32
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832a:	e1dc      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800832c:	2340      	movs	r3, #64	; 0x40
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008332:	e1d8      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008334:	2380      	movs	r3, #128	; 0x80
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e1d4      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a4f      	ldr	r2, [pc, #316]	; (8008480 <UART_SetConfig+0x340>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d130      	bne.n	80083a8 <UART_SetConfig+0x268>
 8008346:	4b4c      	ldr	r3, [pc, #304]	; (8008478 <UART_SetConfig+0x338>)
 8008348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	2b05      	cmp	r3, #5
 8008350:	d826      	bhi.n	80083a0 <UART_SetConfig+0x260>
 8008352:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <UART_SetConfig+0x218>)
 8008354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008358:	08008371 	.word	0x08008371
 800835c:	08008379 	.word	0x08008379
 8008360:	08008381 	.word	0x08008381
 8008364:	08008389 	.word	0x08008389
 8008368:	08008391 	.word	0x08008391
 800836c:	08008399 	.word	0x08008399
 8008370:	2300      	movs	r3, #0
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e1b6      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008378:	2304      	movs	r3, #4
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837e:	e1b2      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008380:	2308      	movs	r3, #8
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008386:	e1ae      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008388:	2310      	movs	r3, #16
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838e:	e1aa      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008390:	2320      	movs	r3, #32
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008396:	e1a6      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008398:	2340      	movs	r3, #64	; 0x40
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839e:	e1a2      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80083a0:	2380      	movs	r3, #128	; 0x80
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a6:	e19e      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a35      	ldr	r2, [pc, #212]	; (8008484 <UART_SetConfig+0x344>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d130      	bne.n	8008414 <UART_SetConfig+0x2d4>
 80083b2:	4b31      	ldr	r3, [pc, #196]	; (8008478 <UART_SetConfig+0x338>)
 80083b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	d826      	bhi.n	800840c <UART_SetConfig+0x2cc>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <UART_SetConfig+0x284>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	080083dd 	.word	0x080083dd
 80083c8:	080083e5 	.word	0x080083e5
 80083cc:	080083ed 	.word	0x080083ed
 80083d0:	080083f5 	.word	0x080083f5
 80083d4:	080083fd 	.word	0x080083fd
 80083d8:	08008405 	.word	0x08008405
 80083dc:	2300      	movs	r3, #0
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e180      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80083e4:	2304      	movs	r3, #4
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ea:	e17c      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80083ec:	2308      	movs	r3, #8
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e178      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80083f4:	2310      	movs	r3, #16
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e174      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80083fc:	2320      	movs	r3, #32
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e170      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008404:	2340      	movs	r3, #64	; 0x40
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e16c      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800840c:	2380      	movs	r3, #128	; 0x80
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e168      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1b      	ldr	r2, [pc, #108]	; (8008488 <UART_SetConfig+0x348>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d142      	bne.n	80084a4 <UART_SetConfig+0x364>
 800841e:	4b16      	ldr	r3, [pc, #88]	; (8008478 <UART_SetConfig+0x338>)
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b05      	cmp	r3, #5
 8008428:	d838      	bhi.n	800849c <UART_SetConfig+0x35c>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x2f0>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008449 	.word	0x08008449
 8008434:	08008451 	.word	0x08008451
 8008438:	08008459 	.word	0x08008459
 800843c:	08008461 	.word	0x08008461
 8008440:	0800848d 	.word	0x0800848d
 8008444:	08008495 	.word	0x08008495
 8008448:	2300      	movs	r3, #0
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e14a      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008450:	2304      	movs	r3, #4
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e146      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008458:	2308      	movs	r3, #8
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e142      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008460:	2310      	movs	r3, #16
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e13e      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008468:	cfff69f3 	.word	0xcfff69f3
 800846c:	58000c00 	.word	0x58000c00
 8008470:	11fff4ff 	.word	0x11fff4ff
 8008474:	40011000 	.word	0x40011000
 8008478:	58024400 	.word	0x58024400
 800847c:	40004400 	.word	0x40004400
 8008480:	40004800 	.word	0x40004800
 8008484:	40004c00 	.word	0x40004c00
 8008488:	40005000 	.word	0x40005000
 800848c:	2320      	movs	r3, #32
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e128      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008494:	2340      	movs	r3, #64	; 0x40
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e124      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e120      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4acb      	ldr	r2, [pc, #812]	; (80087d8 <UART_SetConfig+0x698>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d176      	bne.n	800859c <UART_SetConfig+0x45c>
 80084ae:	4bcb      	ldr	r3, [pc, #812]	; (80087dc <UART_SetConfig+0x69c>)
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084b6:	2b28      	cmp	r3, #40	; 0x28
 80084b8:	d86c      	bhi.n	8008594 <UART_SetConfig+0x454>
 80084ba:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <UART_SetConfig+0x380>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	08008565 	.word	0x08008565
 80084c4:	08008595 	.word	0x08008595
 80084c8:	08008595 	.word	0x08008595
 80084cc:	08008595 	.word	0x08008595
 80084d0:	08008595 	.word	0x08008595
 80084d4:	08008595 	.word	0x08008595
 80084d8:	08008595 	.word	0x08008595
 80084dc:	08008595 	.word	0x08008595
 80084e0:	0800856d 	.word	0x0800856d
 80084e4:	08008595 	.word	0x08008595
 80084e8:	08008595 	.word	0x08008595
 80084ec:	08008595 	.word	0x08008595
 80084f0:	08008595 	.word	0x08008595
 80084f4:	08008595 	.word	0x08008595
 80084f8:	08008595 	.word	0x08008595
 80084fc:	08008595 	.word	0x08008595
 8008500:	08008575 	.word	0x08008575
 8008504:	08008595 	.word	0x08008595
 8008508:	08008595 	.word	0x08008595
 800850c:	08008595 	.word	0x08008595
 8008510:	08008595 	.word	0x08008595
 8008514:	08008595 	.word	0x08008595
 8008518:	08008595 	.word	0x08008595
 800851c:	08008595 	.word	0x08008595
 8008520:	0800857d 	.word	0x0800857d
 8008524:	08008595 	.word	0x08008595
 8008528:	08008595 	.word	0x08008595
 800852c:	08008595 	.word	0x08008595
 8008530:	08008595 	.word	0x08008595
 8008534:	08008595 	.word	0x08008595
 8008538:	08008595 	.word	0x08008595
 800853c:	08008595 	.word	0x08008595
 8008540:	08008585 	.word	0x08008585
 8008544:	08008595 	.word	0x08008595
 8008548:	08008595 	.word	0x08008595
 800854c:	08008595 	.word	0x08008595
 8008550:	08008595 	.word	0x08008595
 8008554:	08008595 	.word	0x08008595
 8008558:	08008595 	.word	0x08008595
 800855c:	08008595 	.word	0x08008595
 8008560:	0800858d 	.word	0x0800858d
 8008564:	2301      	movs	r3, #1
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856a:	e0bc      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800856c:	2304      	movs	r3, #4
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008572:	e0b8      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008574:	2308      	movs	r3, #8
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857a:	e0b4      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800857c:	2310      	movs	r3, #16
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008582:	e0b0      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008584:	2320      	movs	r3, #32
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858a:	e0ac      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800858c:	2340      	movs	r3, #64	; 0x40
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e0a8      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008594:	2380      	movs	r3, #128	; 0x80
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e0a4      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a8f      	ldr	r2, [pc, #572]	; (80087e0 <UART_SetConfig+0x6a0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d130      	bne.n	8008608 <UART_SetConfig+0x4c8>
 80085a6:	4b8d      	ldr	r3, [pc, #564]	; (80087dc <UART_SetConfig+0x69c>)
 80085a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	2b05      	cmp	r3, #5
 80085b0:	d826      	bhi.n	8008600 <UART_SetConfig+0x4c0>
 80085b2:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <UART_SetConfig+0x478>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	080085d1 	.word	0x080085d1
 80085bc:	080085d9 	.word	0x080085d9
 80085c0:	080085e1 	.word	0x080085e1
 80085c4:	080085e9 	.word	0x080085e9
 80085c8:	080085f1 	.word	0x080085f1
 80085cc:	080085f9 	.word	0x080085f9
 80085d0:	2300      	movs	r3, #0
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d6:	e086      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80085d8:	2304      	movs	r3, #4
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e082      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80085e0:	2308      	movs	r3, #8
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e6:	e07e      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80085e8:	2310      	movs	r3, #16
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ee:	e07a      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80085f0:	2320      	movs	r3, #32
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f6:	e076      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80085f8:	2340      	movs	r3, #64	; 0x40
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fe:	e072      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008600:	2380      	movs	r3, #128	; 0x80
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008606:	e06e      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a75      	ldr	r2, [pc, #468]	; (80087e4 <UART_SetConfig+0x6a4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d130      	bne.n	8008674 <UART_SetConfig+0x534>
 8008612:	4b72      	ldr	r3, [pc, #456]	; (80087dc <UART_SetConfig+0x69c>)
 8008614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b05      	cmp	r3, #5
 800861c:	d826      	bhi.n	800866c <UART_SetConfig+0x52c>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <UART_SetConfig+0x4e4>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	0800863d 	.word	0x0800863d
 8008628:	08008645 	.word	0x08008645
 800862c:	0800864d 	.word	0x0800864d
 8008630:	08008655 	.word	0x08008655
 8008634:	0800865d 	.word	0x0800865d
 8008638:	08008665 	.word	0x08008665
 800863c:	2300      	movs	r3, #0
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008642:	e050      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008644:	2304      	movs	r3, #4
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864a:	e04c      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800864c:	2308      	movs	r3, #8
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008652:	e048      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008654:	2310      	movs	r3, #16
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865a:	e044      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800865c:	2320      	movs	r3, #32
 800865e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008662:	e040      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008664:	2340      	movs	r3, #64	; 0x40
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866a:	e03c      	b.n	80086e6 <UART_SetConfig+0x5a6>
 800866c:	2380      	movs	r3, #128	; 0x80
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008672:	e038      	b.n	80086e6 <UART_SetConfig+0x5a6>
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a5b      	ldr	r2, [pc, #364]	; (80087e8 <UART_SetConfig+0x6a8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d130      	bne.n	80086e0 <UART_SetConfig+0x5a0>
 800867e:	4b57      	ldr	r3, [pc, #348]	; (80087dc <UART_SetConfig+0x69c>)
 8008680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	2b05      	cmp	r3, #5
 8008688:	d826      	bhi.n	80086d8 <UART_SetConfig+0x598>
 800868a:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <UART_SetConfig+0x550>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086a9 	.word	0x080086a9
 8008694:	080086b1 	.word	0x080086b1
 8008698:	080086b9 	.word	0x080086b9
 800869c:	080086c1 	.word	0x080086c1
 80086a0:	080086c9 	.word	0x080086c9
 80086a4:	080086d1 	.word	0x080086d1
 80086a8:	2302      	movs	r3, #2
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ae:	e01a      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80086b0:	2304      	movs	r3, #4
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b6:	e016      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80086b8:	2308      	movs	r3, #8
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086be:	e012      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80086c0:	2310      	movs	r3, #16
 80086c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c6:	e00e      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80086c8:	2320      	movs	r3, #32
 80086ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ce:	e00a      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80086d0:	2340      	movs	r3, #64	; 0x40
 80086d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d6:	e006      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086de:	e002      	b.n	80086e6 <UART_SetConfig+0x5a6>
 80086e0:	2380      	movs	r3, #128	; 0x80
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a3f      	ldr	r2, [pc, #252]	; (80087e8 <UART_SetConfig+0x6a8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	f040 80f8 	bne.w	80088e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	dc46      	bgt.n	8008788 <UART_SetConfig+0x648>
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	f2c0 8082 	blt.w	8008804 <UART_SetConfig+0x6c4>
 8008700:	3b02      	subs	r3, #2
 8008702:	2b1e      	cmp	r3, #30
 8008704:	d87e      	bhi.n	8008804 <UART_SetConfig+0x6c4>
 8008706:	a201      	add	r2, pc, #4	; (adr r2, 800870c <UART_SetConfig+0x5cc>)
 8008708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870c:	0800878f 	.word	0x0800878f
 8008710:	08008805 	.word	0x08008805
 8008714:	08008797 	.word	0x08008797
 8008718:	08008805 	.word	0x08008805
 800871c:	08008805 	.word	0x08008805
 8008720:	08008805 	.word	0x08008805
 8008724:	080087a7 	.word	0x080087a7
 8008728:	08008805 	.word	0x08008805
 800872c:	08008805 	.word	0x08008805
 8008730:	08008805 	.word	0x08008805
 8008734:	08008805 	.word	0x08008805
 8008738:	08008805 	.word	0x08008805
 800873c:	08008805 	.word	0x08008805
 8008740:	08008805 	.word	0x08008805
 8008744:	080087b7 	.word	0x080087b7
 8008748:	08008805 	.word	0x08008805
 800874c:	08008805 	.word	0x08008805
 8008750:	08008805 	.word	0x08008805
 8008754:	08008805 	.word	0x08008805
 8008758:	08008805 	.word	0x08008805
 800875c:	08008805 	.word	0x08008805
 8008760:	08008805 	.word	0x08008805
 8008764:	08008805 	.word	0x08008805
 8008768:	08008805 	.word	0x08008805
 800876c:	08008805 	.word	0x08008805
 8008770:	08008805 	.word	0x08008805
 8008774:	08008805 	.word	0x08008805
 8008778:	08008805 	.word	0x08008805
 800877c:	08008805 	.word	0x08008805
 8008780:	08008805 	.word	0x08008805
 8008784:	080087f7 	.word	0x080087f7
 8008788:	2b40      	cmp	r3, #64	; 0x40
 800878a:	d037      	beq.n	80087fc <UART_SetConfig+0x6bc>
 800878c:	e03a      	b.n	8008804 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800878e:	f7fe f925 	bl	80069dc <HAL_RCCEx_GetD3PCLK1Freq>
 8008792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008794:	e03c      	b.n	8008810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe f934 	bl	8006a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a4:	e034      	b.n	8008810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087a6:	f107 0318 	add.w	r3, r7, #24
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fa80 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b4:	e02c      	b.n	8008810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087b6:	4b09      	ldr	r3, [pc, #36]	; (80087dc <UART_SetConfig+0x69c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0320 	and.w	r3, r3, #32
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d016      	beq.n	80087f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <UART_SetConfig+0x69c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	08db      	lsrs	r3, r3, #3
 80087c8:	f003 0303 	and.w	r3, r3, #3
 80087cc:	4a07      	ldr	r2, [pc, #28]	; (80087ec <UART_SetConfig+0x6ac>)
 80087ce:	fa22 f303 	lsr.w	r3, r2, r3
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087d4:	e01c      	b.n	8008810 <UART_SetConfig+0x6d0>
 80087d6:	bf00      	nop
 80087d8:	40011400 	.word	0x40011400
 80087dc:	58024400 	.word	0x58024400
 80087e0:	40007800 	.word	0x40007800
 80087e4:	40007c00 	.word	0x40007c00
 80087e8:	58000c00 	.word	0x58000c00
 80087ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80087f0:	4b9d      	ldr	r3, [pc, #628]	; (8008a68 <UART_SetConfig+0x928>)
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f4:	e00c      	b.n	8008810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087f6:	4b9d      	ldr	r3, [pc, #628]	; (8008a6c <UART_SetConfig+0x92c>)
 80087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087fa:	e009      	b.n	8008810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008802:	e005      	b.n	8008810 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800880e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 81de 	beq.w	8008bd4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	4a94      	ldr	r2, [pc, #592]	; (8008a70 <UART_SetConfig+0x930>)
 800881e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008822:	461a      	mov	r2, r3
 8008824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008826:	fbb3 f3f2 	udiv	r3, r3, r2
 800882a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	4613      	mov	r3, r2
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	4413      	add	r3, r2
 8008836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008838:	429a      	cmp	r2, r3
 800883a:	d305      	bcc.n	8008848 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008844:	429a      	cmp	r2, r3
 8008846:	d903      	bls.n	8008850 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800884e:	e1c1      	b.n	8008bd4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008852:	2200      	movs	r2, #0
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	60fa      	str	r2, [r7, #12]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	4a84      	ldr	r2, [pc, #528]	; (8008a70 <UART_SetConfig+0x930>)
 800885e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008862:	b29b      	uxth	r3, r3
 8008864:	2200      	movs	r2, #0
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	607a      	str	r2, [r7, #4]
 800886a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008872:	f7f7 fd31 	bl	80002d8 <__aeabi_uldivmod>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4610      	mov	r0, r2
 800887c:	4619      	mov	r1, r3
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	020b      	lsls	r3, r1, #8
 8008888:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800888c:	0202      	lsls	r2, r0, #8
 800888e:	6979      	ldr	r1, [r7, #20]
 8008890:	6849      	ldr	r1, [r1, #4]
 8008892:	0849      	lsrs	r1, r1, #1
 8008894:	2000      	movs	r0, #0
 8008896:	460c      	mov	r4, r1
 8008898:	4605      	mov	r5, r0
 800889a:	eb12 0804 	adds.w	r8, r2, r4
 800889e:	eb43 0905 	adc.w	r9, r3, r5
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	469a      	mov	sl, r3
 80088aa:	4693      	mov	fp, r2
 80088ac:	4652      	mov	r2, sl
 80088ae:	465b      	mov	r3, fp
 80088b0:	4640      	mov	r0, r8
 80088b2:	4649      	mov	r1, r9
 80088b4:	f7f7 fd10 	bl	80002d8 <__aeabi_uldivmod>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4613      	mov	r3, r2
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088c6:	d308      	bcc.n	80088da <UART_SetConfig+0x79a>
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ce:	d204      	bcs.n	80088da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d6:	60da      	str	r2, [r3, #12]
 80088d8:	e17c      	b.n	8008bd4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088e0:	e178      	b.n	8008bd4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ea:	f040 80c5 	bne.w	8008a78 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80088ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	dc48      	bgt.n	8008988 <UART_SetConfig+0x848>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	db7b      	blt.n	80089f2 <UART_SetConfig+0x8b2>
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d879      	bhi.n	80089f2 <UART_SetConfig+0x8b2>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <UART_SetConfig+0x7c4>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	0800898f 	.word	0x0800898f
 8008908:	08008997 	.word	0x08008997
 800890c:	080089f3 	.word	0x080089f3
 8008910:	080089f3 	.word	0x080089f3
 8008914:	0800899f 	.word	0x0800899f
 8008918:	080089f3 	.word	0x080089f3
 800891c:	080089f3 	.word	0x080089f3
 8008920:	080089f3 	.word	0x080089f3
 8008924:	080089af 	.word	0x080089af
 8008928:	080089f3 	.word	0x080089f3
 800892c:	080089f3 	.word	0x080089f3
 8008930:	080089f3 	.word	0x080089f3
 8008934:	080089f3 	.word	0x080089f3
 8008938:	080089f3 	.word	0x080089f3
 800893c:	080089f3 	.word	0x080089f3
 8008940:	080089f3 	.word	0x080089f3
 8008944:	080089bf 	.word	0x080089bf
 8008948:	080089f3 	.word	0x080089f3
 800894c:	080089f3 	.word	0x080089f3
 8008950:	080089f3 	.word	0x080089f3
 8008954:	080089f3 	.word	0x080089f3
 8008958:	080089f3 	.word	0x080089f3
 800895c:	080089f3 	.word	0x080089f3
 8008960:	080089f3 	.word	0x080089f3
 8008964:	080089f3 	.word	0x080089f3
 8008968:	080089f3 	.word	0x080089f3
 800896c:	080089f3 	.word	0x080089f3
 8008970:	080089f3 	.word	0x080089f3
 8008974:	080089f3 	.word	0x080089f3
 8008978:	080089f3 	.word	0x080089f3
 800897c:	080089f3 	.word	0x080089f3
 8008980:	080089f3 	.word	0x080089f3
 8008984:	080089e5 	.word	0x080089e5
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d02e      	beq.n	80089ea <UART_SetConfig+0x8aa>
 800898c:	e031      	b.n	80089f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800898e:	f7fd f8b3 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8008992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008994:	e033      	b.n	80089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008996:	f7fd f8c5 	bl	8005b24 <HAL_RCC_GetPCLK2Freq>
 800899a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800899c:	e02f      	b.n	80089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800899e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe f830 	bl	8006a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ac:	e027      	b.n	80089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ae:	f107 0318 	add.w	r3, r7, #24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe f97c 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089bc:	e01f      	b.n	80089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089be:	4b2d      	ldr	r3, [pc, #180]	; (8008a74 <UART_SetConfig+0x934>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0320 	and.w	r3, r3, #32
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d009      	beq.n	80089de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089ca:	4b2a      	ldr	r3, [pc, #168]	; (8008a74 <UART_SetConfig+0x934>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	08db      	lsrs	r3, r3, #3
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	4a24      	ldr	r2, [pc, #144]	; (8008a68 <UART_SetConfig+0x928>)
 80089d6:	fa22 f303 	lsr.w	r3, r2, r3
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089dc:	e00f      	b.n	80089fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80089de:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <UART_SetConfig+0x928>)
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e2:	e00c      	b.n	80089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089e4:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <UART_SetConfig+0x92c>)
 80089e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e8:	e009      	b.n	80089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f0:	e005      	b.n	80089fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80089fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80e7 	beq.w	8008bd4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	4a19      	ldr	r2, [pc, #100]	; (8008a70 <UART_SetConfig+0x930>)
 8008a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a18:	005a      	lsls	r2, r3, #1
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	441a      	add	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	d916      	bls.n	8008a60 <UART_SetConfig+0x920>
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a38:	d212      	bcs.n	8008a60 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f023 030f 	bic.w	r3, r3, #15
 8008a42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a52:	4313      	orrs	r3, r2
 8008a54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008a5c:	60da      	str	r2, [r3, #12]
 8008a5e:	e0b9      	b.n	8008bd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a66:	e0b5      	b.n	8008bd4 <UART_SetConfig+0xa94>
 8008a68:	03d09000 	.word	0x03d09000
 8008a6c:	003d0900 	.word	0x003d0900
 8008a70:	08009820 	.word	0x08009820
 8008a74:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a7c:	2b20      	cmp	r3, #32
 8008a7e:	dc49      	bgt.n	8008b14 <UART_SetConfig+0x9d4>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	db7c      	blt.n	8008b7e <UART_SetConfig+0xa3e>
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	d87a      	bhi.n	8008b7e <UART_SetConfig+0xa3e>
 8008a88:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <UART_SetConfig+0x950>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008b1b 	.word	0x08008b1b
 8008a94:	08008b23 	.word	0x08008b23
 8008a98:	08008b7f 	.word	0x08008b7f
 8008a9c:	08008b7f 	.word	0x08008b7f
 8008aa0:	08008b2b 	.word	0x08008b2b
 8008aa4:	08008b7f 	.word	0x08008b7f
 8008aa8:	08008b7f 	.word	0x08008b7f
 8008aac:	08008b7f 	.word	0x08008b7f
 8008ab0:	08008b3b 	.word	0x08008b3b
 8008ab4:	08008b7f 	.word	0x08008b7f
 8008ab8:	08008b7f 	.word	0x08008b7f
 8008abc:	08008b7f 	.word	0x08008b7f
 8008ac0:	08008b7f 	.word	0x08008b7f
 8008ac4:	08008b7f 	.word	0x08008b7f
 8008ac8:	08008b7f 	.word	0x08008b7f
 8008acc:	08008b7f 	.word	0x08008b7f
 8008ad0:	08008b4b 	.word	0x08008b4b
 8008ad4:	08008b7f 	.word	0x08008b7f
 8008ad8:	08008b7f 	.word	0x08008b7f
 8008adc:	08008b7f 	.word	0x08008b7f
 8008ae0:	08008b7f 	.word	0x08008b7f
 8008ae4:	08008b7f 	.word	0x08008b7f
 8008ae8:	08008b7f 	.word	0x08008b7f
 8008aec:	08008b7f 	.word	0x08008b7f
 8008af0:	08008b7f 	.word	0x08008b7f
 8008af4:	08008b7f 	.word	0x08008b7f
 8008af8:	08008b7f 	.word	0x08008b7f
 8008afc:	08008b7f 	.word	0x08008b7f
 8008b00:	08008b7f 	.word	0x08008b7f
 8008b04:	08008b7f 	.word	0x08008b7f
 8008b08:	08008b7f 	.word	0x08008b7f
 8008b0c:	08008b7f 	.word	0x08008b7f
 8008b10:	08008b71 	.word	0x08008b71
 8008b14:	2b40      	cmp	r3, #64	; 0x40
 8008b16:	d02e      	beq.n	8008b76 <UART_SetConfig+0xa36>
 8008b18:	e031      	b.n	8008b7e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b1a:	f7fc ffed 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8008b1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b20:	e033      	b.n	8008b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b22:	f7fc ffff 	bl	8005b24 <HAL_RCC_GetPCLK2Freq>
 8008b26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b28:	e02f      	b.n	8008b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fd ff6a 	bl	8006a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b38:	e027      	b.n	8008b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b3a:	f107 0318 	add.w	r3, r7, #24
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe f8b6 	bl	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b48:	e01f      	b.n	8008b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b4a:	4b2d      	ldr	r3, [pc, #180]	; (8008c00 <UART_SetConfig+0xac0>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b56:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <UART_SetConfig+0xac0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	08db      	lsrs	r3, r3, #3
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	4a28      	ldr	r2, [pc, #160]	; (8008c04 <UART_SetConfig+0xac4>)
 8008b62:	fa22 f303 	lsr.w	r3, r2, r3
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b68:	e00f      	b.n	8008b8a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b6a:	4b26      	ldr	r3, [pc, #152]	; (8008c04 <UART_SetConfig+0xac4>)
 8008b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b6e:	e00c      	b.n	8008b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <UART_SetConfig+0xac8>)
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b74:	e009      	b.n	8008b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b7c:	e005      	b.n	8008b8a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b88:	bf00      	nop
    }

    if (pclk != 0U)
 8008b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d021      	beq.n	8008bd4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	4a1d      	ldr	r2, [pc, #116]	; (8008c0c <UART_SetConfig+0xacc>)
 8008b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	441a      	add	r2, r3
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	2b0f      	cmp	r3, #15
 8008bb8:	d909      	bls.n	8008bce <UART_SetConfig+0xa8e>
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc0:	d205      	bcs.n	8008bce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60da      	str	r2, [r3, #12]
 8008bcc:	e002      	b.n	8008bd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2200      	movs	r2, #0
 8008be8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2200      	movs	r2, #0
 8008bee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008bf0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3748      	adds	r7, #72	; 0x48
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bfe:	bf00      	nop
 8008c00:	58024400 	.word	0x58024400
 8008c04:	03d09000 	.word	0x03d09000
 8008c08:	003d0900 	.word	0x003d0900
 8008c0c:	08009820 	.word	0x08009820

08008c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00a      	beq.n	8008c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	f003 0310 	and.w	r3, r3, #16
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01a      	beq.n	8008d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d0e:	d10a      	bne.n	8008d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	605a      	str	r2, [r3, #4]
  }
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d64:	f7f8 fcf8 	bl	8001758 <HAL_GetTick>
 8008d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0308 	and.w	r3, r3, #8
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d10e      	bne.n	8008d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f82f 	bl	8008dea <UART_WaitOnFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e025      	b.n	8008de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	d10e      	bne.n	8008dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f819 	bl	8008dea <UART_WaitOnFlagUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e00f      	b.n	8008de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2220      	movs	r2, #32
 8008dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b09c      	sub	sp, #112	; 0x70
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	603b      	str	r3, [r7, #0]
 8008df6:	4613      	mov	r3, r2
 8008df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfa:	e0a9      	b.n	8008f50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	f000 80a5 	beq.w	8008f50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e06:	f7f8 fca7 	bl	8001758 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d302      	bcc.n	8008e1c <UART_WaitOnFlagUntilTimeout+0x32>
 8008e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d140      	bne.n	8008e9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e30:	667b      	str	r3, [r7, #100]	; 0x64
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e6      	bne.n	8008e1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3308      	adds	r3, #8
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	f023 0301 	bic.w	r3, r3, #1
 8008e64:	663b      	str	r3, [r7, #96]	; 0x60
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e5      	bne.n	8008e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e069      	b.n	8008f72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d051      	beq.n	8008f50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eba:	d149      	bne.n	8008f50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ec4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e6      	bne.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3308      	adds	r3, #8
 8008efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	613b      	str	r3, [r7, #16]
   return(result);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f023 0301 	bic.w	r3, r3, #1
 8008f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3308      	adds	r3, #8
 8008f16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f18:	623a      	str	r2, [r7, #32]
 8008f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	69f9      	ldr	r1, [r7, #28]
 8008f1e:	6a3a      	ldr	r2, [r7, #32]
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e5      	bne.n	8008ef8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2220      	movs	r2, #32
 8008f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e010      	b.n	8008f72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	69da      	ldr	r2, [r3, #28]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	bf0c      	ite	eq
 8008f60:	2301      	moveq	r3, #1
 8008f62:	2300      	movne	r3, #0
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	461a      	mov	r2, r3
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	f43f af46 	beq.w	8008dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3770      	adds	r7, #112	; 0x70
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b096      	sub	sp, #88	; 0x58
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	88fa      	ldrh	r2, [r7, #6]
 8008f94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2222      	movs	r2, #34	; 0x22
 8008fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d02c      	beq.n	800900a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb4:	4a42      	ldr	r2, [pc, #264]	; (80090c0 <UART_Start_Receive_DMA+0x144>)
 8008fb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fbc:	4a41      	ldr	r2, [pc, #260]	; (80090c4 <UART_Start_Receive_DMA+0x148>)
 8008fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fc4:	4a40      	ldr	r2, [pc, #256]	; (80090c8 <UART_Start_Receive_DMA+0x14c>)
 8008fc6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fcc:	2200      	movs	r2, #0
 8008fce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3324      	adds	r3, #36	; 0x24
 8008fda:	4619      	mov	r1, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	f7f9 f8fc 	bl	80021e0 <HAL_DMA_Start_IT>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00d      	beq.n	800900a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2210      	movs	r2, #16
 8008ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2220      	movs	r2, #32
 8009002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e055      	b.n	80090b6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d018      	beq.n	800904c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800902e:	657b      	str	r3, [r7, #84]	; 0x54
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009038:	64bb      	str	r3, [r7, #72]	; 0x48
 800903a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800903e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e6      	bne.n	800901a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	653b      	str	r3, [r7, #80]	; 0x50
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800906c:	637a      	str	r2, [r7, #52]	; 0x34
 800906e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e5      	bne.n	800904c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	613b      	str	r3, [r7, #16]
   return(result);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090a0:	623a      	str	r2, [r7, #32]
 80090a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	69f9      	ldr	r1, [r7, #28]
 80090a6:	6a3a      	ldr	r2, [r7, #32]
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e5      	bne.n	8009080 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3758      	adds	r7, #88	; 0x58
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	0800921d 	.word	0x0800921d
 80090c4:	0800933f 	.word	0x0800933f
 80090c8:	08009377 	.word	0x08009377

080090cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b08f      	sub	sp, #60	; 0x3c
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090e8:	637b      	str	r3, [r7, #52]	; 0x34
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e6      	bne.n	80090d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	60bb      	str	r3, [r7, #8]
   return(result);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800911c:	633b      	str	r3, [r7, #48]	; 0x30
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009126:	61ba      	str	r2, [r7, #24]
 8009128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6979      	ldr	r1, [r7, #20]
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	613b      	str	r3, [r7, #16]
   return(result);
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e5      	bne.n	8009106 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2220      	movs	r2, #32
 800913e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009142:	bf00      	nop
 8009144:	373c      	adds	r7, #60	; 0x3c
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b095      	sub	sp, #84	; 0x54
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800916c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009176:	643b      	str	r3, [r7, #64]	; 0x40
 8009178:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800917c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e6      	bne.n	8009158 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	61fb      	str	r3, [r7, #28]
   return(result);
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	4b1e      	ldr	r3, [pc, #120]	; (8009218 <UART_EndRxTransfer+0xc8>)
 800919e:	4013      	ands	r3, r2
 80091a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e5      	bne.n	800918a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d118      	bne.n	80091f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f023 0310 	bic.w	r3, r3, #16
 80091da:	647b      	str	r3, [r7, #68]	; 0x44
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6979      	ldr	r1, [r7, #20]
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	613b      	str	r3, [r7, #16]
   return(result);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e6      	bne.n	80091c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800920c:	bf00      	nop
 800920e:	3754      	adds	r7, #84	; 0x54
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	effffffe 	.word	0xeffffffe

0800921c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b09c      	sub	sp, #112	; 0x70
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009228:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009232:	d071      	beq.n	8009318 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009236:	2200      	movs	r2, #0
 8009238:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800923c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800924a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800924c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009250:	66bb      	str	r3, [r7, #104]	; 0x68
 8009252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800925a:	65bb      	str	r3, [r7, #88]	; 0x58
 800925c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e6      	bne.n	800923c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800926e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3308      	adds	r3, #8
 8009274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	f023 0301 	bic.w	r3, r3, #1
 8009284:	667b      	str	r3, [r7, #100]	; 0x64
 8009286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3308      	adds	r3, #8
 800928c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800928e:	647a      	str	r2, [r7, #68]	; 0x44
 8009290:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800929c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e5      	bne.n	800926e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3308      	adds	r3, #8
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	623b      	str	r3, [r7, #32]
   return(result);
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092b8:	663b      	str	r3, [r7, #96]	; 0x60
 80092ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3308      	adds	r3, #8
 80092c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092c2:	633a      	str	r2, [r7, #48]	; 0x30
 80092c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e5      	bne.n	80092a2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d8:	2220      	movs	r2, #32
 80092da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d118      	bne.n	8009318 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0310 	bic.w	r3, r3, #16
 80092fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009304:	61fb      	str	r3, [r7, #28]
 8009306:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	69b9      	ldr	r1, [r7, #24]
 800930a:	69fa      	ldr	r2, [r7, #28]
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	617b      	str	r3, [r7, #20]
   return(result);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e6      	bne.n	80092e6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931c:	2b01      	cmp	r3, #1
 800931e:	d107      	bne.n	8009330 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009322:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009326:	4619      	mov	r1, r3
 8009328:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800932a:	f7f7 fe45 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800932e:	e002      	b.n	8009336 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8009330:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009332:	f7fe fee7 	bl	8008104 <HAL_UART_RxCpltCallback>
}
 8009336:	bf00      	nop
 8009338:	3770      	adds	r7, #112	; 0x70
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009350:	2b01      	cmp	r3, #1
 8009352:	d109      	bne.n	8009368 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800935a:	085b      	lsrs	r3, r3, #1
 800935c:	b29b      	uxth	r3, r3
 800935e:	4619      	mov	r1, r3
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7f7 fe29 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009366:	e002      	b.n	800936e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7fe fed5 	bl	8008118 <HAL_UART_RxHalfCpltCallback>
}
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b086      	sub	sp, #24
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800938a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009392:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939e:	2b80      	cmp	r3, #128	; 0x80
 80093a0:	d109      	bne.n	80093b6 <UART_DMAError+0x40>
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b21      	cmp	r3, #33	; 0x21
 80093a6:	d106      	bne.n	80093b6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80093b0:	6978      	ldr	r0, [r7, #20]
 80093b2:	f7ff fe8b 	bl	80090cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	2b40      	cmp	r3, #64	; 0x40
 80093c2:	d109      	bne.n	80093d8 <UART_DMAError+0x62>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b22      	cmp	r3, #34	; 0x22
 80093c8:	d106      	bne.n	80093d8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80093d2:	6978      	ldr	r0, [r7, #20]
 80093d4:	f7ff febc 	bl	8009150 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093de:	f043 0210 	orr.w	r2, r3, #16
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093e8:	6978      	ldr	r0, [r7, #20]
 80093ea:	f7fe fe9f 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ee:	bf00      	nop
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7fe fe89 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b088      	sub	sp, #32
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	60bb      	str	r3, [r7, #8]
   return(result);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	61bb      	str	r3, [r7, #24]
 800944a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6979      	ldr	r1, [r7, #20]
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	613b      	str	r3, [r7, #16]
   return(result);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e6      	bne.n	800942a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2220      	movs	r2, #32
 8009460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7fe fe40 	bl	80080f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009470:	bf00      	nop
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <HAL_UARTEx_DisableFifoMode+0x16>
 80094c6:	2302      	movs	r3, #2
 80094c8:	e027      	b.n	800951a <HAL_UARTEx_DisableFifoMode+0x66>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2224      	movs	r2, #36	; 0x24
 80094d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 0201 	bic.w	r2, r2, #1
 80094f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009536:	2b01      	cmp	r3, #1
 8009538:	d101      	bne.n	800953e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800953a:	2302      	movs	r3, #2
 800953c:	e02d      	b.n	800959a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2224      	movs	r2, #36	; 0x24
 800954a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0201 	bic.w	r2, r2, #1
 8009564:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f8ac 	bl	80096d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2220      	movs	r2, #32
 800958c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095b6:	2302      	movs	r3, #2
 80095b8:	e02d      	b.n	8009616 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2224      	movs	r2, #36	; 0x24
 80095c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f022 0201 	bic.w	r2, r2, #1
 80095e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f86e 	bl	80096d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2220      	movs	r2, #32
 8009608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b08c      	sub	sp, #48	; 0x30
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	4613      	mov	r3, r2
 800962a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009632:	2b20      	cmp	r3, #32
 8009634:	d14a      	bne.n	80096cc <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e043      	b.n	80096ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8009650:	2302      	movs	r3, #2
 8009652:	e03c      	b.n	80096ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009662:	88fb      	ldrh	r3, [r7, #6]
 8009664:	461a      	mov	r2, r3
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff fc87 	bl	8008f7c <UART_Start_Receive_DMA>
 800966e:	4603      	mov	r3, r0
 8009670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009678:	2b00      	cmp	r3, #0
 800967a:	d124      	bne.n	80096c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009680:	2b01      	cmp	r3, #1
 8009682:	d11d      	bne.n	80096c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2210      	movs	r2, #16
 800968a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	e853 3f00 	ldrex	r3, [r3]
 8009698:	617b      	str	r3, [r7, #20]
   return(result);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f043 0310 	orr.w	r3, r3, #16
 80096a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	627b      	str	r3, [r7, #36]	; 0x24
 80096ac:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	6a39      	ldr	r1, [r7, #32]
 80096b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b2:	e841 2300 	strex	r3, r2, [r1]
 80096b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1e6      	bne.n	800968c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80096be:	e002      	b.n	80096c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80096c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096ca:	e000      	b.n	80096ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80096cc:	2302      	movs	r3, #2
  }
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3730      	adds	r7, #48	; 0x30
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d108      	bne.n	80096fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096f8:	e031      	b.n	800975e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096fa:	2310      	movs	r3, #16
 80096fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096fe:	2310      	movs	r3, #16
 8009700:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	0e5b      	lsrs	r3, r3, #25
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 0307 	and.w	r3, r3, #7
 8009710:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	0f5b      	lsrs	r3, r3, #29
 800971a:	b2db      	uxtb	r3, r3
 800971c:	f003 0307 	and.w	r3, r3, #7
 8009720:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	7b3a      	ldrb	r2, [r7, #12]
 8009726:	4911      	ldr	r1, [pc, #68]	; (800976c <UARTEx_SetNbDataToProcess+0x94>)
 8009728:	5c8a      	ldrb	r2, [r1, r2]
 800972a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800972e:	7b3a      	ldrb	r2, [r7, #12]
 8009730:	490f      	ldr	r1, [pc, #60]	; (8009770 <UARTEx_SetNbDataToProcess+0x98>)
 8009732:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009734:	fb93 f3f2 	sdiv	r3, r3, r2
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	7b7a      	ldrb	r2, [r7, #13]
 8009744:	4909      	ldr	r1, [pc, #36]	; (800976c <UARTEx_SetNbDataToProcess+0x94>)
 8009746:	5c8a      	ldrb	r2, [r1, r2]
 8009748:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800974c:	7b7a      	ldrb	r2, [r7, #13]
 800974e:	4908      	ldr	r1, [pc, #32]	; (8009770 <UARTEx_SetNbDataToProcess+0x98>)
 8009750:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009752:	fb93 f3f2 	sdiv	r3, r3, r2
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800975e:	bf00      	nop
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	08009838 	.word	0x08009838
 8009770:	08009840 	.word	0x08009840

08009774 <__libc_init_array>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	4d0d      	ldr	r5, [pc, #52]	; (80097ac <__libc_init_array+0x38>)
 8009778:	4c0d      	ldr	r4, [pc, #52]	; (80097b0 <__libc_init_array+0x3c>)
 800977a:	1b64      	subs	r4, r4, r5
 800977c:	10a4      	asrs	r4, r4, #2
 800977e:	2600      	movs	r6, #0
 8009780:	42a6      	cmp	r6, r4
 8009782:	d109      	bne.n	8009798 <__libc_init_array+0x24>
 8009784:	4d0b      	ldr	r5, [pc, #44]	; (80097b4 <__libc_init_array+0x40>)
 8009786:	4c0c      	ldr	r4, [pc, #48]	; (80097b8 <__libc_init_array+0x44>)
 8009788:	f000 f82e 	bl	80097e8 <_init>
 800978c:	1b64      	subs	r4, r4, r5
 800978e:	10a4      	asrs	r4, r4, #2
 8009790:	2600      	movs	r6, #0
 8009792:	42a6      	cmp	r6, r4
 8009794:	d105      	bne.n	80097a2 <__libc_init_array+0x2e>
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	f855 3b04 	ldr.w	r3, [r5], #4
 800979c:	4798      	blx	r3
 800979e:	3601      	adds	r6, #1
 80097a0:	e7ee      	b.n	8009780 <__libc_init_array+0xc>
 80097a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a6:	4798      	blx	r3
 80097a8:	3601      	adds	r6, #1
 80097aa:	e7f2      	b.n	8009792 <__libc_init_array+0x1e>
 80097ac:	08009850 	.word	0x08009850
 80097b0:	08009850 	.word	0x08009850
 80097b4:	08009850 	.word	0x08009850
 80097b8:	08009854 	.word	0x08009854

080097bc <memcpy>:
 80097bc:	440a      	add	r2, r1
 80097be:	4291      	cmp	r1, r2
 80097c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097c4:	d100      	bne.n	80097c8 <memcpy+0xc>
 80097c6:	4770      	bx	lr
 80097c8:	b510      	push	{r4, lr}
 80097ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097d2:	4291      	cmp	r1, r2
 80097d4:	d1f9      	bne.n	80097ca <memcpy+0xe>
 80097d6:	bd10      	pop	{r4, pc}

080097d8 <memset>:
 80097d8:	4402      	add	r2, r0
 80097da:	4603      	mov	r3, r0
 80097dc:	4293      	cmp	r3, r2
 80097de:	d100      	bne.n	80097e2 <memset+0xa>
 80097e0:	4770      	bx	lr
 80097e2:	f803 1b01 	strb.w	r1, [r3], #1
 80097e6:	e7f9      	b.n	80097dc <memset+0x4>

080097e8 <_init>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	bf00      	nop
 80097ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ee:	bc08      	pop	{r3}
 80097f0:	469e      	mov	lr, r3
 80097f2:	4770      	bx	lr

080097f4 <_fini>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	bf00      	nop
 80097f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fa:	bc08      	pop	{r3}
 80097fc:	469e      	mov	lr, r3
 80097fe:	4770      	bx	lr
